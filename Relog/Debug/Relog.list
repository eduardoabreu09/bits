
Relog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000221c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080022dc  080022dc  000122dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800239c  0800239c  0001239c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080023a0  080023a0  000123a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080023a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b4  20000068  0800240c  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000011c  0800240c  0002011c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fd5f  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002160  00000000  00000000  0002fdef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ecf  00000000  00000000  00031f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000670  00000000  00000000  00036e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a0  00000000  00000000  00037490  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000477b  00000000  00000000  00037d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000023e1  00000000  00000000  0003c4ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003e88c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000014ec  00000000  00000000  0003e908  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022c4 	.word	0x080022c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080022c4 	.word	0x080022c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000224:	f000 fe14 	bl	8000e50 <HAL_RCC_GetHCLKFreq>
 8000228:	21fa      	movs	r1, #250	; 0xfa
 800022a:	0089      	lsls	r1, r1, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 f870 	bl	8000314 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000234:	2001      	movs	r0, #1
 8000236:	2200      	movs	r2, #0
 8000238:	0021      	movs	r1, r4
 800023a:	4240      	negs	r0, r0
 800023c:	f000 f830 	bl	80002a0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000240:	2000      	movs	r0, #0
 8000242:	bd10      	pop	{r4, pc}

08000244 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	2310      	movs	r3, #16
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_Init+0x1c>)
{
 8000248:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800024c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024e:	430b      	orrs	r3, r1
 8000250:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000252:	f7ff ffe5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000256:	f001 fb0d 	bl	8001874 <HAL_MspInit>
}
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_IncTick+0xc>)
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	20000094 	.word	0x20000094

08000274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_GetTick+0x8>)
 8000276:	6818      	ldr	r0, [r3, #0]
}
 8000278:	4770      	bx	lr
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	20000094 	.word	0x20000094

08000280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000282:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000284:	f7ff fff6 	bl	8000274 <HAL_GetTick>
  uint32_t wait = Delay;
 8000288:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800028a:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800028c:	1c63      	adds	r3, r4, #1
 800028e:	1e5a      	subs	r2, r3, #1
 8000290:	4193      	sbcs	r3, r2
 8000292:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000294:	f7ff ffee 	bl	8000274 <HAL_GetTick>
 8000298:	1b40      	subs	r0, r0, r5
 800029a:	42a0      	cmp	r0, r4
 800029c:	d3fa      	bcc.n	8000294 <HAL_Delay+0x14>
  {
  }
}
 800029e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002a4:	2800      	cmp	r0, #0
 80002a6:	da14      	bge.n	80002d2 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	230f      	movs	r3, #15
 80002aa:	b2c0      	uxtb	r0, r0
 80002ac:	4003      	ands	r3, r0
 80002ae:	3b08      	subs	r3, #8
 80002b0:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <HAL_NVIC_SetPriority+0x58>)
 80002b2:	089b      	lsrs	r3, r3, #2
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	189b      	adds	r3, r3, r2
 80002b8:	2203      	movs	r2, #3
 80002ba:	4010      	ands	r0, r2
 80002bc:	4090      	lsls	r0, r2
 80002be:	32fc      	adds	r2, #252	; 0xfc
 80002c0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	69dc      	ldr	r4, [r3, #28]
 80002ca:	43ac      	bics	r4, r5
 80002cc:	4321      	orrs	r1, r4
 80002ce:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002d0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d2:	2503      	movs	r5, #3
 80002d4:	0883      	lsrs	r3, r0, #2
 80002d6:	4028      	ands	r0, r5
 80002d8:	40a8      	lsls	r0, r5
 80002da:	35fc      	adds	r5, #252	; 0xfc
 80002dc:	002e      	movs	r6, r5
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <HAL_NVIC_SetPriority+0x5c>)
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	189b      	adds	r3, r3, r2
 80002e4:	22c0      	movs	r2, #192	; 0xc0
 80002e6:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002e8:	4029      	ands	r1, r5
 80002ea:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	589c      	ldr	r4, [r3, r2]
 80002f0:	43b4      	bics	r4, r6
 80002f2:	4321      	orrs	r1, r4
 80002f4:	5099      	str	r1, [r3, r2]
 80002f6:	e7eb      	b.n	80002d0 <HAL_NVIC_SetPriority+0x30>
 80002f8:	e000ed00 	.word	0xe000ed00
 80002fc:	e000e100 	.word	0xe000e100

08000300 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000300:	231f      	movs	r3, #31
 8000302:	4018      	ands	r0, r3
 8000304:	3b1e      	subs	r3, #30
 8000306:	4083      	lsls	r3, r0
 8000308:	4a01      	ldr	r2, [pc, #4]	; (8000310 <HAL_NVIC_EnableIRQ+0x10>)
 800030a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800030c:	4770      	bx	lr
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	e000e100 	.word	0xe000e100

08000314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <HAL_SYSTICK_Config+0x28>)
 8000316:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000318:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031a:	4293      	cmp	r3, r2
 800031c:	d80d      	bhi.n	800033a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4a07      	ldr	r2, [pc, #28]	; (8000340 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	4808      	ldr	r0, [pc, #32]	; (8000344 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	6a03      	ldr	r3, [r0, #32]
 8000328:	0609      	lsls	r1, r1, #24
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	430b      	orrs	r3, r1
 8000330:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000332:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000334:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033a:	4770      	bx	lr
 800033c:	00ffffff 	.word	0x00ffffff
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800034a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800034c:	2804      	cmp	r0, #4
 800034e:	d102      	bne.n	8000356 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000350:	4310      	orrs	r0, r2
 8000352:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000354:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000356:	2104      	movs	r1, #4
 8000358:	438a      	bics	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	e7fa      	b.n	8000354 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	e000e010 	.word	0xe000e010

08000364 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000364:	4770      	bx	lr

08000366 <HAL_SYSTICK_IRQHandler>:
{
 8000366:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000368:	f7ff fffc 	bl	8000364 <HAL_SYSTICK_Callback>
}
 800036c:	bd10      	pop	{r4, pc}
	...

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000372:	680b      	ldr	r3, [r1, #0]
{ 
 8000374:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000376:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000378:	2300      	movs	r3, #0
{ 
 800037a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800037c:	9a02      	ldr	r2, [sp, #8]
 800037e:	40da      	lsrs	r2, r3
 8000380:	d101      	bne.n	8000386 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000382:	b007      	add	sp, #28
 8000384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000386:	2201      	movs	r2, #1
 8000388:	409a      	lsls	r2, r3
 800038a:	9203      	str	r2, [sp, #12]
 800038c:	9903      	ldr	r1, [sp, #12]
 800038e:	9a02      	ldr	r2, [sp, #8]
 8000390:	400a      	ands	r2, r1
 8000392:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000394:	d100      	bne.n	8000398 <HAL_GPIO_Init+0x28>
 8000396:	e08c      	b.n	80004b2 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000398:	9a01      	ldr	r2, [sp, #4]
 800039a:	2110      	movs	r1, #16
 800039c:	6852      	ldr	r2, [r2, #4]
 800039e:	0016      	movs	r6, r2
 80003a0:	438e      	bics	r6, r1
 80003a2:	2e02      	cmp	r6, #2
 80003a4:	d10e      	bne.n	80003c4 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003a6:	2507      	movs	r5, #7
 80003a8:	401d      	ands	r5, r3
 80003aa:	00ad      	lsls	r5, r5, #2
 80003ac:	3901      	subs	r1, #1
 80003ae:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80003b0:	08dc      	lsrs	r4, r3, #3
 80003b2:	00a4      	lsls	r4, r4, #2
 80003b4:	1904      	adds	r4, r0, r4
 80003b6:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003b8:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	6909      	ldr	r1, [r1, #16]
 80003be:	40a9      	lsls	r1, r5
 80003c0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003c2:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003c4:	2403      	movs	r4, #3
 80003c6:	005f      	lsls	r7, r3, #1
 80003c8:	40bc      	lsls	r4, r7
 80003ca:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003cc:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ce:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003d0:	4025      	ands	r5, r4
 80003d2:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003d4:	2503      	movs	r5, #3
 80003d6:	4015      	ands	r5, r2
 80003d8:	40bd      	lsls	r5, r7
 80003da:	4661      	mov	r1, ip
 80003dc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003de:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e0:	2e01      	cmp	r6, #1
 80003e2:	d80f      	bhi.n	8000404 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003e4:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003e6:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003e8:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003ea:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003ec:	40bd      	lsls	r5, r7
 80003ee:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003f0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003f2:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003f4:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003f6:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003f8:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003fa:	2101      	movs	r1, #1
 80003fc:	400d      	ands	r5, r1
 80003fe:	409d      	lsls	r5, r3
 8000400:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000402:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000404:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000406:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000408:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800040a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800040c:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800040e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000410:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000412:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000414:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000416:	420a      	tst	r2, r1
 8000418:	d04b      	beq.n	80004b2 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	2101      	movs	r1, #1
 800041c:	4c26      	ldr	r4, [pc, #152]	; (80004b8 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000420:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000422:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000424:	430d      	orrs	r5, r1
 8000426:	61a5      	str	r5, [r4, #24]
 8000428:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800042a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042c:	400c      	ands	r4, r1
 800042e:	9405      	str	r4, [sp, #20]
 8000430:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000432:	240f      	movs	r4, #15
 8000434:	4921      	ldr	r1, [pc, #132]	; (80004bc <HAL_GPIO_Init+0x14c>)
 8000436:	00ad      	lsls	r5, r5, #2
 8000438:	00b6      	lsls	r6, r6, #2
 800043a:	186d      	adds	r5, r5, r1
 800043c:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000440:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000442:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000444:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000446:	2400      	movs	r4, #0
 8000448:	4288      	cmp	r0, r1
 800044a:	d00c      	beq.n	8000466 <HAL_GPIO_Init+0xf6>
 800044c:	491c      	ldr	r1, [pc, #112]	; (80004c0 <HAL_GPIO_Init+0x150>)
 800044e:	3401      	adds	r4, #1
 8000450:	4288      	cmp	r0, r1
 8000452:	d008      	beq.n	8000466 <HAL_GPIO_Init+0xf6>
 8000454:	491b      	ldr	r1, [pc, #108]	; (80004c4 <HAL_GPIO_Init+0x154>)
 8000456:	3401      	adds	r4, #1
 8000458:	4288      	cmp	r0, r1
 800045a:	d004      	beq.n	8000466 <HAL_GPIO_Init+0xf6>
 800045c:	491a      	ldr	r1, [pc, #104]	; (80004c8 <HAL_GPIO_Init+0x158>)
 800045e:	3403      	adds	r4, #3
 8000460:	4288      	cmp	r0, r1
 8000462:	d100      	bne.n	8000466 <HAL_GPIO_Init+0xf6>
 8000464:	3c02      	subs	r4, #2
 8000466:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000468:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800046a:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 800046c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800046e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000470:	4c16      	ldr	r4, [pc, #88]	; (80004cc <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000472:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000474:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000476:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000478:	03d1      	lsls	r1, r2, #15
 800047a:	d401      	bmi.n	8000480 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800047c:	003e      	movs	r6, r7
 800047e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000480:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000482:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000484:	9e00      	ldr	r6, [sp, #0]
 8000486:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000488:	0391      	lsls	r1, r2, #14
 800048a:	d401      	bmi.n	8000490 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800048c:	003e      	movs	r6, r7
 800048e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000490:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000492:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000494:	9e00      	ldr	r6, [sp, #0]
 8000496:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000498:	02d1      	lsls	r1, r2, #11
 800049a:	d401      	bmi.n	80004a0 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800049c:	003e      	movs	r6, r7
 800049e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80004a0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80004a2:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80004a4:	9f00      	ldr	r7, [sp, #0]
 80004a6:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004a8:	0292      	lsls	r2, r2, #10
 80004aa:	d401      	bmi.n	80004b0 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004ac:	402e      	ands	r6, r5
 80004ae:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80004b0:	60e7      	str	r7, [r4, #12]
    position++;
 80004b2:	3301      	adds	r3, #1
 80004b4:	e762      	b.n	800037c <HAL_GPIO_Init+0xc>
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000
 80004c0:	48000400 	.word	0x48000400
 80004c4:	48000800 	.word	0x48000800
 80004c8:	48000c00 	.word	0x48000c00
 80004cc:	40010400 	.word	0x40010400

080004d0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80004d0:	6803      	ldr	r3, [r0, #0]
 80004d2:	699a      	ldr	r2, [r3, #24]
 80004d4:	0792      	lsls	r2, r2, #30
 80004d6:	d501      	bpl.n	80004dc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80004d8:	2200      	movs	r2, #0
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80004dc:	2201      	movs	r2, #1
 80004de:	6999      	ldr	r1, [r3, #24]
 80004e0:	4211      	tst	r1, r2
 80004e2:	d102      	bne.n	80004ea <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80004e4:	6999      	ldr	r1, [r3, #24]
 80004e6:	430a      	orrs	r2, r1
 80004e8:	619a      	str	r2, [r3, #24]
  }
}
 80004ea:	4770      	bx	lr

080004ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80004ec:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80004ee:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <I2C_TransferConfig+0x20>)
  tmpreg = hi2c->Instance->CR2;
 80004f2:	6865      	ldr	r5, [r4, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80004f4:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80004f6:	4028      	ands	r0, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80004f8:	9d03      	ldr	r5, [sp, #12]
 80004fa:	0d89      	lsrs	r1, r1, #22
 80004fc:	432b      	orrs	r3, r5
 80004fe:	4319      	orrs	r1, r3
 8000500:	0412      	lsls	r2, r2, #16
 8000502:	430a      	orrs	r2, r1
 8000504:	4302      	orrs	r2, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000506:	6062      	str	r2, [r4, #4]
}
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	fc009800 	.word	0xfc009800

08000510 <I2C_WaitOnFlagUntilTimeout>:
{
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	0004      	movs	r4, r0
 8000514:	000e      	movs	r6, r1
 8000516:	0017      	movs	r7, r2
 8000518:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800051a:	6822      	ldr	r2, [r4, #0]
 800051c:	6993      	ldr	r3, [r2, #24]
 800051e:	4033      	ands	r3, r6
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	4259      	negs	r1, r3
 8000524:	414b      	adcs	r3, r1
 8000526:	42bb      	cmp	r3, r7
 8000528:	d001      	beq.n	800052e <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800052a:	2000      	movs	r0, #0
 800052c:	e00e      	b.n	800054c <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 800052e:	1c6b      	adds	r3, r5, #1
 8000530:	d0f4      	beq.n	800051c <I2C_WaitOnFlagUntilTimeout+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000532:	2d00      	cmp	r5, #0
 8000534:	d10b      	bne.n	800054e <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State = HAL_I2C_STATE_READY;
 8000536:	0023      	movs	r3, r4
 8000538:	2220      	movs	r2, #32
 800053a:	3341      	adds	r3, #65	; 0x41
 800053c:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800053e:	0022      	movs	r2, r4
 8000540:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000542:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000544:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8000546:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000548:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800054a:	7023      	strb	r3, [r4, #0]
}
 800054c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800054e:	f7ff fe91 	bl	8000274 <HAL_GetTick>
 8000552:	9b06      	ldr	r3, [sp, #24]
 8000554:	1ac0      	subs	r0, r0, r3
 8000556:	4285      	cmp	r5, r0
 8000558:	d2df      	bcs.n	800051a <I2C_WaitOnFlagUntilTimeout+0xa>
 800055a:	e7ec      	b.n	8000536 <I2C_WaitOnFlagUntilTimeout+0x26>

0800055c <I2C_IsAcknowledgeFailed>:
{
 800055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800055e:	6803      	ldr	r3, [r0, #0]
{
 8000560:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000562:	6998      	ldr	r0, [r3, #24]
 8000564:	2310      	movs	r3, #16
{
 8000566:	000e      	movs	r6, r1
 8000568:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800056a:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800056c:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800056e:	2800      	cmp	r0, #0
 8000570:	d115      	bne.n	800059e <I2C_IsAcknowledgeFailed+0x42>
}
 8000572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000574:	1c72      	adds	r2, r6, #1
 8000576:	d013      	beq.n	80005a0 <I2C_IsAcknowledgeFailed+0x44>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000578:	2e00      	cmp	r6, #0
 800057a:	d10b      	bne.n	8000594 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 800057c:	0023      	movs	r3, r4
 800057e:	2220      	movs	r2, #32
 8000580:	3341      	adds	r3, #65	; 0x41
 8000582:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000584:	0022      	movs	r2, r4
 8000586:	2300      	movs	r3, #0
 8000588:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800058a:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800058c:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 800058e:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 8000590:	7023      	strb	r3, [r4, #0]
 8000592:	e7ee      	b.n	8000572 <I2C_IsAcknowledgeFailed+0x16>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000594:	f7ff fe6e 	bl	8000274 <HAL_GetTick>
 8000598:	1bc0      	subs	r0, r0, r7
 800059a:	4286      	cmp	r6, r0
 800059c:	d3ee      	bcc.n	800057c <I2C_IsAcknowledgeFailed+0x20>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	699a      	ldr	r2, [r3, #24]
 80005a2:	422a      	tst	r2, r5
 80005a4:	d0e6      	beq.n	8000574 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005a6:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80005a8:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005aa:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80005ac:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80005ae:	f7ff ff8f 	bl	80004d0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80005b2:	6822      	ldr	r2, [r4, #0]
 80005b4:	4908      	ldr	r1, [pc, #32]	; (80005d8 <I2C_IsAcknowledgeFailed+0x7c>)
 80005b6:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80005ba:	400b      	ands	r3, r1
 80005bc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80005be:	2304      	movs	r3, #4
 80005c0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80005c2:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005c4:	0022      	movs	r2, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80005c6:	3341      	adds	r3, #65	; 0x41
 80005c8:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80005ce:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005d0:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80005d2:	7023      	strb	r3, [r4, #0]
 80005d4:	e7cd      	b.n	8000572 <I2C_IsAcknowledgeFailed+0x16>
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	fe00e800 	.word	0xfe00e800

080005dc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	0004      	movs	r4, r0
 80005e0:	000d      	movs	r5, r1
 80005e2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80005e4:	2702      	movs	r7, #2
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	423b      	tst	r3, r7
 80005ec:	d001      	beq.n	80005f2 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80005ee:	2000      	movs	r0, #0
 80005f0:	e018      	b.n	8000624 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80005f2:	0032      	movs	r2, r6
 80005f4:	0029      	movs	r1, r5
 80005f6:	0020      	movs	r0, r4
 80005f8:	f7ff ffb0 	bl	800055c <I2C_IsAcknowledgeFailed>
 80005fc:	2800      	cmp	r0, #0
 80005fe:	d118      	bne.n	8000632 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8000600:	1c6b      	adds	r3, r5, #1
 8000602:	d0f0      	beq.n	80005e6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000604:	2d00      	cmp	r5, #0
 8000606:	d10e      	bne.n	8000626 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000608:	2220      	movs	r2, #32
 800060a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800060c:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800060e:	4313      	orrs	r3, r2
 8000610:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000612:	0023      	movs	r3, r4
 8000614:	3341      	adds	r3, #65	; 0x41
 8000616:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000618:	0022      	movs	r2, r4
 800061a:	2300      	movs	r3, #0
 800061c:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800061e:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000620:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000622:	7023      	strb	r3, [r4, #0]
}
 8000624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000626:	f7ff fe25 	bl	8000274 <HAL_GetTick>
 800062a:	1b80      	subs	r0, r0, r6
 800062c:	4285      	cmp	r5, r0
 800062e:	d2da      	bcs.n	80005e6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8000630:	e7ea      	b.n	8000608 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 8000632:	2001      	movs	r0, #1
 8000634:	e7f6      	b.n	8000624 <I2C_WaitOnTXISFlagUntilTimeout+0x48>

08000636 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000638:	0004      	movs	r4, r0
 800063a:	000d      	movs	r5, r1
 800063c:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800063e:	2720      	movs	r7, #32
 8000640:	6823      	ldr	r3, [r4, #0]
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	423b      	tst	r3, r7
 8000646:	d001      	beq.n	800064c <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8000648:	2000      	movs	r0, #0
 800064a:	e016      	b.n	800067a <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800064c:	0032      	movs	r2, r6
 800064e:	0029      	movs	r1, r5
 8000650:	0020      	movs	r0, r4
 8000652:	f7ff ff83 	bl	800055c <I2C_IsAcknowledgeFailed>
 8000656:	2800      	cmp	r0, #0
 8000658:	d116      	bne.n	8000688 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800065a:	2d00      	cmp	r5, #0
 800065c:	d10e      	bne.n	800067c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800065e:	2220      	movs	r2, #32
 8000660:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000662:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000664:	4313      	orrs	r3, r2
 8000666:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000668:	0023      	movs	r3, r4
 800066a:	3341      	adds	r3, #65	; 0x41
 800066c:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800066e:	0022      	movs	r2, r4
 8000670:	2300      	movs	r3, #0
 8000672:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000674:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000676:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000678:	7023      	strb	r3, [r4, #0]
}
 800067a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800067c:	f7ff fdfa 	bl	8000274 <HAL_GetTick>
 8000680:	1b80      	subs	r0, r0, r6
 8000682:	4285      	cmp	r5, r0
 8000684:	d2dc      	bcs.n	8000640 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8000686:	e7ea      	b.n	800065e <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 8000688:	2001      	movs	r0, #1
 800068a:	e7f6      	b.n	800067a <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

0800068c <HAL_I2C_Init>:
{
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000690:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000692:	2c00      	cmp	r4, #0
 8000694:	d03f      	beq.n	8000716 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000696:	0025      	movs	r5, r4
 8000698:	3541      	adds	r5, #65	; 0x41
 800069a:	782b      	ldrb	r3, [r5, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d105      	bne.n	80006ae <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80006a2:	0022      	movs	r2, r4
 80006a4:	3240      	adds	r2, #64	; 0x40
 80006a6:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80006a8:	0020      	movs	r0, r4
 80006aa:	f001 f90b 	bl	80018c4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006ae:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80006b0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006b2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80006b4:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80006b6:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	68a6      	ldr	r6, [r4, #8]
 80006bc:	438a      	bics	r2, r1
 80006be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80006c0:	6861      	ldr	r1, [r4, #4]
 80006c2:	4a1a      	ldr	r2, [pc, #104]	; (800072c <HAL_I2C_Init+0xa0>)
 80006c4:	400a      	ands	r2, r1
 80006c6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80006c8:	6899      	ldr	r1, [r3, #8]
 80006ca:	4a19      	ldr	r2, [pc, #100]	; (8000730 <HAL_I2C_Init+0xa4>)
 80006cc:	4011      	ands	r1, r2
 80006ce:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80006d0:	2801      	cmp	r0, #1
 80006d2:	d121      	bne.n	8000718 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	0209      	lsls	r1, r1, #8
 80006d8:	4331      	orrs	r1, r6
 80006da:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80006dc:	6858      	ldr	r0, [r3, #4]
 80006de:	4915      	ldr	r1, [pc, #84]	; (8000734 <HAL_I2C_Init+0xa8>)
 80006e0:	4301      	orrs	r1, r0
 80006e2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80006e4:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006e6:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80006e8:	400a      	ands	r2, r1
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80006ec:	6961      	ldr	r1, [r4, #20]
 80006ee:	6922      	ldr	r2, [r4, #16]
 80006f0:	430a      	orrs	r2, r1
 80006f2:	69a1      	ldr	r1, [r4, #24]
 80006f4:	0209      	lsls	r1, r1, #8
 80006f6:	430a      	orrs	r2, r1
 80006f8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80006fa:	6a21      	ldr	r1, [r4, #32]
 80006fc:	69e2      	ldr	r2, [r4, #28]
 80006fe:	430a      	orrs	r2, r1
 8000700:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000702:	2201      	movs	r2, #1
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	430a      	orrs	r2, r1
 8000708:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800070a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800070c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800070e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000710:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000712:	3442      	adds	r4, #66	; 0x42
 8000714:	7020      	strb	r0, [r4, #0]
}
 8000716:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000718:	2184      	movs	r1, #132	; 0x84
 800071a:	0209      	lsls	r1, r1, #8
 800071c:	4331      	orrs	r1, r6
 800071e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000720:	2802      	cmp	r0, #2
 8000722:	d1db      	bne.n	80006dc <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	0109      	lsls	r1, r1, #4
 8000728:	6059      	str	r1, [r3, #4]
 800072a:	e7d7      	b.n	80006dc <HAL_I2C_Init+0x50>
 800072c:	f0ffffff 	.word	0xf0ffffff
 8000730:	ffff7fff 	.word	0xffff7fff
 8000734:	02008000 	.word	0x02008000

08000738 <HAL_I2C_Master_Transmit>:
{
 8000738:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800073a:	0005      	movs	r5, r0
{
 800073c:	b087      	sub	sp, #28
 800073e:	9103      	str	r1, [sp, #12]
 8000740:	9204      	str	r2, [sp, #16]
 8000742:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000744:	3541      	adds	r5, #65	; 0x41
 8000746:	782b      	ldrb	r3, [r5, #0]
{
 8000748:	0004      	movs	r4, r0
    return HAL_BUSY;
 800074a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800074c:	2b20      	cmp	r3, #32
 800074e:	d157      	bne.n	8000800 <HAL_I2C_Master_Transmit+0xc8>
    __HAL_LOCK(hi2c);
 8000750:	0023      	movs	r3, r4
 8000752:	3340      	adds	r3, #64	; 0x40
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	2a01      	cmp	r2, #1
 8000758:	d052      	beq.n	8000800 <HAL_I2C_Master_Transmit+0xc8>
 800075a:	2601      	movs	r6, #1
 800075c:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800075e:	f7ff fd89 	bl	8000274 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000762:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000764:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000766:	9000      	str	r0, [sp, #0]
 8000768:	2319      	movs	r3, #25
 800076a:	0032      	movs	r2, r6
 800076c:	0209      	lsls	r1, r1, #8
 800076e:	0020      	movs	r0, r4
 8000770:	f7ff fece 	bl	8000510 <I2C_WaitOnFlagUntilTimeout>
 8000774:	2800      	cmp	r0, #0
 8000776:	d142      	bne.n	80007fe <HAL_I2C_Master_Transmit+0xc6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000778:	2321      	movs	r3, #33	; 0x21
 800077a:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800077c:	3b11      	subs	r3, #17
 800077e:	19ad      	adds	r5, r5, r6
 8000780:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000782:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000784:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000786:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000788:	466b      	mov	r3, sp
 800078a:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 800078c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800078e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000790:	2380      	movs	r3, #128	; 0x80
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000792:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000794:	019b      	lsls	r3, r3, #6
 8000796:	2aff      	cmp	r2, #255	; 0xff
 8000798:	d921      	bls.n	80007de <HAL_I2C_Master_Transmit+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800079a:	22ff      	movs	r2, #255	; 0xff
 800079c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	045b      	lsls	r3, r3, #17
 80007a4:	9903      	ldr	r1, [sp, #12]
 80007a6:	0020      	movs	r0, r4
 80007a8:	f7ff fea0 	bl	80004ec <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80007ac:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 80007ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007b0:	003a      	movs	r2, r7
 80007b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80007b4:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d119      	bne.n	80007ee <HAL_I2C_Master_Transmit+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007ba:	f7ff ff3c 	bl	8000636 <I2C_WaitOnSTOPFlagUntilTimeout>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d119      	bne.n	80007f6 <HAL_I2C_Master_Transmit+0xbe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007c2:	2120      	movs	r1, #32
 80007c4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80007c6:	4e27      	ldr	r6, [pc, #156]	; (8000864 <HAL_I2C_Master_Transmit+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007c8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80007ca:	685a      	ldr	r2, [r3, #4]
 80007cc:	4032      	ands	r2, r6
 80007ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80007d0:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80007d2:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80007d4:	3341      	adds	r3, #65	; 0x41
 80007d6:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80007d8:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80007da:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80007dc:	e010      	b.n	8000800 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 80007de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80007e0:	b292      	uxth	r2, r2
 80007e2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	049b      	lsls	r3, r3, #18
 80007ec:	e7da      	b.n	80007a4 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007ee:	f7ff fef5 	bl	80005dc <I2C_WaitOnTXISFlagUntilTimeout>
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d006      	beq.n	8000804 <HAL_I2C_Master_Transmit+0xcc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80007f8:	2001      	movs	r0, #1
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	d000      	beq.n	8000800 <HAL_I2C_Master_Transmit+0xc8>
          return HAL_TIMEOUT;
 80007fe:	2003      	movs	r0, #3
}
 8000800:	b007      	add	sp, #28
 8000802:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000806:	6822      	ldr	r2, [r4, #0]
 8000808:	1c59      	adds	r1, r3, #1
 800080a:	6261      	str	r1, [r4, #36]	; 0x24
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000810:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000812:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000814:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000816:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000818:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800081a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800081c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800081e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000820:	2a00      	cmp	r2, #0
 8000822:	d1c4      	bne.n	80007ae <HAL_I2C_Master_Transmit+0x76>
 8000824:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0c1      	beq.n	80007ae <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800082a:	9700      	str	r7, [sp, #0]
 800082c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	0020      	movs	r0, r4
 8000832:	f7ff fe6d 	bl	8000510 <I2C_WaitOnFlagUntilTimeout>
 8000836:	2800      	cmp	r0, #0
 8000838:	d1e1      	bne.n	80007fe <HAL_I2C_Master_Transmit+0xc6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800083a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800083c:	2bff      	cmp	r3, #255	; 0xff
 800083e:	d909      	bls.n	8000854 <HAL_I2C_Master_Transmit+0x11c>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000844:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000846:	045b      	lsls	r3, r3, #17
 8000848:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800084a:	9903      	ldr	r1, [sp, #12]
 800084c:	0020      	movs	r0, r4
 800084e:	f7ff fe4d 	bl	80004ec <I2C_TransferConfig>
 8000852:	e7ac      	b.n	80007ae <HAL_I2C_Master_Transmit+0x76>
 8000854:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000856:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000858:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800085a:	b292      	uxth	r2, r2
 800085c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	9000      	str	r0, [sp, #0]
 8000862:	e7f2      	b.n	800084a <HAL_I2C_Master_Transmit+0x112>
 8000864:	fe00e800 	.word	0xfe00e800

08000868 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000868:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800086a:	0004      	movs	r4, r0
 800086c:	3441      	adds	r4, #65	; 0x41
 800086e:	7822      	ldrb	r2, [r4, #0]
{
 8000870:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000872:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000874:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000876:	2a20      	cmp	r2, #32
 8000878:	d118      	bne.n	80008ac <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800087a:	001d      	movs	r5, r3
 800087c:	3540      	adds	r5, #64	; 0x40
 800087e:	782e      	ldrb	r6, [r5, #0]
 8000880:	2e01      	cmp	r6, #1
 8000882:	d013      	beq.n	80008ac <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000884:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000886:	3022      	adds	r0, #34	; 0x22
 8000888:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800088a:	681e      	ldr	r6, [r3, #0]
 800088c:	3823      	subs	r0, #35	; 0x23
 800088e:	4386      	bics	r6, r0
 8000890:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000892:	681e      	ldr	r6, [r3, #0]
 8000894:	4f06      	ldr	r7, [pc, #24]	; (80008b0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000896:	403e      	ands	r6, r7
 8000898:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800089a:	681e      	ldr	r6, [r3, #0]
 800089c:	4331      	orrs	r1, r6
 800089e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80008a0:	6819      	ldr	r1, [r3, #0]
 80008a2:	4308      	orrs	r0, r1
 80008a4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80008a6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80008a8:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80008aa:	7028      	strb	r0, [r5, #0]
  }
}
 80008ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	ffffefff 	.word	0xffffefff

080008b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80008b4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80008b6:	0005      	movs	r5, r0
 80008b8:	3541      	adds	r5, #65	; 0x41
 80008ba:	782a      	ldrb	r2, [r5, #0]
{
 80008bc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008be:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80008c0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008c2:	2a20      	cmp	r2, #32
 80008c4:	d117      	bne.n	80008f6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80008c6:	001c      	movs	r4, r3
 80008c8:	3440      	adds	r4, #64	; 0x40
 80008ca:	7826      	ldrb	r6, [r4, #0]
 80008cc:	2e01      	cmp	r6, #1
 80008ce:	d012      	beq.n	80008f6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80008d0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80008d2:	3022      	adds	r0, #34	; 0x22
 80008d4:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80008d6:	681e      	ldr	r6, [r3, #0]
 80008d8:	3823      	subs	r0, #35	; 0x23
 80008da:	4386      	bics	r6, r0
 80008dc:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80008de:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80008e0:	4f05      	ldr	r7, [pc, #20]	; (80008f8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80008e2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80008e4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80008e6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80008e8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80008ea:	6819      	ldr	r1, [r3, #0]
 80008ec:	4308      	orrs	r0, r1
 80008ee:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80008f0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80008f2:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80008f4:	7020      	strb	r0, [r4, #0]
  }
}
 80008f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f8:	fffff0ff 	.word	0xfffff0ff

080008fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008fe:	6803      	ldr	r3, [r0, #0]
{
 8000900:	b085      	sub	sp, #20
 8000902:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000904:	07db      	lsls	r3, r3, #31
 8000906:	d42f      	bmi.n	8000968 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000908:	682b      	ldr	r3, [r5, #0]
 800090a:	079b      	lsls	r3, r3, #30
 800090c:	d500      	bpl.n	8000910 <HAL_RCC_OscConfig+0x14>
 800090e:	e081      	b.n	8000a14 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000910:	682b      	ldr	r3, [r5, #0]
 8000912:	071b      	lsls	r3, r3, #28
 8000914:	d500      	bpl.n	8000918 <HAL_RCC_OscConfig+0x1c>
 8000916:	e0bc      	b.n	8000a92 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000918:	682b      	ldr	r3, [r5, #0]
 800091a:	075b      	lsls	r3, r3, #29
 800091c:	d500      	bpl.n	8000920 <HAL_RCC_OscConfig+0x24>
 800091e:	e0df      	b.n	8000ae0 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	06db      	lsls	r3, r3, #27
 8000924:	d51a      	bpl.n	800095c <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000926:	696a      	ldr	r2, [r5, #20]
 8000928:	4cb5      	ldr	r4, [pc, #724]	; (8000c00 <HAL_RCC_OscConfig+0x304>)
 800092a:	2304      	movs	r3, #4
 800092c:	2a01      	cmp	r2, #1
 800092e:	d000      	beq.n	8000932 <HAL_RCC_OscConfig+0x36>
 8000930:	e14b      	b.n	8000bca <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000932:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000934:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000936:	430b      	orrs	r3, r1
 8000938:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800093a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800093c:	431a      	orrs	r2, r3
 800093e:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000940:	f7ff fc98 	bl	8000274 <HAL_GetTick>
 8000944:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000948:	4233      	tst	r3, r6
 800094a:	d100      	bne.n	800094e <HAL_RCC_OscConfig+0x52>
 800094c:	e136      	b.n	8000bbc <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800094e:	21f8      	movs	r1, #248	; 0xf8
 8000950:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000952:	69ab      	ldr	r3, [r5, #24]
 8000954:	438a      	bics	r2, r1
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4313      	orrs	r3, r2
 800095a:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800095c:	6a29      	ldr	r1, [r5, #32]
 800095e:	2900      	cmp	r1, #0
 8000960:	d000      	beq.n	8000964 <HAL_RCC_OscConfig+0x68>
 8000962:	e159      	b.n	8000c18 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000964:	2000      	movs	r0, #0
 8000966:	e013      	b.n	8000990 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000968:	210c      	movs	r1, #12
 800096a:	4ca5      	ldr	r4, [pc, #660]	; (8000c00 <HAL_RCC_OscConfig+0x304>)
 800096c:	6862      	ldr	r2, [r4, #4]
 800096e:	400a      	ands	r2, r1
 8000970:	2a04      	cmp	r2, #4
 8000972:	d006      	beq.n	8000982 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000974:	6863      	ldr	r3, [r4, #4]
 8000976:	400b      	ands	r3, r1
 8000978:	2b08      	cmp	r3, #8
 800097a:	d10b      	bne.n	8000994 <HAL_RCC_OscConfig+0x98>
 800097c:	6863      	ldr	r3, [r4, #4]
 800097e:	03db      	lsls	r3, r3, #15
 8000980:	d508      	bpl.n	8000994 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	039b      	lsls	r3, r3, #14
 8000986:	d5bf      	bpl.n	8000908 <HAL_RCC_OscConfig+0xc>
 8000988:	686b      	ldr	r3, [r5, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1bc      	bne.n	8000908 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800098e:	2001      	movs	r0, #1
}
 8000990:	b005      	add	sp, #20
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000994:	686b      	ldr	r3, [r5, #4]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d113      	bne.n	80009c2 <HAL_RCC_OscConfig+0xc6>
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	6822      	ldr	r2, [r4, #0]
 800099e:	025b      	lsls	r3, r3, #9
 80009a0:	4313      	orrs	r3, r2
 80009a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009a4:	f7ff fc66 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80009aa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ac:	02b6      	lsls	r6, r6, #10
 80009ae:	6823      	ldr	r3, [r4, #0]
 80009b0:	4233      	tst	r3, r6
 80009b2:	d1a9      	bne.n	8000908 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b4:	f7ff fc5e 	bl	8000274 <HAL_GetTick>
 80009b8:	1bc0      	subs	r0, r0, r7
 80009ba:	2864      	cmp	r0, #100	; 0x64
 80009bc:	d9f7      	bls.n	80009ae <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80009be:	2003      	movs	r0, #3
 80009c0:	e7e6      	b.n	8000990 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d116      	bne.n	80009f4 <HAL_RCC_OscConfig+0xf8>
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	4a8e      	ldr	r2, [pc, #568]	; (8000c04 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009ca:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009cc:	4013      	ands	r3, r2
 80009ce:	6023      	str	r3, [r4, #0]
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	4a8d      	ldr	r2, [pc, #564]	; (8000c08 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d4:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009d6:	4013      	ands	r3, r2
 80009d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009da:	f7ff fc4b 	bl	8000274 <HAL_GetTick>
 80009de:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	4233      	tst	r3, r6
 80009e4:	d100      	bne.n	80009e8 <HAL_RCC_OscConfig+0xec>
 80009e6:	e78f      	b.n	8000908 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e8:	f7ff fc44 	bl	8000274 <HAL_GetTick>
 80009ec:	1bc0      	subs	r0, r0, r7
 80009ee:	2864      	cmp	r0, #100	; 0x64
 80009f0:	d9f6      	bls.n	80009e0 <HAL_RCC_OscConfig+0xe4>
 80009f2:	e7e4      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d105      	bne.n	8000a04 <HAL_RCC_OscConfig+0x108>
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	6822      	ldr	r2, [r4, #0]
 80009fc:	02db      	lsls	r3, r3, #11
 80009fe:	4313      	orrs	r3, r2
 8000a00:	6023      	str	r3, [r4, #0]
 8000a02:	e7ca      	b.n	800099a <HAL_RCC_OscConfig+0x9e>
 8000a04:	6823      	ldr	r3, [r4, #0]
 8000a06:	4a7f      	ldr	r2, [pc, #508]	; (8000c04 <HAL_RCC_OscConfig+0x308>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	6023      	str	r3, [r4, #0]
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	4a7e      	ldr	r2, [pc, #504]	; (8000c08 <HAL_RCC_OscConfig+0x30c>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	e7c6      	b.n	80009a2 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a14:	220c      	movs	r2, #12
 8000a16:	4c7a      	ldr	r4, [pc, #488]	; (8000c00 <HAL_RCC_OscConfig+0x304>)
 8000a18:	6863      	ldr	r3, [r4, #4]
 8000a1a:	4213      	tst	r3, r2
 8000a1c:	d006      	beq.n	8000a2c <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a1e:	6863      	ldr	r3, [r4, #4]
 8000a20:	4013      	ands	r3, r2
 8000a22:	2b08      	cmp	r3, #8
 8000a24:	d110      	bne.n	8000a48 <HAL_RCC_OscConfig+0x14c>
 8000a26:	6863      	ldr	r3, [r4, #4]
 8000a28:	03db      	lsls	r3, r3, #15
 8000a2a:	d40d      	bmi.n	8000a48 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	079b      	lsls	r3, r3, #30
 8000a30:	d502      	bpl.n	8000a38 <HAL_RCC_OscConfig+0x13c>
 8000a32:	68eb      	ldr	r3, [r5, #12]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d1aa      	bne.n	800098e <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a38:	21f8      	movs	r1, #248	; 0xf8
 8000a3a:	6822      	ldr	r2, [r4, #0]
 8000a3c:	692b      	ldr	r3, [r5, #16]
 8000a3e:	438a      	bics	r2, r1
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	4313      	orrs	r3, r2
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	e763      	b.n	8000910 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a48:	68ea      	ldr	r2, [r5, #12]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d00f      	beq.n	8000a70 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000a50:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a52:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000a54:	4313      	orrs	r3, r2
 8000a56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a58:	f7ff fc0c 	bl	8000274 <HAL_GetTick>
 8000a5c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	4233      	tst	r3, r6
 8000a62:	d1e9      	bne.n	8000a38 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a64:	f7ff fc06 	bl	8000274 <HAL_GetTick>
 8000a68:	1bc0      	subs	r0, r0, r7
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9f7      	bls.n	8000a5e <HAL_RCC_OscConfig+0x162>
 8000a6e:	e7a6      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000a70:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a72:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000a74:	439a      	bics	r2, r3
 8000a76:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000a78:	f7ff fbfc 	bl	8000274 <HAL_GetTick>
 8000a7c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	4233      	tst	r3, r6
 8000a82:	d100      	bne.n	8000a86 <HAL_RCC_OscConfig+0x18a>
 8000a84:	e744      	b.n	8000910 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a86:	f7ff fbf5 	bl	8000274 <HAL_GetTick>
 8000a8a:	1bc0      	subs	r0, r0, r7
 8000a8c:	2802      	cmp	r0, #2
 8000a8e:	d9f6      	bls.n	8000a7e <HAL_RCC_OscConfig+0x182>
 8000a90:	e795      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a92:	69ea      	ldr	r2, [r5, #28]
 8000a94:	2301      	movs	r3, #1
 8000a96:	4c5a      	ldr	r4, [pc, #360]	; (8000c00 <HAL_RCC_OscConfig+0x304>)
 8000a98:	2a00      	cmp	r2, #0
 8000a9a:	d010      	beq.n	8000abe <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000a9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a9e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000aa4:	f7ff fbe6 	bl	8000274 <HAL_GetTick>
 8000aa8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000aac:	4233      	tst	r3, r6
 8000aae:	d000      	beq.n	8000ab2 <HAL_RCC_OscConfig+0x1b6>
 8000ab0:	e732      	b.n	8000918 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ab2:	f7ff fbdf 	bl	8000274 <HAL_GetTick>
 8000ab6:	1bc0      	subs	r0, r0, r7
 8000ab8:	2802      	cmp	r0, #2
 8000aba:	d9f6      	bls.n	8000aaa <HAL_RCC_OscConfig+0x1ae>
 8000abc:	e77f      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000abe:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ac0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000ac2:	439a      	bics	r2, r3
 8000ac4:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000ac6:	f7ff fbd5 	bl	8000274 <HAL_GetTick>
 8000aca:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ace:	4233      	tst	r3, r6
 8000ad0:	d100      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x1d8>
 8000ad2:	e721      	b.n	8000918 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ad4:	f7ff fbce 	bl	8000274 <HAL_GetTick>
 8000ad8:	1bc0      	subs	r0, r0, r7
 8000ada:	2802      	cmp	r0, #2
 8000adc:	d9f6      	bls.n	8000acc <HAL_RCC_OscConfig+0x1d0>
 8000ade:	e76e      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ae0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ae2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ae4:	4c46      	ldr	r4, [pc, #280]	; (8000c00 <HAL_RCC_OscConfig+0x304>)
 8000ae6:	0552      	lsls	r2, r2, #21
 8000ae8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000aea:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aec:	4213      	tst	r3, r2
 8000aee:	d108      	bne.n	8000b02 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	69e3      	ldr	r3, [r4, #28]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	61e3      	str	r3, [r4, #28]
 8000af6:	69e3      	ldr	r3, [r4, #28]
 8000af8:	4013      	ands	r3, r2
 8000afa:	9303      	str	r3, [sp, #12]
 8000afc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000afe:	2301      	movs	r3, #1
 8000b00:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b02:	2780      	movs	r7, #128	; 0x80
 8000b04:	4e41      	ldr	r6, [pc, #260]	; (8000c0c <HAL_RCC_OscConfig+0x310>)
 8000b06:	007f      	lsls	r7, r7, #1
 8000b08:	6833      	ldr	r3, [r6, #0]
 8000b0a:	423b      	tst	r3, r7
 8000b0c:	d006      	beq.n	8000b1c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0e:	68ab      	ldr	r3, [r5, #8]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d113      	bne.n	8000b3c <HAL_RCC_OscConfig+0x240>
 8000b14:	6a22      	ldr	r2, [r4, #32]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	6223      	str	r3, [r4, #32]
 8000b1a:	e030      	b.n	8000b7e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b1c:	6833      	ldr	r3, [r6, #0]
 8000b1e:	433b      	orrs	r3, r7
 8000b20:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b22:	f7ff fba7 	bl	8000274 <HAL_GetTick>
 8000b26:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b28:	6833      	ldr	r3, [r6, #0]
 8000b2a:	423b      	tst	r3, r7
 8000b2c:	d1ef      	bne.n	8000b0e <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b2e:	f7ff fba1 	bl	8000274 <HAL_GetTick>
 8000b32:	9b01      	ldr	r3, [sp, #4]
 8000b34:	1ac0      	subs	r0, r0, r3
 8000b36:	2864      	cmp	r0, #100	; 0x64
 8000b38:	d9f6      	bls.n	8000b28 <HAL_RCC_OscConfig+0x22c>
 8000b3a:	e740      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
 8000b3c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d114      	bne.n	8000b6c <HAL_RCC_OscConfig+0x270>
 8000b42:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b44:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b46:	4393      	bics	r3, r2
 8000b48:	6223      	str	r3, [r4, #32]
 8000b4a:	6a23      	ldr	r3, [r4, #32]
 8000b4c:	3203      	adds	r2, #3
 8000b4e:	4393      	bics	r3, r2
 8000b50:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b52:	f7ff fb8f 	bl	8000274 <HAL_GetTick>
 8000b56:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b58:	6a23      	ldr	r3, [r4, #32]
 8000b5a:	423b      	tst	r3, r7
 8000b5c:	d025      	beq.n	8000baa <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5e:	f7ff fb89 	bl	8000274 <HAL_GetTick>
 8000b62:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <HAL_RCC_OscConfig+0x314>)
 8000b64:	1b80      	subs	r0, r0, r6
 8000b66:	4298      	cmp	r0, r3
 8000b68:	d9f6      	bls.n	8000b58 <HAL_RCC_OscConfig+0x25c>
 8000b6a:	e728      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b6c:	2b05      	cmp	r3, #5
 8000b6e:	d10b      	bne.n	8000b88 <HAL_RCC_OscConfig+0x28c>
 8000b70:	6a21      	ldr	r1, [r4, #32]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	430b      	orrs	r3, r1
 8000b76:	6223      	str	r3, [r4, #32]
 8000b78:	6a23      	ldr	r3, [r4, #32]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000b7e:	f7ff fb79 	bl	8000274 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b82:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000b84:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b86:	e00d      	b.n	8000ba4 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b88:	6a23      	ldr	r3, [r4, #32]
 8000b8a:	4393      	bics	r3, r2
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	6223      	str	r3, [r4, #32]
 8000b90:	6a23      	ldr	r3, [r4, #32]
 8000b92:	4393      	bics	r3, r2
 8000b94:	e7c0      	b.n	8000b18 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b96:	f7ff fb6d 	bl	8000274 <HAL_GetTick>
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_RCC_OscConfig+0x314>)
 8000b9c:	1b80      	subs	r0, r0, r6
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d900      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x2a8>
 8000ba2:	e70c      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba4:	6a23      	ldr	r3, [r4, #32]
 8000ba6:	423b      	tst	r3, r7
 8000ba8:	d0f5      	beq.n	8000b96 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000baa:	9b00      	ldr	r3, [sp, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d000      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x2b6>
 8000bb0:	e6b6      	b.n	8000920 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bb2:	69e3      	ldr	r3, [r4, #28]
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_RCC_OscConfig+0x318>)
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61e3      	str	r3, [r4, #28]
 8000bba:	e6b1      	b.n	8000920 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bbc:	f7ff fb5a 	bl	8000274 <HAL_GetTick>
 8000bc0:	1bc0      	subs	r0, r0, r7
 8000bc2:	2802      	cmp	r0, #2
 8000bc4:	d800      	bhi.n	8000bc8 <HAL_RCC_OscConfig+0x2cc>
 8000bc6:	e6be      	b.n	8000946 <HAL_RCC_OscConfig+0x4a>
 8000bc8:	e6f9      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000bca:	3205      	adds	r2, #5
 8000bcc:	d103      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000bce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000bd0:	439a      	bics	r2, r3
 8000bd2:	6362      	str	r2, [r4, #52]	; 0x34
 8000bd4:	e6bb      	b.n	800094e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bd6:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bd8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bda:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000bdc:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bde:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000be2:	4393      	bics	r3, r2
 8000be4:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000be6:	f7ff fb45 	bl	8000274 <HAL_GetTick>
 8000bea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bee:	4233      	tst	r3, r6
 8000bf0:	d100      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x2f8>
 8000bf2:	e6b3      	b.n	800095c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bf4:	f7ff fb3e 	bl	8000274 <HAL_GetTick>
 8000bf8:	1bc0      	subs	r0, r0, r7
 8000bfa:	2802      	cmp	r0, #2
 8000bfc:	d9f6      	bls.n	8000bec <HAL_RCC_OscConfig+0x2f0>
 8000bfe:	e6de      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
 8000c00:	40021000 	.word	0x40021000
 8000c04:	fffeffff 	.word	0xfffeffff
 8000c08:	fffbffff 	.word	0xfffbffff
 8000c0c:	40007000 	.word	0x40007000
 8000c10:	00001388 	.word	0x00001388
 8000c14:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c18:	220c      	movs	r2, #12
 8000c1a:	4c26      	ldr	r4, [pc, #152]	; (8000cb4 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000c1c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c1e:	6863      	ldr	r3, [r4, #4]
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d100      	bne.n	8000c28 <HAL_RCC_OscConfig+0x32c>
 8000c26:	e6b3      	b.n	8000990 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <HAL_RCC_OscConfig+0x3bc>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c30:	2902      	cmp	r1, #2
 8000c32:	d12f      	bne.n	8000c94 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000c34:	f7ff fb1e 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c38:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c3a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c3c:	04b6      	lsls	r6, r6, #18
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	4233      	tst	r3, r6
 8000c42:	d121      	bne.n	8000c88 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c44:	220f      	movs	r2, #15
 8000c46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c48:	4393      	bics	r3, r2
 8000c4a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c50:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000c52:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c54:	6862      	ldr	r2, [r4, #4]
 8000c56:	430b      	orrs	r3, r1
 8000c58:	4918      	ldr	r1, [pc, #96]	; (8000cbc <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c5a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c5c:	400a      	ands	r2, r1
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	6822      	ldr	r2, [r4, #0]
 8000c66:	045b      	lsls	r3, r3, #17
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fb02 	bl	8000274 <HAL_GetTick>
 8000c70:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c72:	04ad      	lsls	r5, r5, #18
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	422b      	tst	r3, r5
 8000c78:	d000      	beq.n	8000c7c <HAL_RCC_OscConfig+0x380>
 8000c7a:	e673      	b.n	8000964 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c7c:	f7ff fafa 	bl	8000274 <HAL_GetTick>
 8000c80:	1b80      	subs	r0, r0, r6
 8000c82:	2802      	cmp	r0, #2
 8000c84:	d9f6      	bls.n	8000c74 <HAL_RCC_OscConfig+0x378>
 8000c86:	e69a      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c88:	f7ff faf4 	bl	8000274 <HAL_GetTick>
 8000c8c:	1bc0      	subs	r0, r0, r7
 8000c8e:	2802      	cmp	r0, #2
 8000c90:	d9d5      	bls.n	8000c3e <HAL_RCC_OscConfig+0x342>
 8000c92:	e694      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000c94:	f7ff faee 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c98:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c9a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c9c:	04ad      	lsls	r5, r5, #18
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	422b      	tst	r3, r5
 8000ca2:	d100      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x3aa>
 8000ca4:	e65e      	b.n	8000964 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca6:	f7ff fae5 	bl	8000274 <HAL_GetTick>
 8000caa:	1b80      	subs	r0, r0, r6
 8000cac:	2802      	cmp	r0, #2
 8000cae:	d9f6      	bls.n	8000c9e <HAL_RCC_OscConfig+0x3a2>
 8000cb0:	e685      	b.n	80009be <HAL_RCC_OscConfig+0xc2>
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	feffffff 	.word	0xfeffffff
 8000cbc:	ffc2ffff 	.word	0xffc2ffff

08000cc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cc0:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000cc2:	4c14      	ldr	r4, [pc, #80]	; (8000d14 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000cc4:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000cc6:	2210      	movs	r2, #16
 8000cc8:	0021      	movs	r1, r4
 8000cca:	4668      	mov	r0, sp
 8000ccc:	f000 fec8 	bl	8001a60 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000cd0:	0021      	movs	r1, r4
 8000cd2:	ad04      	add	r5, sp, #16
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	3110      	adds	r1, #16
 8000cd8:	0028      	movs	r0, r5
 8000cda:	f000 fec1 	bl	8001a60 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000cde:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000ce0:	4e0d      	ldr	r6, [pc, #52]	; (8000d18 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ce2:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	2a08      	cmp	r2, #8
 8000ce8:	d111      	bne.n	8000d0e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000cea:	200f      	movs	r0, #15
 8000cec:	466a      	mov	r2, sp
 8000cee:	0c99      	lsrs	r1, r3, #18
 8000cf0:	4001      	ands	r1, r0
 8000cf2:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000cf4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000cf6:	4002      	ands	r2, r0
 8000cf8:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000cfa:	03db      	lsls	r3, r3, #15
 8000cfc:	d505      	bpl.n	8000d0a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <HAL_RCC_GetSysClockFreq+0x5c>)
 8000d00:	f7ff fa02 	bl	8000108 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000d04:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d06:	b008      	add	sp, #32
 8000d08:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <HAL_RCC_GetSysClockFreq+0x60>)
 8000d0c:	e7fa      	b.n	8000d04 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000d10:	e7f9      	b.n	8000d06 <HAL_RCC_GetSysClockFreq+0x46>
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	080022dc 	.word	0x080022dc
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	007a1200 	.word	0x007a1200
 8000d20:	003d0900 	.word	0x003d0900

08000d24 <HAL_RCC_ClockConfig>:
{
 8000d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d26:	2201      	movs	r2, #1
 8000d28:	4c43      	ldr	r4, [pc, #268]	; (8000e38 <HAL_RCC_ClockConfig+0x114>)
{
 8000d2a:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d2c:	6823      	ldr	r3, [r4, #0]
{
 8000d2e:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d30:	4013      	ands	r3, r2
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d31c      	bcc.n	8000d70 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d36:	6832      	ldr	r2, [r6, #0]
 8000d38:	0793      	lsls	r3, r2, #30
 8000d3a:	d423      	bmi.n	8000d84 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d3c:	07d3      	lsls	r3, r2, #31
 8000d3e:	d429      	bmi.n	8000d94 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d40:	2301      	movs	r3, #1
 8000d42:	6822      	ldr	r2, [r4, #0]
 8000d44:	401a      	ands	r2, r3
 8000d46:	4297      	cmp	r7, r2
 8000d48:	d367      	bcc.n	8000e1a <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d4a:	6833      	ldr	r3, [r6, #0]
 8000d4c:	4c3b      	ldr	r4, [pc, #236]	; (8000e3c <HAL_RCC_ClockConfig+0x118>)
 8000d4e:	075b      	lsls	r3, r3, #29
 8000d50:	d46a      	bmi.n	8000e28 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d52:	f7ff ffb5 	bl	8000cc0 <HAL_RCC_GetSysClockFreq>
 8000d56:	6863      	ldr	r3, [r4, #4]
 8000d58:	4a39      	ldr	r2, [pc, #228]	; (8000e40 <HAL_RCC_ClockConfig+0x11c>)
 8000d5a:	061b      	lsls	r3, r3, #24
 8000d5c:	0f1b      	lsrs	r3, r3, #28
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	40d8      	lsrs	r0, r3
 8000d62:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <HAL_RCC_ClockConfig+0x120>)
 8000d64:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fa5a 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	4393      	bics	r3, r2
 8000d74:	430b      	orrs	r3, r1
 8000d76:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d0da      	beq.n	8000d36 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000d80:	2001      	movs	r0, #1
}
 8000d82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d84:	20f0      	movs	r0, #240	; 0xf0
 8000d86:	492d      	ldr	r1, [pc, #180]	; (8000e3c <HAL_RCC_ClockConfig+0x118>)
 8000d88:	684b      	ldr	r3, [r1, #4]
 8000d8a:	4383      	bics	r3, r0
 8000d8c:	68b0      	ldr	r0, [r6, #8]
 8000d8e:	4303      	orrs	r3, r0
 8000d90:	604b      	str	r3, [r1, #4]
 8000d92:	e7d3      	b.n	8000d3c <HAL_RCC_ClockConfig+0x18>
 8000d94:	4d29      	ldr	r5, [pc, #164]	; (8000e3c <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d96:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d98:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d9a:	2a01      	cmp	r2, #1
 8000d9c:	d11a      	bne.n	8000dd4 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9e:	039b      	lsls	r3, r3, #14
 8000da0:	d5ee      	bpl.n	8000d80 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000da2:	2103      	movs	r1, #3
 8000da4:	686b      	ldr	r3, [r5, #4]
 8000da6:	438b      	bics	r3, r1
 8000da8:	4313      	orrs	r3, r2
 8000daa:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000dac:	f7ff fa62 	bl	8000274 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000db2:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d115      	bne.n	8000de4 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db8:	220c      	movs	r2, #12
 8000dba:	686b      	ldr	r3, [r5, #4]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d0be      	beq.n	8000d40 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc2:	f7ff fa57 	bl	8000274 <HAL_GetTick>
 8000dc6:	9b01      	ldr	r3, [sp, #4]
 8000dc8:	1ac0      	subs	r0, r0, r3
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_RCC_ClockConfig+0x124>)
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	d9f3      	bls.n	8000db8 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	e7d6      	b.n	8000d82 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dd4:	2a02      	cmp	r2, #2
 8000dd6:	d102      	bne.n	8000dde <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dd8:	019b      	lsls	r3, r3, #6
 8000dda:	d4e2      	bmi.n	8000da2 <HAL_RCC_ClockConfig+0x7e>
 8000ddc:	e7d0      	b.n	8000d80 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dde:	079b      	lsls	r3, r3, #30
 8000de0:	d4df      	bmi.n	8000da2 <HAL_RCC_ClockConfig+0x7e>
 8000de2:	e7cd      	b.n	8000d80 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d012      	beq.n	8000e0e <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000de8:	220c      	movs	r2, #12
 8000dea:	686b      	ldr	r3, [r5, #4]
 8000dec:	4213      	tst	r3, r2
 8000dee:	d0a7      	beq.n	8000d40 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000df0:	f7ff fa40 	bl	8000274 <HAL_GetTick>
 8000df4:	9b01      	ldr	r3, [sp, #4]
 8000df6:	1ac0      	subs	r0, r0, r3
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_RCC_ClockConfig+0x124>)
 8000dfa:	4298      	cmp	r0, r3
 8000dfc:	d9f4      	bls.n	8000de8 <HAL_RCC_ClockConfig+0xc4>
 8000dfe:	e7e7      	b.n	8000dd0 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e00:	f7ff fa38 	bl	8000274 <HAL_GetTick>
 8000e04:	9b01      	ldr	r3, [sp, #4]
 8000e06:	1ac0      	subs	r0, r0, r3
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_RCC_ClockConfig+0x124>)
 8000e0a:	4298      	cmp	r0, r3
 8000e0c:	d8e0      	bhi.n	8000dd0 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	686b      	ldr	r3, [r5, #4]
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d1f3      	bne.n	8000e00 <HAL_RCC_ClockConfig+0xdc>
 8000e18:	e792      	b.n	8000d40 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e1a:	6822      	ldr	r2, [r4, #0]
 8000e1c:	439a      	bics	r2, r3
 8000e1e:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e20:	6822      	ldr	r2, [r4, #0]
 8000e22:	421a      	tst	r2, r3
 8000e24:	d1ac      	bne.n	8000d80 <HAL_RCC_ClockConfig+0x5c>
 8000e26:	e790      	b.n	8000d4a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000e28:	6863      	ldr	r3, [r4, #4]
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_RCC_ClockConfig+0x128>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	68f2      	ldr	r2, [r6, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	6063      	str	r3, [r4, #4]
 8000e34:	e78d      	b.n	8000d52 <HAL_RCC_ClockConfig+0x2e>
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40022000 	.word	0x40022000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	08002356 	.word	0x08002356
 8000e44:	20000000 	.word	0x20000000
 8000e48:	00001388 	.word	0x00001388
 8000e4c:	fffff8ff 	.word	0xfffff8ff

08000e50 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000e50:	4b01      	ldr	r3, [pc, #4]	; (8000e58 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e52:	6818      	ldr	r0, [r3, #0]
}
 8000e54:	4770      	bx	lr
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000000 	.word	0x20000000

08000e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e5e:	6803      	ldr	r3, [r0, #0]
{
 8000e60:	b085      	sub	sp, #20
 8000e62:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e64:	03db      	lsls	r3, r3, #15
 8000e66:	d528      	bpl.n	8000eba <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e68:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e6a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e6c:	4c37      	ldr	r4, [pc, #220]	; (8000f4c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000e6e:	0552      	lsls	r2, r2, #21
 8000e70:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000e72:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e74:	4213      	tst	r3, r2
 8000e76:	d108      	bne.n	8000e8a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e78:	69e3      	ldr	r3, [r4, #28]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61e3      	str	r3, [r4, #28]
 8000e7e:	69e3      	ldr	r3, [r4, #28]
 8000e80:	4013      	ands	r3, r2
 8000e82:	9303      	str	r3, [sp, #12]
 8000e84:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000e86:	2301      	movs	r3, #1
 8000e88:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e8a:	2780      	movs	r7, #128	; 0x80
 8000e8c:	4e30      	ldr	r6, [pc, #192]	; (8000f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000e8e:	007f      	lsls	r7, r7, #1
 8000e90:	6833      	ldr	r3, [r6, #0]
 8000e92:	423b      	tst	r3, r7
 8000e94:	d026      	beq.n	8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e96:	22c0      	movs	r2, #192	; 0xc0
 8000e98:	6a23      	ldr	r3, [r4, #32]
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	4e2d      	ldr	r6, [pc, #180]	; (8000f54 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ea0:	d132      	bne.n	8000f08 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ea2:	6a23      	ldr	r3, [r4, #32]
 8000ea4:	401e      	ands	r6, r3
 8000ea6:	686b      	ldr	r3, [r5, #4]
 8000ea8:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000eaa:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000eac:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d103      	bne.n	8000eba <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb2:	69e3      	ldr	r3, [r4, #28]
 8000eb4:	4a28      	ldr	r2, [pc, #160]	; (8000f58 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000eba:	682a      	ldr	r2, [r5, #0]
 8000ebc:	07d3      	lsls	r3, r2, #31
 8000ebe:	d506      	bpl.n	8000ece <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	4922      	ldr	r1, [pc, #136]	; (8000f4c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000ec4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000ec6:	4383      	bics	r3, r0
 8000ec8:	68a8      	ldr	r0, [r5, #8]
 8000eca:	4303      	orrs	r3, r0
 8000ecc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000ece:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000ed0:	0693      	lsls	r3, r2, #26
 8000ed2:	d517      	bpl.n	8000f04 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000ed4:	2110      	movs	r1, #16
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000ed8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eda:	438b      	bics	r3, r1
 8000edc:	68e9      	ldr	r1, [r5, #12]
 8000ede:	430b      	orrs	r3, r1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	e00f      	b.n	8000f04 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ee4:	6833      	ldr	r3, [r6, #0]
 8000ee6:	433b      	orrs	r3, r7
 8000ee8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000eea:	f7ff f9c3 	bl	8000274 <HAL_GetTick>
 8000eee:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef0:	6833      	ldr	r3, [r6, #0]
 8000ef2:	423b      	tst	r3, r7
 8000ef4:	d1cf      	bne.n	8000e96 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef6:	f7ff f9bd 	bl	8000274 <HAL_GetTick>
 8000efa:	9b01      	ldr	r3, [sp, #4]
 8000efc:	1ac0      	subs	r0, r0, r3
 8000efe:	2864      	cmp	r0, #100	; 0x64
 8000f00:	d9f6      	bls.n	8000ef0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000f02:	2003      	movs	r0, #3
}
 8000f04:	b005      	add	sp, #20
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f08:	6869      	ldr	r1, [r5, #4]
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d0c8      	beq.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f10:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f12:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f14:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f16:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f18:	025b      	lsls	r3, r3, #9
 8000f1a:	4303      	orrs	r3, r0
 8000f1c:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f1e:	6a23      	ldr	r3, [r4, #32]
 8000f20:	480e      	ldr	r0, [pc, #56]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f22:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f24:	4003      	ands	r3, r0
 8000f26:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000f28:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f2a:	07d3      	lsls	r3, r2, #31
 8000f2c:	d5b9      	bpl.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000f2e:	f7ff f9a1 	bl	8000274 <HAL_GetTick>
 8000f32:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	2202      	movs	r2, #2
 8000f36:	6a23      	ldr	r3, [r4, #32]
 8000f38:	4213      	tst	r3, r2
 8000f3a:	d1b2      	bne.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3c:	f7ff f99a 	bl	8000274 <HAL_GetTick>
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000f42:	1bc0      	subs	r0, r0, r7
 8000f44:	4298      	cmp	r0, r3
 8000f46:	d9f5      	bls.n	8000f34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000f48:	e7db      	b.n	8000f02 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40007000 	.word	0x40007000
 8000f54:	fffffcff 	.word	0xfffffcff
 8000f58:	efffffff 	.word	0xefffffff
 8000f5c:	fffeffff 	.word	0xfffeffff
 8000f60:	00001388 	.word	0x00001388

08000f64 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8000f64:	6803      	ldr	r3, [r0, #0]
{  
 8000f66:	b510      	push	{r4, lr}
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8000f68:	689a      	ldr	r2, [r3, #8]
{  
 8000f6a:	0004      	movs	r4, r0
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8000f6c:	04d2      	lsls	r2, r2, #19
 8000f6e:	d50a      	bpl.n	8000f86 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	d507      	bpl.n	8000f86 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8000f76:	f000 fb71 	bl	800165c <HAL_RTC_AlarmAEventCallback>

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8000f7a:	6821      	ldr	r1, [r4, #0]
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_RTC_AlarmIRQHandler+0x30>)
 8000f7e:	68ca      	ldr	r2, [r1, #12]
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60cb      	str	r3, [r1, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_RTC_AlarmIRQHandler+0x34>)
 8000f8a:	0292      	lsls	r2, r2, #10
 8000f8c:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8000f8e:	2301      	movs	r3, #1
 8000f90:	7763      	strb	r3, [r4, #29]
}
 8000f92:	bd10      	pop	{r4, pc}
 8000f94:	fffffe7f 	.word	0xfffffe7f
 8000f98:	40010400 	.word	0x40010400

08000f9c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8000f9c:	21a0      	movs	r1, #160	; 0xa0
 8000f9e:	6802      	ldr	r2, [r0, #0]
{
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8000fa2:	68d3      	ldr	r3, [r2, #12]
{
 8000fa4:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8000fa6:	438b      	bics	r3, r1
 8000fa8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8000faa:	f7ff f963 	bl	8000274 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000fae:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8000fb0:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8000fb2:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000fb4:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	422b      	tst	r3, r5
 8000fbc:	d001      	beq.n	8000fc2 <HAL_RTC_WaitForSynchro+0x26>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8000fbe:	2000      	movs	r0, #0
}
 8000fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000fc2:	f7ff f957 	bl	8000274 <HAL_GetTick>
 8000fc6:	1b80      	subs	r0, r0, r6
 8000fc8:	42b8      	cmp	r0, r7
 8000fca:	d9f4      	bls.n	8000fb6 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8000fcc:	2003      	movs	r0, #3
 8000fce:	e7f7      	b.n	8000fc0 <HAL_RTC_WaitForSynchro+0x24>

08000fd0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8000fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000fd2:	2440      	movs	r4, #64	; 0x40
 8000fd4:	6803      	ldr	r3, [r0, #0]
{
 8000fd6:	0005      	movs	r5, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	4222      	tst	r2, r4
 8000fdc:	d001      	beq.n	8000fe2 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8000fde:	2000      	movs	r0, #0
}
 8000fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4252      	negs	r2, r2
 8000fe6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8000fe8:	f7ff f944 	bl	8000274 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000fec:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8000fee:	0006      	movs	r6, r0
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000ff0:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000ff2:	682b      	ldr	r3, [r5, #0]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	4223      	tst	r3, r4
 8000ff8:	d1f1      	bne.n	8000fde <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000ffa:	f7ff f93b 	bl	8000274 <HAL_GetTick>
 8000ffe:	1b80      	subs	r0, r0, r6
 8001000:	42b8      	cmp	r0, r7
 8001002:	d9f6      	bls.n	8000ff2 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8001004:	2003      	movs	r0, #3
 8001006:	e7eb      	b.n	8000fe0 <RTC_EnterInitMode+0x10>

08001008 <HAL_RTC_Init>:
{
 8001008:	b570      	push	{r4, r5, r6, lr}
 800100a:	0004      	movs	r4, r0
     return HAL_ERROR;
 800100c:	2501      	movs	r5, #1
  if(hrtc == NULL)
 800100e:	2800      	cmp	r0, #0
 8001010:	d018      	beq.n	8001044 <HAL_RTC_Init+0x3c>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001012:	7f43      	ldrb	r3, [r0, #29]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 800101a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800101c:	f000 fc78 	bl	8001910 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001020:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001022:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001024:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001026:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001028:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
 800102c:	3a77      	subs	r2, #119	; 0x77
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001030:	f7ff ffce 	bl	8000fd0 <RTC_EnterInitMode>
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	1e05      	subs	r5, r0, #0
 8001038:	d006      	beq.n	8001048 <HAL_RTC_Init+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800103a:	22ff      	movs	r2, #255	; 0xff
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800103e:	2304      	movs	r3, #4
        return HAL_ERROR;
 8001040:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001042:	7763      	strb	r3, [r4, #29]
}
 8001044:	0028      	movs	r0, r5
 8001046:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	4917      	ldr	r1, [pc, #92]	; (80010a8 <HAL_RTC_Init+0xa0>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800104c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800104e:	400a      	ands	r2, r1
 8001050:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001052:	6862      	ldr	r2, [r4, #4]
 8001054:	6899      	ldr	r1, [r3, #8]
 8001056:	4302      	orrs	r2, r0
 8001058:	6960      	ldr	r0, [r4, #20]
 800105a:	4302      	orrs	r2, r0
 800105c:	430a      	orrs	r2, r1
 800105e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001060:	68e2      	ldr	r2, [r4, #12]
 8001062:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001064:	68a2      	ldr	r2, [r4, #8]
 8001066:	6919      	ldr	r1, [r3, #16]
 8001068:	0412      	lsls	r2, r2, #16
 800106a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 800106c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800106e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	438a      	bics	r2, r1
 8001074:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	069b      	lsls	r3, r3, #26
 800107a:	d406      	bmi.n	800108a <HAL_RTC_Init+0x82>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800107c:	0020      	movs	r0, r4
 800107e:	f7ff ff8d 	bl	8000f9c <HAL_RTC_WaitForSynchro>
 8001082:	2800      	cmp	r0, #0
 8001084:	d001      	beq.n	800108a <HAL_RTC_Init+0x82>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	e7d7      	b.n	800103a <HAL_RTC_Init+0x32>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <HAL_RTC_Init+0xa4>)
 800108e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001090:	400a      	ands	r2, r1
 8001092:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001096:	69a1      	ldr	r1, [r4, #24]
 8001098:	430a      	orrs	r2, r1
 800109a:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800109c:	22ff      	movs	r2, #255	; 0xff
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80010a0:	2301      	movs	r3, #1
 80010a2:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80010a4:	e7ce      	b.n	8001044 <HAL_RTC_Init+0x3c>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	ff8fffbf 	.word	0xff8fffbf
 80010ac:	fffbffff 	.word	0xfffbffff

080010b0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80010b0:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 80010b2:	2809      	cmp	r0, #9
 80010b4:	d803      	bhi.n	80010be <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	4318      	orrs	r0, r3
 80010ba:	b2c0      	uxtb	r0, r0
}
 80010bc:	4770      	bx	lr
    Value -= 10U;
 80010be:	380a      	subs	r0, #10
    bcdhigh++;
 80010c0:	3301      	adds	r3, #1
    Value -= 10U;
 80010c2:	b2c0      	uxtb	r0, r0
 80010c4:	e7f5      	b.n	80010b2 <RTC_ByteToBcd2+0x2>
	...

080010c8 <HAL_RTC_SetTime>:
{
 80010c8:	2302      	movs	r3, #2
 80010ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010cc:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80010ce:	7f01      	ldrb	r1, [r0, #28]
{
 80010d0:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80010d2:	001f      	movs	r7, r3
 80010d4:	2901      	cmp	r1, #1
 80010d6:	d032      	beq.n	800113e <HAL_RTC_SetTime+0x76>
 80010d8:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80010da:	7743      	strb	r3, [r0, #29]
 80010dc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 80010de:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	313f      	adds	r1, #63	; 0x3f
 80010e4:	7828      	ldrb	r0, [r5, #0]
 80010e6:	786e      	ldrb	r6, [r5, #1]
 80010e8:	78af      	ldrb	r7, [r5, #2]
 80010ea:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	d128      	bne.n	8001142 <HAL_RTC_SetTime+0x7a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d100      	bne.n	80010f6 <HAL_RTC_SetTime+0x2e>
      sTime->TimeFormat = 0x00U;
 80010f4:	70eb      	strb	r3, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80010f6:	f7ff ffdb 	bl	80010b0 <RTC_ByteToBcd2>
 80010fa:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80010fc:	0030      	movs	r0, r6
 80010fe:	f7ff ffd7 	bl	80010b0 <RTC_ByteToBcd2>
 8001102:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001104:	0038      	movs	r0, r7
 8001106:	f7ff ffd3 	bl	80010b0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 800110a:	78ef      	ldrb	r7, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800110c:	9b01      	ldr	r3, [sp, #4]
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 800110e:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001110:	4307      	orrs	r7, r0
 8001112:	0418      	lsls	r0, r3, #16
 8001114:	4307      	orrs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001116:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001118:	22ca      	movs	r2, #202	; 0xca
 800111a:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800111c:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
 8001120:	3a77      	subs	r2, #119	; 0x77
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001124:	f7ff ff54 	bl	8000fd0 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001128:	433e      	orrs	r6, r7
 800112a:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800112c:	1e07      	subs	r7, r0, #0
 800112e:	d012      	beq.n	8001156 <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001134:	2304      	movs	r3, #4
 8001136:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001138:	2300      	movs	r3, #0
 800113a:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800113c:	2701      	movs	r7, #1
}
 800113e:	0038      	movs	r0, r7
 8001140:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00U;
 8001146:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001148:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800114a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800114c:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800114e:	4337      	orrs	r7, r6
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8001150:	78ee      	ldrb	r6, [r5, #3]
 8001152:	0436      	lsls	r6, r6, #16
 8001154:	e7e0      	b.n	8001118 <HAL_RTC_SetTime+0x50>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001156:	4814      	ldr	r0, [pc, #80]	; (80011a8 <HAL_RTC_SetTime+0xe0>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001158:	4914      	ldr	r1, [pc, #80]	; (80011ac <HAL_RTC_SetTime+0xe4>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800115a:	4006      	ands	r6, r0
 800115c:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800115e:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001160:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001162:	400a      	ands	r2, r1
 8001164:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001166:	68ea      	ldr	r2, [r5, #12]
 8001168:	6899      	ldr	r1, [r3, #8]
 800116a:	4302      	orrs	r2, r0
 800116c:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800116e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001170:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	438a      	bics	r2, r1
 8001176:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	069b      	lsls	r3, r3, #26
 800117c:	d40b      	bmi.n	8001196 <HAL_RTC_SetTime+0xce>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800117e:	0020      	movs	r0, r4
 8001180:	f7ff ff0c 	bl	8000f9c <HAL_RTC_WaitForSynchro>
 8001184:	2800      	cmp	r0, #0
 8001186:	d006      	beq.n	8001196 <HAL_RTC_SetTime+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001188:	22ff      	movs	r2, #255	; 0xff
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800118e:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8001190:	7727      	strb	r7, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001192:	7763      	strb	r3, [r4, #29]
 8001194:	e7d2      	b.n	800113c <HAL_RTC_SetTime+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800119c:	2301      	movs	r3, #1
 800119e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 80011a0:	2300      	movs	r3, #0
 80011a2:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 80011a4:	e7cb      	b.n	800113e <HAL_RTC_SetTime+0x76>
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	007f7f7f 	.word	0x007f7f7f
 80011ac:	fffbffff 	.word	0xfffbffff

080011b0 <HAL_RTC_SetDate>:
{
 80011b0:	2302      	movs	r3, #2
 80011b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011b4:	000d      	movs	r5, r1
 __HAL_LOCK(hrtc);
 80011b6:	7f01      	ldrb	r1, [r0, #28]
{
 80011b8:	0004      	movs	r4, r0
 __HAL_LOCK(hrtc);
 80011ba:	001e      	movs	r6, r3
 80011bc:	2901      	cmp	r1, #1
 80011be:	d031      	beq.n	8001224 <HAL_RTC_SetDate+0x74>
 80011c0:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80011c2:	7743      	strb	r3, [r0, #29]
 __HAL_LOCK(hrtc);
 80011c4:	7701      	strb	r1, [r0, #28]
 80011c6:	786b      	ldrb	r3, [r5, #1]
 80011c8:	78e8      	ldrb	r0, [r5, #3]
 80011ca:	78af      	ldrb	r7, [r5, #2]
 80011cc:	782e      	ldrb	r6, [r5, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	d148      	bne.n	8001264 <HAL_RTC_SetDate+0xb4>
 80011d2:	3210      	adds	r2, #16
 80011d4:	4213      	tst	r3, r2
 80011d6:	d002      	beq.n	80011de <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80011d8:	4393      	bics	r3, r2
 80011da:	330a      	adds	r3, #10
 80011dc:	706b      	strb	r3, [r5, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80011de:	f7ff ff67 	bl	80010b0 <RTC_ByteToBcd2>
 80011e2:	9001      	str	r0, [sp, #4]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80011e4:	7868      	ldrb	r0, [r5, #1]
 80011e6:	f7ff ff63 	bl	80010b0 <RTC_ByteToBcd2>
 80011ea:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80011ec:	0038      	movs	r0, r7
 80011ee:	f7ff ff5f 	bl	80010b0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80011f2:	9b01      	ldr	r3, [sp, #4]
                 ((uint32_t)sDate->WeekDay << 13U));   
 80011f4:	0376      	lsls	r6, r6, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80011f6:	4330      	orrs	r0, r6
 80011f8:	041e      	lsls	r6, r3, #16
 80011fa:	4306      	orrs	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80011fc:	022d      	lsls	r5, r5, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80011fe:	4335      	orrs	r5, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001200:	22ca      	movs	r2, #202	; 0xca
 8001202:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001204:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
 8001208:	3a77      	subs	r2, #119	; 0x77
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800120c:	f7ff fee0 	bl	8000fd0 <RTC_EnterInitMode>
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	1e06      	subs	r6, r0, #0
 8001214:	d008      	beq.n	8001228 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001216:	22ff      	movs	r2, #255	; 0xff
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800121a:	2304      	movs	r3, #4
 800121c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800121e:	2300      	movs	r3, #0
 8001220:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001222:	2601      	movs	r6, #1
}
 8001224:	0030      	movs	r0, r6
 8001226:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001228:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800122a:	4f12      	ldr	r7, [pc, #72]	; (8001274 <HAL_RTC_SetDate+0xc4>)
 800122c:	403d      	ands	r5, r7
 800122e:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	438a      	bics	r2, r1
 8001234:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	069b      	lsls	r3, r3, #26
 800123a:	d40b      	bmi.n	8001254 <HAL_RTC_SetDate+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800123c:	0020      	movs	r0, r4
 800123e:	f7ff fead 	bl	8000f9c <HAL_RTC_WaitForSynchro>
 8001242:	2800      	cmp	r0, #0
 8001244:	d006      	beq.n	8001254 <HAL_RTC_SetDate+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001246:	22ff      	movs	r2, #255	; 0xff
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800124c:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 800124e:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001250:	7763      	strb	r3, [r4, #29]
 8001252:	e7e6      	b.n	8001222 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001254:	22ff      	movs	r2, #255	; 0xff
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800125a:	2301      	movs	r3, #1
 800125c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800125e:	2300      	movs	r3, #0
 8001260:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8001262:	e7df      	b.n	8001224 <HAL_RTC_SetDate+0x74>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001264:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001266:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001268:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 800126a:	431f      	orrs	r7, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 800126c:	0375      	lsls	r5, r6, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800126e:	433d      	orrs	r5, r7
 8001270:	e7c6      	b.n	8001200 <HAL_RTC_SetDate+0x50>
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	00ffff3f 	.word	0x00ffff3f

08001278 <HAL_RTC_SetAlarm_IT>:
{
 8001278:	2302      	movs	r3, #2
 800127a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127c:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 800127e:	7f01      	ldrb	r1, [r0, #28]
{
 8001280:	0005      	movs	r5, r0
 8001282:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8001284:	0018      	movs	r0, r3
 8001286:	2901      	cmp	r1, #1
 8001288:	d100      	bne.n	800128c <HAL_RTC_SetAlarm_IT+0x14>
 800128a:	e082      	b.n	8001392 <HAL_RTC_SetAlarm_IT+0x11a>
 800128c:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800128e:	776b      	strb	r3, [r5, #29]
 8001290:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(hrtc);
 8001292:	7729      	strb	r1, [r5, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	313f      	adds	r1, #63	; 0x3f
 8001298:	7820      	ldrb	r0, [r4, #0]
 800129a:	7866      	ldrb	r6, [r4, #1]
 800129c:	78a7      	ldrb	r7, [r4, #2]
 800129e:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 80012a0:	2a00      	cmp	r2, #0
 80012a2:	d157      	bne.n	8001354 <HAL_RTC_SetAlarm_IT+0xdc>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d100      	bne.n	80012aa <HAL_RTC_SetAlarm_IT+0x32>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80012a8:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80012aa:	f7ff ff01 	bl	80010b0 <RTC_ByteToBcd2>
 80012ae:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80012b0:	0030      	movs	r0, r6
 80012b2:	f7ff fefd 	bl	80010b0 <RTC_ByteToBcd2>
 80012b6:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80012b8:	0038      	movs	r0, r7
 80012ba:	f7ff fef9 	bl	80010b0 <RTC_ByteToBcd2>
 80012be:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80012c0:	1c63      	adds	r3, r4, #1
 80012c2:	7fd8      	ldrb	r0, [r3, #31]
 80012c4:	f7ff fef4 	bl	80010b0 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80012c8:	6962      	ldr	r2, [r4, #20]
 80012ca:	69e3      	ldr	r3, [r4, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80012cc:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80012ce:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80012d0:	78e2      	ldrb	r2, [r4, #3]
 80012d2:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80012d4:	4313      	orrs	r3, r2
 80012d6:	431f      	orrs	r7, r3
 80012d8:	9b01      	ldr	r3, [sp, #4]
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	431f      	orrs	r7, r3
 80012de:	433e      	orrs	r6, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80012e0:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80012e2:	6863      	ldr	r3, [r4, #4]
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80012e4:	492c      	ldr	r1, [pc, #176]	; (8001398 <HAL_RTC_SetAlarm_IT+0x120>)
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	69a3      	ldr	r3, [r4, #24]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80012ea:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80012ec:	9302      	str	r3, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80012ee:	682b      	ldr	r3, [r5, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80012f0:	4306      	orrs	r6, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
 80012f4:	3a77      	subs	r2, #119	; 0x77
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80012f8:	689a      	ldr	r2, [r3, #8]
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80012fa:	2701      	movs	r7, #1
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80012fc:	400a      	ands	r2, r1
 80012fe:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001300:	68d9      	ldr	r1, [r3, #12]
 8001302:	4a26      	ldr	r2, [pc, #152]	; (800139c <HAL_RTC_SetAlarm_IT+0x124>)
 8001304:	b2c9      	uxtb	r1, r1
 8001306:	430a      	orrs	r2, r1
 8001308:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800130a:	f7fe ffb3 	bl	8000274 <HAL_GetTick>
 800130e:	9003      	str	r0, [sp, #12]
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	68dc      	ldr	r4, [r3, #12]
 8001314:	403c      	ands	r4, r7
 8001316:	d02e      	beq.n	8001376 <HAL_RTC_SetAlarm_IT+0xfe>
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001318:	9902      	ldr	r1, [sp, #8]
 800131a:	9a01      	ldr	r2, [sp, #4]
  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800131c:	61de      	str	r6, [r3, #28]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800131e:	430a      	orrs	r2, r1
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	6899      	ldr	r1, [r3, #8]
 8001326:	0052      	lsls	r2, r2, #1
 8001328:	430a      	orrs	r2, r1
 800132a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	6899      	ldr	r1, [r3, #8]
 8001330:	0152      	lsls	r2, r2, #5
 8001332:	430a      	orrs	r2, r1
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001334:	2180      	movs	r1, #128	; 0x80
  __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8001336:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001338:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <HAL_RTC_SetAlarm_IT+0x128>)
 800133a:	0289      	lsls	r1, r1, #10
 800133c:	6810      	ldr	r0, [r2, #0]
 800133e:	4308      	orrs	r0, r1
 8001340:	6010      	str	r0, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001342:	6890      	ldr	r0, [r2, #8]
 8001344:	4301      	orrs	r1, r0
 8001346:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(hrtc);  
 8001348:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800134a:	22ff      	movs	r2, #255	; 0xff
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 800134e:	776f      	strb	r7, [r5, #29]
  __HAL_UNLOCK(hrtc);  
 8001350:	7728      	strb	r0, [r5, #28]
  return HAL_OK;
 8001352:	e01e      	b.n	8001392 <HAL_RTC_SetAlarm_IT+0x11a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001354:	2b00      	cmp	r3, #0
 8001356:	d100      	bne.n	800135a <HAL_RTC_SetAlarm_IT+0xe2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001358:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800135a:	69e3      	ldr	r3, [r4, #28]
 800135c:	6962      	ldr	r2, [r4, #20]
 800135e:	0400      	lsls	r0, r0, #16
 8001360:	4313      	orrs	r3, r2
 8001362:	431f      	orrs	r7, r3
 8001364:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001366:	78e0      	ldrb	r0, [r4, #3]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001368:	0236      	lsls	r6, r6, #8
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800136a:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800136c:	433e      	orrs	r6, r7
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800136e:	1c63      	adds	r3, r4, #1
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001370:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001372:	7fd8      	ldrb	r0, [r3, #31]
 8001374:	e7b4      	b.n	80012e0 <HAL_RTC_SetAlarm_IT+0x68>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001376:	f7fe ff7d 	bl	8000274 <HAL_GetTick>
 800137a:	9b03      	ldr	r3, [sp, #12]
 800137c:	1ac0      	subs	r0, r0, r3
 800137e:	23fa      	movs	r3, #250	; 0xfa
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4298      	cmp	r0, r3
 8001384:	d9c4      	bls.n	8001310 <HAL_RTC_SetAlarm_IT+0x98>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001386:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001388:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 800138e:	7768      	strb	r0, [r5, #29]
      __HAL_UNLOCK(hrtc);
 8001390:	772c      	strb	r4, [r5, #28]
}
 8001392:	b005      	add	sp, #20
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	fffffeff 	.word	0xfffffeff
 800139c:	fffffe7f 	.word	0xfffffe7f
 80013a0:	40010400 	.word	0x40010400

080013a4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80013a4:	230a      	movs	r3, #10
 80013a6:	0902      	lsrs	r2, r0, #4
 80013a8:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 80013aa:	220f      	movs	r2, #15
 80013ac:	4010      	ands	r0, r2
 80013ae:	1818      	adds	r0, r3, r0
 80013b0:	b2c0      	uxtb	r0, r0
}
 80013b2:	4770      	bx	lr

080013b4 <HAL_RTC_GetTime>:
{
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80013b8:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80013ba:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80013bc:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80013be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80013c0:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80013c2:	690b      	ldr	r3, [r1, #16]
 80013c4:	045b      	lsls	r3, r3, #17
 80013c6:	0c5b      	lsrs	r3, r3, #17
 80013c8:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80013ca:	680b      	ldr	r3, [r1, #0]
 80013cc:	490d      	ldr	r1, [pc, #52]	; (8001404 <HAL_RTC_GetTime+0x50>)
 80013ce:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80013d0:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80013d2:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80013d4:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80013d6:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 80013d8:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80013da:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 80013dc:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80013de:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80013e0:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80013e2:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 80013e4:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 80013e6:	2a00      	cmp	r2, #0
 80013e8:	d10a      	bne.n	8001400 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80013ea:	f7ff ffdb 	bl	80013a4 <RTC_Bcd2ToByte>
 80013ee:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80013f0:	0030      	movs	r0, r6
 80013f2:	f7ff ffd7 	bl	80013a4 <RTC_Bcd2ToByte>
 80013f6:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80013f8:	0028      	movs	r0, r5
 80013fa:	f7ff ffd3 	bl	80013a4 <RTC_Bcd2ToByte>
 80013fe:	70a0      	strb	r0, [r4, #2]
}
 8001400:	2000      	movs	r0, #0
 8001402:	bd70      	pop	{r4, r5, r6, pc}
 8001404:	007f7f7f 	.word	0x007f7f7f

08001408 <HAL_RTC_GetDate>:
{
 8001408:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800140a:	253f      	movs	r5, #63	; 0x3f
{
 800140c:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 800140e:	6803      	ldr	r3, [r0, #0]
 8001410:	490d      	ldr	r1, [pc, #52]	; (8001448 <HAL_RTC_GetDate+0x40>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001416:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001418:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800141a:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800141c:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800141e:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8001420:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001422:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001424:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001426:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8001428:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 800142a:	2a00      	cmp	r2, #0
 800142c:	d10a      	bne.n	8001444 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800142e:	f7ff ffb9 	bl	80013a4 <RTC_Bcd2ToByte>
 8001432:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001434:	0030      	movs	r0, r6
 8001436:	f7ff ffb5 	bl	80013a4 <RTC_Bcd2ToByte>
 800143a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 800143c:	0028      	movs	r0, r5
 800143e:	f7ff ffb1 	bl	80013a4 <RTC_Bcd2ToByte>
 8001442:	70a0      	strb	r0, [r4, #2]
}
 8001444:	2000      	movs	r0, #0
 8001446:	bd70      	pop	{r4, r5, r6, pc}
 8001448:	00ffff3f 	.word	0x00ffff3f

0800144c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800144c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800144e:	230f      	movs	r3, #15
 8001450:	0004      	movs	r4, r0
	data_l = ((cmd<<4)&0xf0);
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001452:	210c      	movs	r1, #12
	data_u = (cmd&0xf0);
 8001454:	439c      	bics	r4, r3
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001456:	000b      	movs	r3, r1
 8001458:	aa03      	add	r2, sp, #12
 800145a:	4323      	orrs	r3, r4
 800145c:	7013      	strb	r3, [r2, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800145e:	2308      	movs	r3, #8
	data_l = ((cmd<<4)&0xf0);
 8001460:	0100      	lsls	r0, r0, #4
 8001462:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001464:	431c      	orrs	r4, r3
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001466:	4301      	orrs	r1, r0
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001468:	4318      	orrs	r0, r3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800146a:	335c      	adds	r3, #92	; 0x5c
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800146c:	7091      	strb	r1, [r2, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800146e:	70d0      	strb	r0, [r2, #3]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001470:	7054      	strb	r4, [r2, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001472:	214e      	movs	r1, #78	; 0x4e
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	4802      	ldr	r0, [pc, #8]	; (8001480 <lcd_send_cmd+0x34>)
 8001478:	3b60      	subs	r3, #96	; 0x60
 800147a:	f7ff f95d 	bl	8000738 <HAL_I2C_Master_Transmit>
}
 800147e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8001480:	20000098 	.word	0x20000098

08001484 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001486:	230f      	movs	r3, #15
 8001488:	0004      	movs	r4, r0
	data_l = ((data<<4)&0xf0);
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800148a:	210d      	movs	r1, #13
	data_u = (data&0xf0);
 800148c:	439c      	bics	r4, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800148e:	000b      	movs	r3, r1
 8001490:	aa03      	add	r2, sp, #12
 8001492:	4323      	orrs	r3, r4
 8001494:	7013      	strb	r3, [r2, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001496:	2309      	movs	r3, #9
	data_l = ((data<<4)&0xf0);
 8001498:	0100      	lsls	r0, r0, #4
 800149a:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800149c:	431c      	orrs	r4, r3
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800149e:	4301      	orrs	r1, r0
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80014a0:	4318      	orrs	r0, r3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014a2:	335b      	adds	r3, #91	; 0x5b
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80014a4:	7091      	strb	r1, [r2, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80014a6:	70d0      	strb	r0, [r2, #3]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80014a8:	7054      	strb	r4, [r2, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014aa:	214e      	movs	r1, #78	; 0x4e
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <lcd_send_data+0x34>)
 80014b0:	3b60      	subs	r3, #96	; 0x60
 80014b2:	f7ff f941 	bl	8000738 <HAL_I2C_Master_Transmit>
}
 80014b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 80014b8:	20000098 	.word	0x20000098

080014bc <lcd_init>:

void lcd_init (void)
{
 80014bc:	b510      	push	{r4, lr}
	lcd_send_cmd (0x02);
 80014be:	2002      	movs	r0, #2
 80014c0:	f7ff ffc4 	bl	800144c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80014c4:	2028      	movs	r0, #40	; 0x28
 80014c6:	f7ff ffc1 	bl	800144c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80014ca:	200c      	movs	r0, #12
 80014cc:	f7ff ffbe 	bl	800144c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80014d0:	2080      	movs	r0, #128	; 0x80
 80014d2:	f7ff ffbb 	bl	800144c <lcd_send_cmd>
}
 80014d6:	bd10      	pop	{r4, pc}

080014d8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80014d8:	b510      	push	{r4, lr}
 80014da:	0004      	movs	r4, r0
	while (*str) lcd_send_data (*str++);
 80014dc:	7820      	ldrb	r0, [r4, #0]
 80014de:	2800      	cmp	r0, #0
 80014e0:	d100      	bne.n	80014e4 <lcd_send_string+0xc>
}
 80014e2:	bd10      	pop	{r4, pc}
	while (*str) lcd_send_data (*str++);
 80014e4:	3401      	adds	r4, #1
 80014e6:	f7ff ffcd 	bl	8001484 <lcd_send_data>
 80014ea:	e7f7      	b.n	80014dc <lcd_send_string+0x4>

080014ec <set_time>:
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
    /**Initialize RTC and set the Time and Date
    */
  sTime.Hours = 0x11;
  sTime.Minutes = 0x25;
 80014ec:	2325      	movs	r3, #37	; 0x25
{
 80014ee:	b530      	push	{r4, r5, lr}
 80014f0:	b087      	sub	sp, #28
  sTime.Hours = 0x11;
 80014f2:	a901      	add	r1, sp, #4
 80014f4:	2511      	movs	r5, #17
  sTime.Minutes = 0x25;
 80014f6:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = 0x00;
 80014f8:	2300      	movs	r3, #0
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014fa:	4c0e      	ldr	r4, [pc, #56]	; (8001534 <set_time+0x48>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	0020      	movs	r0, r4
  sTime.Hours = 0x11;
 8001500:	700d      	strb	r5, [r1, #0]
  sTime.Seconds = 0x00;
 8001502:	708b      	strb	r3, [r1, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001504:	60cb      	str	r3, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001506:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001508:	f7ff fdde 	bl	80010c8 <HAL_RTC_SetTime>
 800150c:	2800      	cmp	r0, #0
 800150e:	d000      	beq.n	8001512 <set_time+0x26>
 8001510:	e7fe      	b.n	8001510 <set_time+0x24>
  }
  /* USER CODE BEGIN RTC_Init 3 */

  /* USER CODE END RTC_Init 3 */

  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001512:	466a      	mov	r2, sp
 8001514:	2307      	movs	r3, #7
 8001516:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
  sDate.Date = 0x18;
 8001518:	2318      	movs	r3, #24
  sDate.Month = RTC_MONTH_NOVEMBER;
 800151a:	7055      	strb	r5, [r2, #1]
  sDate.Date = 0x18;
 800151c:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0x18;
 800151e:	70d3      	strb	r3, [r2, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001520:	4669      	mov	r1, sp
 8001522:	2201      	movs	r2, #1
 8001524:	0020      	movs	r0, r4
 8001526:	f7ff fe43 	bl	80011b0 <HAL_RTC_SetDate>
 800152a:	2800      	cmp	r0, #0
 800152c:	d000      	beq.n	8001530 <set_time+0x44>
 800152e:	e7fe      	b.n	800152e <set_time+0x42>
  /* USER CODE BEGIN RTC_Init 4 */



  /* USER CODE END RTC_Init 4 */
}
 8001530:	b007      	add	sp, #28
 8001532:	bd30      	pop	{r4, r5, pc}
 8001534:	200000e4 	.word	0x200000e4

08001538 <set_alarm>:

void set_alarm (void)
{
 8001538:	b500      	push	{lr}
 800153a:	b08b      	sub	sp, #44	; 0x2c
	  RTC_AlarmTypeDef sAlarm;

    /**Enable the Alarm A
    */
  sAlarm.AlarmTime.Hours = 0x10;
 800153c:	466a      	mov	r2, sp
 800153e:	2310      	movs	r3, #16
 8001540:	7013      	strb	r3, [r2, #0]
  sAlarm.AlarmTime.Minutes = 0x21;
 8001542:	3311      	adds	r3, #17
 8001544:	7053      	strb	r3, [r2, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001546:	2300      	movs	r3, #0
 8001548:	7093      	strb	r3, [r2, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800154a:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800154c:	9303      	str	r3, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800154e:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001550:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001552:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001554:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 8001556:	466b      	mov	r3, sp
 8001558:	2212      	movs	r2, #18
 800155a:	3301      	adds	r3, #1
 800155c:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 800155e:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001560:	3a11      	subs	r2, #17
  sAlarm.Alarm = RTC_ALARM_A;
 8001562:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001564:	4669      	mov	r1, sp
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <set_alarm+0x40>)
  sAlarm.Alarm = RTC_ALARM_A;
 8001568:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800156a:	f7ff fe85 	bl	8001278 <HAL_RTC_SetAlarm_IT>
 800156e:	2800      	cmp	r0, #0
 8001570:	d000      	beq.n	8001574 <set_alarm+0x3c>
 8001572:	e7fe      	b.n	8001572 <set_alarm+0x3a>
    _Error_Handler(__FILE__, __LINE__);
  }
  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 8001574:	b00b      	add	sp, #44	; 0x2c
 8001576:	bd00      	pop	{pc}
 8001578:	200000e4 	.word	0x200000e4

0800157c <get_time>:

void get_time(void)
{
 800157c:	b570      	push	{r4, r5, r6, lr}
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800157e:	4e13      	ldr	r6, [pc, #76]	; (80015cc <get_time+0x50>)
{
 8001580:	b088      	sub	sp, #32
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001582:	ad03      	add	r5, sp, #12
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001584:	ac02      	add	r4, sp, #8
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001586:	0029      	movs	r1, r5
 8001588:	2200      	movs	r2, #0
 800158a:	0030      	movs	r0, r6
 800158c:	f7ff ff12 	bl	80013b4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001590:	0021      	movs	r1, r4
 8001592:	2200      	movs	r2, #0
 8001594:	0030      	movs	r0, r6
 8001596:	f7ff ff37 	bl	8001408 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800159a:	78a9      	ldrb	r1, [r5, #2]
 800159c:	786b      	ldrb	r3, [r5, #1]
 800159e:	782a      	ldrb	r2, [r5, #0]
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <get_time+0x54>)
 80015a2:	9100      	str	r1, [sp, #0]
 80015a4:	490b      	ldr	r1, [pc, #44]	; (80015d4 <get_time+0x58>)
 80015a6:	f000 fa65 	bl	8001a74 <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d/%02d/%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 80015aa:	20fa      	movs	r0, #250	; 0xfa
 80015ac:	78e1      	ldrb	r1, [r4, #3]
 80015ae:	00c0      	lsls	r0, r0, #3
 80015b0:	1809      	adds	r1, r1, r0
 80015b2:	7863      	ldrb	r3, [r4, #1]
 80015b4:	78a2      	ldrb	r2, [r4, #2]
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <get_time+0x5c>)
 80015b8:	9100      	str	r1, [sp, #0]
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <get_time+0x60>)
 80015bc:	f000 fa5a 	bl	8001a74 <siprintf>

  dayweek = gDate.WeekDay;
 80015c0:	7822      	ldrb	r2, [r4, #0]
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <get_time+0x64>)
 80015c4:	701a      	strb	r2, [r3, #0]


}
 80015c6:	b008      	add	sp, #32
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	200000e4 	.word	0x200000e4
 80015d0:	20000104 	.word	0x20000104
 80015d4:	0800231f 	.word	0x0800231f
 80015d8:	2000010e 	.word	0x2000010e
 80015dc:	0800232e 	.word	0x0800232e
 80015e0:	20000085 	.word	0x20000085

080015e4 <display_time>:

//Let's display the time and date on lcd

void display_time (void)
{
 80015e4:	b510      	push	{r4, lr}
	lcd_send_cmd (0x80);
 80015e6:	2080      	movs	r0, #128	; 0x80
 80015e8:	f7ff ff30 	bl	800144c <lcd_send_cmd>
	lcd_send_string (time);
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <display_time+0x50>)
 80015ee:	f7ff ff73 	bl	80014d8 <lcd_send_string>

	lcd_send_cmd (0xc0);
 80015f2:	20c0      	movs	r0, #192	; 0xc0
 80015f4:	f7ff ff2a 	bl	800144c <lcd_send_cmd>
	lcd_send_string (date);
 80015f8:	480f      	ldr	r0, [pc, #60]	; (8001638 <display_time+0x54>)
 80015fa:	f7ff ff6d 	bl	80014d8 <lcd_send_string>

   	if(dayweek ==1){
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <display_time+0x58>)
		lcd_send_string (" mon");
 8001600:	480f      	ldr	r0, [pc, #60]	; (8001640 <display_time+0x5c>)
   	if(dayweek ==1){
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d011      	beq.n	800162c <display_time+0x48>
	}

   	else if(dayweek ==2){
   			lcd_send_string (" tue");
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <display_time+0x60>)
   	else if(dayweek ==2){
 800160a:	2b02      	cmp	r3, #2
 800160c:	d00e      	beq.n	800162c <display_time+0x48>
   		}

   	else if(dayweek ==3){
   			lcd_send_string (" wen");
 800160e:	480e      	ldr	r0, [pc, #56]	; (8001648 <display_time+0x64>)
   	else if(dayweek ==3){
 8001610:	2b03      	cmp	r3, #3
 8001612:	d00b      	beq.n	800162c <display_time+0x48>
   		}

   	else if(dayweek ==4){
   			lcd_send_string (" thu");
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <display_time+0x68>)
   	else if(dayweek ==4){
 8001616:	2b04      	cmp	r3, #4
 8001618:	d008      	beq.n	800162c <display_time+0x48>
   		}

   	else if(dayweek ==5){
   			lcd_send_string (" fri");
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <display_time+0x6c>)
   	else if(dayweek ==5){
 800161c:	2b05      	cmp	r3, #5
 800161e:	d005      	beq.n	800162c <display_time+0x48>
   		}

   	else if(dayweek ==6){
   			lcd_send_string (" sat");
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <display_time+0x70>)
   	else if(dayweek ==6){
 8001622:	2b06      	cmp	r3, #6
 8001624:	d002      	beq.n	800162c <display_time+0x48>
   		}

   	else if(dayweek ==7){
 8001626:	2b07      	cmp	r3, #7
 8001628:	d102      	bne.n	8001630 <display_time+0x4c>
   			lcd_send_string (" sun");
 800162a:	480b      	ldr	r0, [pc, #44]	; (8001658 <display_time+0x74>)
 800162c:	f7ff ff54 	bl	80014d8 <lcd_send_string>
   		}
}
 8001630:	bd10      	pop	{r4, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	20000104 	.word	0x20000104
 8001638:	2000010e 	.word	0x2000010e
 800163c:	20000085 	.word	0x20000085
 8001640:	080022fc 	.word	0x080022fc
 8001644:	08002301 	.word	0x08002301
 8001648:	08002306 	.word	0x08002306
 800164c:	0800230b 	.word	0x0800230b
 8001650:	08002310 	.word	0x08002310
 8001654:	08002315 	.word	0x08002315
 8001658:	0800231a 	.word	0x0800231a

0800165c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
	alarm = 1;
 800165c:	2201      	movs	r2, #1
 800165e:	4b01      	ldr	r3, [pc, #4]	; (8001664 <HAL_RTC_AlarmAEventCallback+0x8>)
 8001660:	701a      	strb	r2, [r3, #0]
}
 8001662:	4770      	bx	lr
 8001664:	20000084 	.word	0x20000084

08001668 <to_do_on_alarm>:

void to_do_on_alarm (void)
{
 8001668:	b510      	push	{r4, lr}

	lcd_send_cmd (0x80);
 800166a:	2080      	movs	r0, #128	; 0x80
 800166c:	f7ff feee 	bl	800144c <lcd_send_cmd>
	lcd_send_string ("SUBSCRIBE TO");
 8001670:	480b      	ldr	r0, [pc, #44]	; (80016a0 <to_do_on_alarm+0x38>)
 8001672:	f7ff ff31 	bl	80014d8 <lcd_send_string>
	lcd_send_cmd (0xc0);
 8001676:	20c0      	movs	r0, #192	; 0xc0
 8001678:	f7ff fee8 	bl	800144c <lcd_send_cmd>
	lcd_send_string ("this CHANNEL");
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <to_do_on_alarm+0x3c>)
 800167e:	f7ff ff2b 	bl	80014d8 <lcd_send_string>
	HAL_Delay (3000);
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <to_do_on_alarm+0x40>)
 8001684:	f7fe fdfc 	bl	8000280 <HAL_Delay>
	lcd_send_cmd (0x80);
 8001688:	2080      	movs	r0, #128	; 0x80
 800168a:	f7ff fedf 	bl	800144c <lcd_send_cmd>
 800168e:	243c      	movs	r4, #60	; 0x3c
	for (int i=0;i<60;i++)
	{
		lcd_send_data (' ');  // clear lcd
 8001690:	2020      	movs	r0, #32
 8001692:	3c01      	subs	r4, #1
 8001694:	f7ff fef6 	bl	8001484 <lcd_send_data>
	for (int i=0;i<60;i++)
 8001698:	2c00      	cmp	r4, #0
 800169a:	d1f9      	bne.n	8001690 <to_do_on_alarm+0x28>
	}
}
 800169c:	bd10      	pop	{r4, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	0800233c 	.word	0x0800233c
 80016a4:	08002349 	.word	0x08002349
 80016a8:	00000bb8 	.word	0x00000bb8

080016ac <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80016ac:	230a      	movs	r3, #10
{
 80016ae:	b510      	push	{r4, lr}
 80016b0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80016b2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b4:	3b09      	subs	r3, #9
 80016b6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80016b8:	2210      	movs	r2, #16
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016ba:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016bc:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016be:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80016c0:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016c2:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c4:	f7ff f91a 	bl	80008fc <HAL_RCC_OscConfig>
 80016c8:	1e01      	subs	r1, r0, #0
 80016ca:	d000      	beq.n	80016ce <SystemClock_Config+0x22>
 80016cc:	e7fe      	b.n	80016cc <SystemClock_Config+0x20>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ce:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016d0:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d4:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016d6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d8:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016da:	f7ff fb23 	bl	8000d24 <HAL_RCC_ClockConfig>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d000      	beq.n	80016e4 <SystemClock_Config+0x38>
 80016e2:	e7fe      	b.n	80016e2 <SystemClock_Config+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <SystemClock_Config+0x78>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80016e6:	9007      	str	r0, [sp, #28]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80016e8:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016ea:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ec:	a804      	add	r0, sp, #16
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f2:	f7ff fbb3 	bl	8000e5c <HAL_RCCEx_PeriphCLKConfig>
 80016f6:	1e04      	subs	r4, r0, #0
 80016f8:	d000      	beq.n	80016fc <SystemClock_Config+0x50>
 80016fa:	e7fe      	b.n	80016fa <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80016fc:	f7ff fba8 	bl	8000e50 <HAL_RCC_GetHCLKFreq>
 8001700:	21fa      	movs	r1, #250	; 0xfa
 8001702:	0089      	lsls	r1, r1, #2
 8001704:	f7fe fd00 	bl	8000108 <__udivsi3>
 8001708:	f7fe fe04 	bl	8000314 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800170c:	2004      	movs	r0, #4
 800170e:	f7fe fe1b 	bl	8000348 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001712:	2001      	movs	r0, #1
 8001714:	0022      	movs	r2, r4
 8001716:	0021      	movs	r1, r4
 8001718:	4240      	negs	r0, r0
 800171a:	f7fe fdc1 	bl	80002a0 <HAL_NVIC_SetPriority>
}
 800171e:	b014      	add	sp, #80	; 0x50
 8001720:	bd10      	pop	{r4, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	00010020 	.word	0x00010020

08001728 <main>:
{
 8001728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172a:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 800172c:	f7fe fd8a 	bl	8000244 <HAL_Init>
  SystemClock_Config();
 8001730:	f7ff ffbc 	bl	80016ac <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001734:	2080      	movs	r0, #128	; 0x80
 8001736:	4b48      	ldr	r3, [pc, #288]	; (8001858 <main+0x130>)
 8001738:	03c0      	lsls	r0, r0, #15
 800173a:	6959      	ldr	r1, [r3, #20]
  hrtc.Instance = RTC;
 800173c:	4c47      	ldr	r4, [pc, #284]	; (800185c <main+0x134>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800173e:	4301      	orrs	r1, r0
 8001740:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001744:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001748:	4002      	ands	r2, r0
 800174a:	9201      	str	r2, [sp, #4]
 800174c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	695a      	ldr	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001750:	0020      	movs	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	430a      	orrs	r2, r1
 8001754:	615a      	str	r2, [r3, #20]
 8001756:	695b      	ldr	r3, [r3, #20]
  hrtc.Init.AsynchPrediv = 127;
 8001758:	227f      	movs	r2, #127	; 0x7f
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	400b      	ands	r3, r1
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	9b02      	ldr	r3, [sp, #8]
  hrtc.Instance = RTC;
 8001760:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <main+0x138>)
  hrtc.Init.AsynchPrediv = 127;
 8001762:	60a2      	str	r2, [r4, #8]
  hrtc.Instance = RTC;
 8001764:	6023      	str	r3, [r4, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001766:	2300      	movs	r3, #0
  hrtc.Init.SynchPrediv = 255;
 8001768:	3280      	adds	r2, #128	; 0x80
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800176a:	6063      	str	r3, [r4, #4]
  hrtc.Init.SynchPrediv = 255;
 800176c:	60e2      	str	r2, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800176e:	6123      	str	r3, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001770:	6163      	str	r3, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001772:	61a3      	str	r3, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001774:	f7ff fc48 	bl	8001008 <HAL_RTC_Init>
 8001778:	2800      	cmp	r0, #0
 800177a:	d000      	beq.n	800177e <main+0x56>
 800177c:	e7fe      	b.n	800177c <main+0x54>
  sTime.Hours = 0x10;
 800177e:	2310      	movs	r3, #16
 8001780:	a903      	add	r1, sp, #12
 8001782:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = 0x20;
 8001784:	18db      	adds	r3, r3, r3
 8001786:	704b      	strb	r3, [r1, #1]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001788:	60c8      	str	r0, [r1, #12]
  sTime.Seconds = 0x30;
 800178a:	3310      	adds	r3, #16
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800178c:	6108      	str	r0, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800178e:	2201      	movs	r2, #1
 8001790:	0020      	movs	r0, r4
  sTime.Seconds = 0x30;
 8001792:	708b      	strb	r3, [r1, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001794:	f7ff fc98 	bl	80010c8 <HAL_RTC_SetTime>
 8001798:	2800      	cmp	r0, #0
 800179a:	d000      	beq.n	800179e <main+0x76>
 800179c:	e7fe      	b.n	800179c <main+0x74>
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800179e:	466b      	mov	r3, sp
 80017a0:	2702      	movs	r7, #2
  sDate.Month = RTC_MONTH_AUGUST;
 80017a2:	466a      	mov	r2, sp
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80017a4:	701f      	strb	r7, [r3, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80017a6:	2308      	movs	r3, #8
  sDate.Date = 0x9;
 80017a8:	2609      	movs	r6, #9
  sDate.Month = RTC_MONTH_AUGUST;
 80017aa:	7053      	strb	r3, [r2, #1]
  sDate.Year = 0x18;
 80017ac:	2318      	movs	r3, #24
  sDate.Date = 0x9;
 80017ae:	7096      	strb	r6, [r2, #2]
  sDate.Year = 0x18;
 80017b0:	70d3      	strb	r3, [r2, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017b2:	4669      	mov	r1, sp
 80017b4:	2201      	movs	r2, #1
 80017b6:	0020      	movs	r0, r4
 80017b8:	f7ff fcfa 	bl	80011b0 <HAL_RTC_SetDate>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d000      	beq.n	80017c2 <main+0x9a>
 80017c0:	e7fe      	b.n	80017c0 <main+0x98>
  sAlarm.AlarmTime.Hours = 0x12;
 80017c2:	2312      	movs	r3, #18
 80017c4:	a908      	add	r1, sp, #32
 80017c6:	700b      	strb	r3, [r1, #0]
  sAlarm.AlarmDateWeekDay = 0x9;
 80017c8:	330f      	adds	r3, #15
 80017ca:	446b      	add	r3, sp
  sAlarm.AlarmTime.Minutes = 0x1;
 80017cc:	2501      	movs	r5, #1
  sAlarm.AlarmDateWeekDay = 0x9;
 80017ce:	77de      	strb	r6, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 80017d0:	2380      	movs	r3, #128	; 0x80
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017d2:	6048      	str	r0, [r1, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017d4:	60c8      	str	r0, [r1, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017d6:	6108      	str	r0, [r1, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017d8:	6148      	str	r0, [r1, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017da:	6188      	str	r0, [r1, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017dc:	61c8      	str	r0, [r1, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80017de:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017e0:	002a      	movs	r2, r5
 80017e2:	0020      	movs	r0, r4
  sAlarm.AlarmTime.Minutes = 0x1;
 80017e4:	704d      	strb	r5, [r1, #1]
  sAlarm.AlarmTime.Seconds = 0x2;
 80017e6:	708f      	strb	r7, [r1, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80017e8:	624b      	str	r3, [r1, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017ea:	f7ff fd45 	bl	8001278 <HAL_RTC_SetAlarm_IT>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d000      	beq.n	80017f4 <main+0xcc>
 80017f2:	e7fe      	b.n	80017f2 <main+0xca>
  hi2c1.Instance = I2C1;
 80017f4:	4c1b      	ldr	r4, [pc, #108]	; (8001864 <main+0x13c>)
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <main+0x140>)
  hi2c1.Init.OwnAddress1 = 0;
 80017f8:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 80017fa:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <main+0x144>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017fe:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001800:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001802:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001804:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001806:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001808:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 800180a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800180e:	f7fe ff3d 	bl	800068c <HAL_I2C_Init>
 8001812:	1e01      	subs	r1, r0, #0
 8001814:	d000      	beq.n	8001818 <main+0xf0>
 8001816:	e7fe      	b.n	8001816 <main+0xee>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001818:	0020      	movs	r0, r4
 800181a:	f7ff f825 	bl	8000868 <HAL_I2CEx_ConfigAnalogFilter>
 800181e:	1e01      	subs	r1, r0, #0
 8001820:	d000      	beq.n	8001824 <main+0xfc>
 8001822:	e7fe      	b.n	8001822 <main+0xfa>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001824:	0020      	movs	r0, r4
 8001826:	f7ff f845 	bl	80008b4 <HAL_I2CEx_ConfigDigitalFilter>
 800182a:	2800      	cmp	r0, #0
 800182c:	d000      	beq.n	8001830 <main+0x108>
 800182e:	e7fe      	b.n	800182e <main+0x106>
  lcd_init ();
 8001830:	f7ff fe44 	bl	80014bc <lcd_init>
  set_time();
 8001834:	f7ff fe5a 	bl	80014ec <set_time>
  set_alarm ();
 8001838:	f7ff fe7e 	bl	8001538 <set_alarm>
	  get_time();
 800183c:	f7ff fe9e 	bl	800157c <get_time>
	  display_time();
 8001840:	f7ff fed0 	bl	80015e4 <display_time>
	  if (alarm)
 8001844:	4c0a      	ldr	r4, [pc, #40]	; (8001870 <main+0x148>)
 8001846:	7823      	ldrb	r3, [r4, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f7      	beq.n	800183c <main+0x114>
		  to_do_on_alarm();
 800184c:	f7ff ff0c 	bl	8001668 <to_do_on_alarm>
		  alarm =0;
 8001850:	2300      	movs	r3, #0
 8001852:	7023      	strb	r3, [r4, #0]
 8001854:	e7f2      	b.n	800183c <main+0x114>
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	40021000 	.word	0x40021000
 800185c:	200000e4 	.word	0x200000e4
 8001860:	40002800 	.word	0x40002800
 8001864:	20000098 	.word	0x20000098
 8001868:	40005400 	.word	0x40005400
 800186c:	2000090e 	.word	0x2000090e
 8001870:	20000084 	.word	0x20000084

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	2001      	movs	r0, #1
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_MspInit+0x4c>)
 800187a:	6999      	ldr	r1, [r3, #24]
 800187c:	4301      	orrs	r1, r0
 800187e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001880:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4002      	ands	r2, r0
 8001888:	9200      	str	r2, [sp, #0]
 800188a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800188e:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	430a      	orrs	r2, r1
 8001892:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	400b      	ands	r3, r1
 800189a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800189c:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80018a0:	f7fe fcfe 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2002      	movs	r0, #2
 80018a8:	0011      	movs	r1, r2
 80018aa:	4240      	negs	r0, r0
 80018ac:	f7fe fcf8 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2001      	movs	r0, #1
 80018b4:	0011      	movs	r1, r2
 80018b6:	4240      	negs	r0, r0
 80018b8:	f7fe fcf2 	bl	80002a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018bc:	bd07      	pop	{r0, r1, r2, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_I2C_MspInit+0x44>)
 80018c8:	6802      	ldr	r2, [r0, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d119      	bne.n	8001902 <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018ce:	23c0      	movs	r3, #192	; 0xc0
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d4:	2312      	movs	r3, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018da:	3b11      	subs	r3, #17
 80018dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018de:	3302      	adds	r3, #2
 80018e0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e4:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f7fe fd41 	bl	8000370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ee:	2080      	movs	r0, #128	; 0x80
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_I2C_MspInit+0x48>)
 80018f2:	0380      	lsls	r0, r0, #14
 80018f4:	69d1      	ldr	r1, [r2, #28]
 80018f6:	4301      	orrs	r1, r0
 80018f8:	61d1      	str	r1, [r2, #28]
 80018fa:	69d3      	ldr	r3, [r2, #28]
 80018fc:	4003      	ands	r3, r0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001902:	b007      	add	sp, #28
 8001904:	bd00      	pop	{pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	40005400 	.word	0x40005400
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RTC_MspInit+0x28>)
 8001912:	6802      	ldr	r2, [r0, #0]
{
 8001914:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 8001916:	429a      	cmp	r2, r3
 8001918:	d10d      	bne.n	8001936 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_RTC_MspInit+0x2c>)
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	6a11      	ldr	r1, [r2, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001922:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8001924:	430b      	orrs	r3, r1
 8001926:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	0011      	movs	r1, r2
 800192c:	f7fe fcb8 	bl	80002a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001930:	2002      	movs	r0, #2
 8001932:	f7fe fce5 	bl	8000300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001936:	bd10      	pop	{r4, pc}
 8001938:	40002800 	.word	0x40002800
 800193c:	40021000 	.word	0x40021000

08001940 <NMI_Handler>:
 8001940:	4770      	bx	lr

08001942 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler>

08001944 <SVC_Handler>:
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001948:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194a:	f7fe fc8b 	bl	8000264 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800194e:	f7fe fd0a 	bl	8000366 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001952:	bd10      	pop	{r4, pc}

08001954 <RTC_IRQHandler>:

/**
* @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20.
*/
void RTC_IRQHandler(void)
{
 8001954:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001956:	4802      	ldr	r0, [pc, #8]	; (8001960 <RTC_IRQHandler+0xc>)
 8001958:	f7ff fb04 	bl	8000f64 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800195c:	bd10      	pop	{r4, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	200000e4 	.word	0x200000e4

08001964 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001964:	2101      	movs	r1, #1
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001968:	4811      	ldr	r0, [pc, #68]	; (80019b0 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4002      	ands	r2, r0
 8001974:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	480e      	ldr	r0, [pc, #56]	; (80019b4 <SystemInit+0x50>)
 800197a:	4002      	ands	r2, r0
 800197c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <SystemInit+0x54>)
 8001982:	4002      	ands	r2, r0
 8001984:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <SystemInit+0x58>)
 800198a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800198c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800198e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001992:	4382      	bics	r2, r0
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001998:	4809      	ldr	r0, [pc, #36]	; (80019c0 <SystemInit+0x5c>)
 800199a:	4002      	ands	r2, r0
 800199c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800199e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a0:	438a      	bics	r2, r1
 80019a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]

}
 80019a8:	4770      	bx	lr
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08ffb80c 	.word	0x08ffb80c
 80019b4:	fef6ffff 	.word	0xfef6ffff
 80019b8:	fffbffff 	.word	0xfffbffff
 80019bc:	ffc0ffff 	.word	0xffc0ffff
 80019c0:	fffffeec 	.word	0xfffffeec

080019c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <LoopForever+0xe>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e0:	4c0b      	ldr	r4, [pc, #44]	; (8001a10 <LoopForever+0x16>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019ee:	f7ff ffb9 	bl	8001964 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019f2:	f000 f811 	bl	8001a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019f6:	f7ff fe97 	bl	8001728 <main>

080019fa <LoopForever>:

LoopForever:
    b LoopForever
 80019fa:	e7fe      	b.n	80019fa <LoopForever>
  ldr   r0, =_estack
 80019fc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a08:	080023a4 	.word	0x080023a4
  ldr r2, =_sbss
 8001a0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a10:	2000011c 	.word	0x2000011c

08001a14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC1_IRQHandler>
	...

08001a18 <__libc_init_array>:
 8001a18:	b570      	push	{r4, r5, r6, lr}
 8001a1a:	2600      	movs	r6, #0
 8001a1c:	4d0c      	ldr	r5, [pc, #48]	; (8001a50 <__libc_init_array+0x38>)
 8001a1e:	4c0d      	ldr	r4, [pc, #52]	; (8001a54 <__libc_init_array+0x3c>)
 8001a20:	1b64      	subs	r4, r4, r5
 8001a22:	10a4      	asrs	r4, r4, #2
 8001a24:	42a6      	cmp	r6, r4
 8001a26:	d109      	bne.n	8001a3c <__libc_init_array+0x24>
 8001a28:	2600      	movs	r6, #0
 8001a2a:	f000 fc4b 	bl	80022c4 <_init>
 8001a2e:	4d0a      	ldr	r5, [pc, #40]	; (8001a58 <__libc_init_array+0x40>)
 8001a30:	4c0a      	ldr	r4, [pc, #40]	; (8001a5c <__libc_init_array+0x44>)
 8001a32:	1b64      	subs	r4, r4, r5
 8001a34:	10a4      	asrs	r4, r4, #2
 8001a36:	42a6      	cmp	r6, r4
 8001a38:	d105      	bne.n	8001a46 <__libc_init_array+0x2e>
 8001a3a:	bd70      	pop	{r4, r5, r6, pc}
 8001a3c:	00b3      	lsls	r3, r6, #2
 8001a3e:	58eb      	ldr	r3, [r5, r3]
 8001a40:	4798      	blx	r3
 8001a42:	3601      	adds	r6, #1
 8001a44:	e7ee      	b.n	8001a24 <__libc_init_array+0xc>
 8001a46:	00b3      	lsls	r3, r6, #2
 8001a48:	58eb      	ldr	r3, [r5, r3]
 8001a4a:	4798      	blx	r3
 8001a4c:	3601      	adds	r6, #1
 8001a4e:	e7f2      	b.n	8001a36 <__libc_init_array+0x1e>
 8001a50:	0800239c 	.word	0x0800239c
 8001a54:	0800239c 	.word	0x0800239c
 8001a58:	0800239c 	.word	0x0800239c
 8001a5c:	080023a0 	.word	0x080023a0

08001a60 <memcpy>:
 8001a60:	2300      	movs	r3, #0
 8001a62:	b510      	push	{r4, lr}
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d100      	bne.n	8001a6a <memcpy+0xa>
 8001a68:	bd10      	pop	{r4, pc}
 8001a6a:	5ccc      	ldrb	r4, [r1, r3]
 8001a6c:	54c4      	strb	r4, [r0, r3]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	e7f8      	b.n	8001a64 <memcpy+0x4>
	...

08001a74 <siprintf>:
 8001a74:	b40e      	push	{r1, r2, r3}
 8001a76:	b510      	push	{r4, lr}
 8001a78:	b09d      	sub	sp, #116	; 0x74
 8001a7a:	a902      	add	r1, sp, #8
 8001a7c:	9002      	str	r0, [sp, #8]
 8001a7e:	6108      	str	r0, [r1, #16]
 8001a80:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <siprintf+0x3c>)
 8001a82:	2482      	movs	r4, #130	; 0x82
 8001a84:	6088      	str	r0, [r1, #8]
 8001a86:	6148      	str	r0, [r1, #20]
 8001a88:	2001      	movs	r0, #1
 8001a8a:	4240      	negs	r0, r0
 8001a8c:	ab1f      	add	r3, sp, #124	; 0x7c
 8001a8e:	81c8      	strh	r0, [r1, #14]
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <siprintf+0x40>)
 8001a92:	cb04      	ldmia	r3!, {r2}
 8001a94:	00a4      	lsls	r4, r4, #2
 8001a96:	6800      	ldr	r0, [r0, #0]
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	818c      	strh	r4, [r1, #12]
 8001a9c:	f000 f86e 	bl	8001b7c <_svfiprintf_r>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9a02      	ldr	r2, [sp, #8]
 8001aa4:	7013      	strb	r3, [r2, #0]
 8001aa6:	b01d      	add	sp, #116	; 0x74
 8001aa8:	bc10      	pop	{r4}
 8001aaa:	bc08      	pop	{r3}
 8001aac:	b003      	add	sp, #12
 8001aae:	4718      	bx	r3
 8001ab0:	7fffffff 	.word	0x7fffffff
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <__ssputs_r>:
 8001ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aba:	688e      	ldr	r6, [r1, #8]
 8001abc:	b085      	sub	sp, #20
 8001abe:	0007      	movs	r7, r0
 8001ac0:	000c      	movs	r4, r1
 8001ac2:	9203      	str	r2, [sp, #12]
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	429e      	cmp	r6, r3
 8001ac8:	d839      	bhi.n	8001b3e <__ssputs_r+0x86>
 8001aca:	2390      	movs	r3, #144	; 0x90
 8001acc:	898a      	ldrh	r2, [r1, #12]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	421a      	tst	r2, r3
 8001ad2:	d034      	beq.n	8001b3e <__ssputs_r+0x86>
 8001ad4:	2503      	movs	r5, #3
 8001ad6:	6909      	ldr	r1, [r1, #16]
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	1a5b      	subs	r3, r3, r1
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	6963      	ldr	r3, [r4, #20]
 8001ae0:	9802      	ldr	r0, [sp, #8]
 8001ae2:	435d      	muls	r5, r3
 8001ae4:	0feb      	lsrs	r3, r5, #31
 8001ae6:	195d      	adds	r5, r3, r5
 8001ae8:	9b01      	ldr	r3, [sp, #4]
 8001aea:	106d      	asrs	r5, r5, #1
 8001aec:	3301      	adds	r3, #1
 8001aee:	181b      	adds	r3, r3, r0
 8001af0:	42ab      	cmp	r3, r5
 8001af2:	d900      	bls.n	8001af6 <__ssputs_r+0x3e>
 8001af4:	001d      	movs	r5, r3
 8001af6:	0553      	lsls	r3, r2, #21
 8001af8:	d532      	bpl.n	8001b60 <__ssputs_r+0xa8>
 8001afa:	0029      	movs	r1, r5
 8001afc:	0038      	movs	r0, r7
 8001afe:	f000 fb31 	bl	8002164 <_malloc_r>
 8001b02:	1e06      	subs	r6, r0, #0
 8001b04:	d109      	bne.n	8001b1a <__ssputs_r+0x62>
 8001b06:	230c      	movs	r3, #12
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	2340      	movs	r3, #64	; 0x40
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	89a2      	ldrh	r2, [r4, #12]
 8001b10:	4240      	negs	r0, r0
 8001b12:	4313      	orrs	r3, r2
 8001b14:	81a3      	strh	r3, [r4, #12]
 8001b16:	b005      	add	sp, #20
 8001b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b1a:	9a02      	ldr	r2, [sp, #8]
 8001b1c:	6921      	ldr	r1, [r4, #16]
 8001b1e:	f7ff ff9f 	bl	8001a60 <memcpy>
 8001b22:	89a3      	ldrh	r3, [r4, #12]
 8001b24:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <__ssputs_r+0xc0>)
 8001b26:	401a      	ands	r2, r3
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	81a3      	strh	r3, [r4, #12]
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	6126      	str	r6, [r4, #16]
 8001b32:	18f6      	adds	r6, r6, r3
 8001b34:	6026      	str	r6, [r4, #0]
 8001b36:	6165      	str	r5, [r4, #20]
 8001b38:	9e01      	ldr	r6, [sp, #4]
 8001b3a:	1aed      	subs	r5, r5, r3
 8001b3c:	60a5      	str	r5, [r4, #8]
 8001b3e:	9b01      	ldr	r3, [sp, #4]
 8001b40:	42b3      	cmp	r3, r6
 8001b42:	d200      	bcs.n	8001b46 <__ssputs_r+0x8e>
 8001b44:	001e      	movs	r6, r3
 8001b46:	0032      	movs	r2, r6
 8001b48:	9903      	ldr	r1, [sp, #12]
 8001b4a:	6820      	ldr	r0, [r4, #0]
 8001b4c:	f000 faad 	bl	80020aa <memmove>
 8001b50:	68a3      	ldr	r3, [r4, #8]
 8001b52:	2000      	movs	r0, #0
 8001b54:	1b9b      	subs	r3, r3, r6
 8001b56:	60a3      	str	r3, [r4, #8]
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	199e      	adds	r6, r3, r6
 8001b5c:	6026      	str	r6, [r4, #0]
 8001b5e:	e7da      	b.n	8001b16 <__ssputs_r+0x5e>
 8001b60:	002a      	movs	r2, r5
 8001b62:	0038      	movs	r0, r7
 8001b64:	f000 fb5c 	bl	8002220 <_realloc_r>
 8001b68:	1e06      	subs	r6, r0, #0
 8001b6a:	d1e0      	bne.n	8001b2e <__ssputs_r+0x76>
 8001b6c:	6921      	ldr	r1, [r4, #16]
 8001b6e:	0038      	movs	r0, r7
 8001b70:	f000 faae 	bl	80020d0 <_free_r>
 8001b74:	e7c7      	b.n	8001b06 <__ssputs_r+0x4e>
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	fffffb7f 	.word	0xfffffb7f

08001b7c <_svfiprintf_r>:
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b09f      	sub	sp, #124	; 0x7c
 8001b80:	9002      	str	r0, [sp, #8]
 8001b82:	9305      	str	r3, [sp, #20]
 8001b84:	898b      	ldrh	r3, [r1, #12]
 8001b86:	000f      	movs	r7, r1
 8001b88:	0016      	movs	r6, r2
 8001b8a:	061b      	lsls	r3, r3, #24
 8001b8c:	d511      	bpl.n	8001bb2 <_svfiprintf_r+0x36>
 8001b8e:	690b      	ldr	r3, [r1, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10e      	bne.n	8001bb2 <_svfiprintf_r+0x36>
 8001b94:	2140      	movs	r1, #64	; 0x40
 8001b96:	f000 fae5 	bl	8002164 <_malloc_r>
 8001b9a:	6038      	str	r0, [r7, #0]
 8001b9c:	6138      	str	r0, [r7, #16]
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d105      	bne.n	8001bae <_svfiprintf_r+0x32>
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	9a02      	ldr	r2, [sp, #8]
 8001ba6:	3801      	subs	r0, #1
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	b01f      	add	sp, #124	; 0x7c
 8001bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	ad06      	add	r5, sp, #24
 8001bb6:	616b      	str	r3, [r5, #20]
 8001bb8:	3320      	adds	r3, #32
 8001bba:	766b      	strb	r3, [r5, #25]
 8001bbc:	3310      	adds	r3, #16
 8001bbe:	76ab      	strb	r3, [r5, #26]
 8001bc0:	0034      	movs	r4, r6
 8001bc2:	7823      	ldrb	r3, [r4, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d147      	bne.n	8001c58 <_svfiprintf_r+0xdc>
 8001bc8:	1ba3      	subs	r3, r4, r6
 8001bca:	9304      	str	r3, [sp, #16]
 8001bcc:	d00d      	beq.n	8001bea <_svfiprintf_r+0x6e>
 8001bce:	1ba3      	subs	r3, r4, r6
 8001bd0:	0032      	movs	r2, r6
 8001bd2:	0039      	movs	r1, r7
 8001bd4:	9802      	ldr	r0, [sp, #8]
 8001bd6:	f7ff ff6f 	bl	8001ab8 <__ssputs_r>
 8001bda:	1c43      	adds	r3, r0, #1
 8001bdc:	d100      	bne.n	8001be0 <_svfiprintf_r+0x64>
 8001bde:	e0b5      	b.n	8001d4c <_svfiprintf_r+0x1d0>
 8001be0:	696a      	ldr	r2, [r5, #20]
 8001be2:	9b04      	ldr	r3, [sp, #16]
 8001be4:	4694      	mov	ip, r2
 8001be6:	4463      	add	r3, ip
 8001be8:	616b      	str	r3, [r5, #20]
 8001bea:	7823      	ldrb	r3, [r4, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d100      	bne.n	8001bf2 <_svfiprintf_r+0x76>
 8001bf0:	e0ac      	b.n	8001d4c <_svfiprintf_r+0x1d0>
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	4252      	negs	r2, r2
 8001bf8:	606a      	str	r2, [r5, #4]
 8001bfa:	a902      	add	r1, sp, #8
 8001bfc:	3254      	adds	r2, #84	; 0x54
 8001bfe:	1852      	adds	r2, r2, r1
 8001c00:	3401      	adds	r4, #1
 8001c02:	602b      	str	r3, [r5, #0]
 8001c04:	60eb      	str	r3, [r5, #12]
 8001c06:	60ab      	str	r3, [r5, #8]
 8001c08:	7013      	strb	r3, [r2, #0]
 8001c0a:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c0c:	4e58      	ldr	r6, [pc, #352]	; (8001d70 <_svfiprintf_r+0x1f4>)
 8001c0e:	2205      	movs	r2, #5
 8001c10:	7821      	ldrb	r1, [r4, #0]
 8001c12:	0030      	movs	r0, r6
 8001c14:	f000 fa3e 	bl	8002094 <memchr>
 8001c18:	1c62      	adds	r2, r4, #1
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d120      	bne.n	8001c60 <_svfiprintf_r+0xe4>
 8001c1e:	6829      	ldr	r1, [r5, #0]
 8001c20:	06cb      	lsls	r3, r1, #27
 8001c22:	d504      	bpl.n	8001c2e <_svfiprintf_r+0xb2>
 8001c24:	2353      	movs	r3, #83	; 0x53
 8001c26:	ae02      	add	r6, sp, #8
 8001c28:	3020      	adds	r0, #32
 8001c2a:	199b      	adds	r3, r3, r6
 8001c2c:	7018      	strb	r0, [r3, #0]
 8001c2e:	070b      	lsls	r3, r1, #28
 8001c30:	d504      	bpl.n	8001c3c <_svfiprintf_r+0xc0>
 8001c32:	2353      	movs	r3, #83	; 0x53
 8001c34:	202b      	movs	r0, #43	; 0x2b
 8001c36:	ae02      	add	r6, sp, #8
 8001c38:	199b      	adds	r3, r3, r6
 8001c3a:	7018      	strb	r0, [r3, #0]
 8001c3c:	7823      	ldrb	r3, [r4, #0]
 8001c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8001c40:	d016      	beq.n	8001c70 <_svfiprintf_r+0xf4>
 8001c42:	2000      	movs	r0, #0
 8001c44:	210a      	movs	r1, #10
 8001c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c48:	7822      	ldrb	r2, [r4, #0]
 8001c4a:	3a30      	subs	r2, #48	; 0x30
 8001c4c:	2a09      	cmp	r2, #9
 8001c4e:	d955      	bls.n	8001cfc <_svfiprintf_r+0x180>
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d015      	beq.n	8001c80 <_svfiprintf_r+0x104>
 8001c54:	9309      	str	r3, [sp, #36]	; 0x24
 8001c56:	e013      	b.n	8001c80 <_svfiprintf_r+0x104>
 8001c58:	2b25      	cmp	r3, #37	; 0x25
 8001c5a:	d0b5      	beq.n	8001bc8 <_svfiprintf_r+0x4c>
 8001c5c:	3401      	adds	r4, #1
 8001c5e:	e7b0      	b.n	8001bc2 <_svfiprintf_r+0x46>
 8001c60:	2301      	movs	r3, #1
 8001c62:	1b80      	subs	r0, r0, r6
 8001c64:	4083      	lsls	r3, r0
 8001c66:	6829      	ldr	r1, [r5, #0]
 8001c68:	0014      	movs	r4, r2
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	602b      	str	r3, [r5, #0]
 8001c6e:	e7cd      	b.n	8001c0c <_svfiprintf_r+0x90>
 8001c70:	9b05      	ldr	r3, [sp, #20]
 8001c72:	1d18      	adds	r0, r3, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	9005      	str	r0, [sp, #20]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db39      	blt.n	8001cf0 <_svfiprintf_r+0x174>
 8001c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c7e:	0014      	movs	r4, r2
 8001c80:	7823      	ldrb	r3, [r4, #0]
 8001c82:	2b2e      	cmp	r3, #46	; 0x2e
 8001c84:	d10b      	bne.n	8001c9e <_svfiprintf_r+0x122>
 8001c86:	7863      	ldrb	r3, [r4, #1]
 8001c88:	1c62      	adds	r2, r4, #1
 8001c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c8c:	d13e      	bne.n	8001d0c <_svfiprintf_r+0x190>
 8001c8e:	9b05      	ldr	r3, [sp, #20]
 8001c90:	3402      	adds	r4, #2
 8001c92:	1d1a      	adds	r2, r3, #4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	9205      	str	r2, [sp, #20]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db34      	blt.n	8001d06 <_svfiprintf_r+0x18a>
 8001c9c:	9307      	str	r3, [sp, #28]
 8001c9e:	4e35      	ldr	r6, [pc, #212]	; (8001d74 <_svfiprintf_r+0x1f8>)
 8001ca0:	7821      	ldrb	r1, [r4, #0]
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	0030      	movs	r0, r6
 8001ca6:	f000 f9f5 	bl	8002094 <memchr>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d006      	beq.n	8001cbc <_svfiprintf_r+0x140>
 8001cae:	2340      	movs	r3, #64	; 0x40
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	4083      	lsls	r3, r0
 8001cb4:	682a      	ldr	r2, [r5, #0]
 8001cb6:	3401      	adds	r4, #1
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	602b      	str	r3, [r5, #0]
 8001cbc:	7821      	ldrb	r1, [r4, #0]
 8001cbe:	2206      	movs	r2, #6
 8001cc0:	482d      	ldr	r0, [pc, #180]	; (8001d78 <_svfiprintf_r+0x1fc>)
 8001cc2:	1c66      	adds	r6, r4, #1
 8001cc4:	7629      	strb	r1, [r5, #24]
 8001cc6:	f000 f9e5 	bl	8002094 <memchr>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d046      	beq.n	8001d5c <_svfiprintf_r+0x1e0>
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <_svfiprintf_r+0x200>)
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d12f      	bne.n	8001d34 <_svfiprintf_r+0x1b8>
 8001cd4:	6829      	ldr	r1, [r5, #0]
 8001cd6:	9b05      	ldr	r3, [sp, #20]
 8001cd8:	2207      	movs	r2, #7
 8001cda:	05c9      	lsls	r1, r1, #23
 8001cdc:	d528      	bpl.n	8001d30 <_svfiprintf_r+0x1b4>
 8001cde:	189b      	adds	r3, r3, r2
 8001ce0:	4393      	bics	r3, r2
 8001ce2:	3308      	adds	r3, #8
 8001ce4:	9305      	str	r3, [sp, #20]
 8001ce6:	696b      	ldr	r3, [r5, #20]
 8001ce8:	9a03      	ldr	r2, [sp, #12]
 8001cea:	189b      	adds	r3, r3, r2
 8001cec:	616b      	str	r3, [r5, #20]
 8001cee:	e767      	b.n	8001bc0 <_svfiprintf_r+0x44>
 8001cf0:	425b      	negs	r3, r3
 8001cf2:	60eb      	str	r3, [r5, #12]
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	602b      	str	r3, [r5, #0]
 8001cfa:	e7c0      	b.n	8001c7e <_svfiprintf_r+0x102>
 8001cfc:	434b      	muls	r3, r1
 8001cfe:	3401      	adds	r4, #1
 8001d00:	189b      	adds	r3, r3, r2
 8001d02:	2001      	movs	r0, #1
 8001d04:	e7a0      	b.n	8001c48 <_svfiprintf_r+0xcc>
 8001d06:	2301      	movs	r3, #1
 8001d08:	425b      	negs	r3, r3
 8001d0a:	e7c7      	b.n	8001c9c <_svfiprintf_r+0x120>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	0014      	movs	r4, r2
 8001d10:	200a      	movs	r0, #10
 8001d12:	001a      	movs	r2, r3
 8001d14:	606b      	str	r3, [r5, #4]
 8001d16:	7821      	ldrb	r1, [r4, #0]
 8001d18:	3930      	subs	r1, #48	; 0x30
 8001d1a:	2909      	cmp	r1, #9
 8001d1c:	d903      	bls.n	8001d26 <_svfiprintf_r+0x1aa>
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0bd      	beq.n	8001c9e <_svfiprintf_r+0x122>
 8001d22:	9207      	str	r2, [sp, #28]
 8001d24:	e7bb      	b.n	8001c9e <_svfiprintf_r+0x122>
 8001d26:	4342      	muls	r2, r0
 8001d28:	3401      	adds	r4, #1
 8001d2a:	1852      	adds	r2, r2, r1
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e7f2      	b.n	8001d16 <_svfiprintf_r+0x19a>
 8001d30:	3307      	adds	r3, #7
 8001d32:	e7d5      	b.n	8001ce0 <_svfiprintf_r+0x164>
 8001d34:	ab05      	add	r3, sp, #20
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	003a      	movs	r2, r7
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <_svfiprintf_r+0x204>)
 8001d3c:	0029      	movs	r1, r5
 8001d3e:	9802      	ldr	r0, [sp, #8]
 8001d40:	e000      	b.n	8001d44 <_svfiprintf_r+0x1c8>
 8001d42:	bf00      	nop
 8001d44:	9003      	str	r0, [sp, #12]
 8001d46:	9b03      	ldr	r3, [sp, #12]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	d1cc      	bne.n	8001ce6 <_svfiprintf_r+0x16a>
 8001d4c:	89bb      	ldrh	r3, [r7, #12]
 8001d4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001d50:	065b      	lsls	r3, r3, #25
 8001d52:	d400      	bmi.n	8001d56 <_svfiprintf_r+0x1da>
 8001d54:	e729      	b.n	8001baa <_svfiprintf_r+0x2e>
 8001d56:	2001      	movs	r0, #1
 8001d58:	4240      	negs	r0, r0
 8001d5a:	e726      	b.n	8001baa <_svfiprintf_r+0x2e>
 8001d5c:	ab05      	add	r3, sp, #20
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	003a      	movs	r2, r7
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <_svfiprintf_r+0x204>)
 8001d64:	0029      	movs	r1, r5
 8001d66:	9802      	ldr	r0, [sp, #8]
 8001d68:	f000 f87a 	bl	8001e60 <_printf_i>
 8001d6c:	e7ea      	b.n	8001d44 <_svfiprintf_r+0x1c8>
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	08002366 	.word	0x08002366
 8001d74:	0800236c 	.word	0x0800236c
 8001d78:	08002370 	.word	0x08002370
 8001d7c:	00000000 	.word	0x00000000
 8001d80:	08001ab9 	.word	0x08001ab9

08001d84 <_printf_common>:
 8001d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d86:	0015      	movs	r5, r2
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	688a      	ldr	r2, [r1, #8]
 8001d8c:	690b      	ldr	r3, [r1, #16]
 8001d8e:	9000      	str	r0, [sp, #0]
 8001d90:	000c      	movs	r4, r1
 8001d92:	4293      	cmp	r3, r2
 8001d94:	da00      	bge.n	8001d98 <_printf_common+0x14>
 8001d96:	0013      	movs	r3, r2
 8001d98:	0022      	movs	r2, r4
 8001d9a:	602b      	str	r3, [r5, #0]
 8001d9c:	3243      	adds	r2, #67	; 0x43
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	2a00      	cmp	r2, #0
 8001da2:	d001      	beq.n	8001da8 <_printf_common+0x24>
 8001da4:	3301      	adds	r3, #1
 8001da6:	602b      	str	r3, [r5, #0]
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	069b      	lsls	r3, r3, #26
 8001dac:	d502      	bpl.n	8001db4 <_printf_common+0x30>
 8001dae:	682b      	ldr	r3, [r5, #0]
 8001db0:	3302      	adds	r3, #2
 8001db2:	602b      	str	r3, [r5, #0]
 8001db4:	2706      	movs	r7, #6
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	401f      	ands	r7, r3
 8001dba:	d027      	beq.n	8001e0c <_printf_common+0x88>
 8001dbc:	0023      	movs	r3, r4
 8001dbe:	3343      	adds	r3, #67	; 0x43
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	1e5a      	subs	r2, r3, #1
 8001dc4:	4193      	sbcs	r3, r2
 8001dc6:	6822      	ldr	r2, [r4, #0]
 8001dc8:	0692      	lsls	r2, r2, #26
 8001dca:	d430      	bmi.n	8001e2e <_printf_common+0xaa>
 8001dcc:	0022      	movs	r2, r4
 8001dce:	9901      	ldr	r1, [sp, #4]
 8001dd0:	3243      	adds	r2, #67	; 0x43
 8001dd2:	9800      	ldr	r0, [sp, #0]
 8001dd4:	9e08      	ldr	r6, [sp, #32]
 8001dd6:	47b0      	blx	r6
 8001dd8:	1c43      	adds	r3, r0, #1
 8001dda:	d025      	beq.n	8001e28 <_printf_common+0xa4>
 8001ddc:	2306      	movs	r3, #6
 8001dde:	6820      	ldr	r0, [r4, #0]
 8001de0:	682a      	ldr	r2, [r5, #0]
 8001de2:	68e1      	ldr	r1, [r4, #12]
 8001de4:	4003      	ands	r3, r0
 8001de6:	2500      	movs	r5, #0
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d103      	bne.n	8001df4 <_printf_common+0x70>
 8001dec:	1a8d      	subs	r5, r1, r2
 8001dee:	43eb      	mvns	r3, r5
 8001df0:	17db      	asrs	r3, r3, #31
 8001df2:	401d      	ands	r5, r3
 8001df4:	68a3      	ldr	r3, [r4, #8]
 8001df6:	6922      	ldr	r2, [r4, #16]
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	dd01      	ble.n	8001e00 <_printf_common+0x7c>
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	18ed      	adds	r5, r5, r3
 8001e00:	2700      	movs	r7, #0
 8001e02:	42bd      	cmp	r5, r7
 8001e04:	d120      	bne.n	8001e48 <_printf_common+0xc4>
 8001e06:	2000      	movs	r0, #0
 8001e08:	e010      	b.n	8001e2c <_printf_common+0xa8>
 8001e0a:	3701      	adds	r7, #1
 8001e0c:	68e3      	ldr	r3, [r4, #12]
 8001e0e:	682a      	ldr	r2, [r5, #0]
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	429f      	cmp	r7, r3
 8001e14:	dad2      	bge.n	8001dbc <_printf_common+0x38>
 8001e16:	0022      	movs	r2, r4
 8001e18:	2301      	movs	r3, #1
 8001e1a:	3219      	adds	r2, #25
 8001e1c:	9901      	ldr	r1, [sp, #4]
 8001e1e:	9800      	ldr	r0, [sp, #0]
 8001e20:	9e08      	ldr	r6, [sp, #32]
 8001e22:	47b0      	blx	r6
 8001e24:	1c43      	adds	r3, r0, #1
 8001e26:	d1f0      	bne.n	8001e0a <_printf_common+0x86>
 8001e28:	2001      	movs	r0, #1
 8001e2a:	4240      	negs	r0, r0
 8001e2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001e2e:	2030      	movs	r0, #48	; 0x30
 8001e30:	18e1      	adds	r1, r4, r3
 8001e32:	3143      	adds	r1, #67	; 0x43
 8001e34:	7008      	strb	r0, [r1, #0]
 8001e36:	0021      	movs	r1, r4
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	3145      	adds	r1, #69	; 0x45
 8001e3c:	7809      	ldrb	r1, [r1, #0]
 8001e3e:	18a2      	adds	r2, r4, r2
 8001e40:	3243      	adds	r2, #67	; 0x43
 8001e42:	3302      	adds	r3, #2
 8001e44:	7011      	strb	r1, [r2, #0]
 8001e46:	e7c1      	b.n	8001dcc <_printf_common+0x48>
 8001e48:	0022      	movs	r2, r4
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	321a      	adds	r2, #26
 8001e4e:	9901      	ldr	r1, [sp, #4]
 8001e50:	9800      	ldr	r0, [sp, #0]
 8001e52:	9e08      	ldr	r6, [sp, #32]
 8001e54:	47b0      	blx	r6
 8001e56:	1c43      	adds	r3, r0, #1
 8001e58:	d0e6      	beq.n	8001e28 <_printf_common+0xa4>
 8001e5a:	3701      	adds	r7, #1
 8001e5c:	e7d1      	b.n	8001e02 <_printf_common+0x7e>
	...

08001e60 <_printf_i>:
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	b08b      	sub	sp, #44	; 0x2c
 8001e64:	9206      	str	r2, [sp, #24]
 8001e66:	000a      	movs	r2, r1
 8001e68:	3243      	adds	r2, #67	; 0x43
 8001e6a:	9307      	str	r3, [sp, #28]
 8001e6c:	9005      	str	r0, [sp, #20]
 8001e6e:	9204      	str	r2, [sp, #16]
 8001e70:	7e0a      	ldrb	r2, [r1, #24]
 8001e72:	000c      	movs	r4, r1
 8001e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001e76:	2a6e      	cmp	r2, #110	; 0x6e
 8001e78:	d100      	bne.n	8001e7c <_printf_i+0x1c>
 8001e7a:	e08f      	b.n	8001f9c <_printf_i+0x13c>
 8001e7c:	d817      	bhi.n	8001eae <_printf_i+0x4e>
 8001e7e:	2a63      	cmp	r2, #99	; 0x63
 8001e80:	d02c      	beq.n	8001edc <_printf_i+0x7c>
 8001e82:	d808      	bhi.n	8001e96 <_printf_i+0x36>
 8001e84:	2a00      	cmp	r2, #0
 8001e86:	d100      	bne.n	8001e8a <_printf_i+0x2a>
 8001e88:	e099      	b.n	8001fbe <_printf_i+0x15e>
 8001e8a:	2a58      	cmp	r2, #88	; 0x58
 8001e8c:	d054      	beq.n	8001f38 <_printf_i+0xd8>
 8001e8e:	0026      	movs	r6, r4
 8001e90:	3642      	adds	r6, #66	; 0x42
 8001e92:	7032      	strb	r2, [r6, #0]
 8001e94:	e029      	b.n	8001eea <_printf_i+0x8a>
 8001e96:	2a64      	cmp	r2, #100	; 0x64
 8001e98:	d001      	beq.n	8001e9e <_printf_i+0x3e>
 8001e9a:	2a69      	cmp	r2, #105	; 0x69
 8001e9c:	d1f7      	bne.n	8001e8e <_printf_i+0x2e>
 8001e9e:	6821      	ldr	r1, [r4, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	0608      	lsls	r0, r1, #24
 8001ea4:	d523      	bpl.n	8001eee <_printf_i+0x8e>
 8001ea6:	1d11      	adds	r1, r2, #4
 8001ea8:	6019      	str	r1, [r3, #0]
 8001eaa:	6815      	ldr	r5, [r2, #0]
 8001eac:	e025      	b.n	8001efa <_printf_i+0x9a>
 8001eae:	2a73      	cmp	r2, #115	; 0x73
 8001eb0:	d100      	bne.n	8001eb4 <_printf_i+0x54>
 8001eb2:	e088      	b.n	8001fc6 <_printf_i+0x166>
 8001eb4:	d808      	bhi.n	8001ec8 <_printf_i+0x68>
 8001eb6:	2a6f      	cmp	r2, #111	; 0x6f
 8001eb8:	d029      	beq.n	8001f0e <_printf_i+0xae>
 8001eba:	2a70      	cmp	r2, #112	; 0x70
 8001ebc:	d1e7      	bne.n	8001e8e <_printf_i+0x2e>
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	6809      	ldr	r1, [r1, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	6022      	str	r2, [r4, #0]
 8001ec6:	e003      	b.n	8001ed0 <_printf_i+0x70>
 8001ec8:	2a75      	cmp	r2, #117	; 0x75
 8001eca:	d020      	beq.n	8001f0e <_printf_i+0xae>
 8001ecc:	2a78      	cmp	r2, #120	; 0x78
 8001ece:	d1de      	bne.n	8001e8e <_printf_i+0x2e>
 8001ed0:	0022      	movs	r2, r4
 8001ed2:	2178      	movs	r1, #120	; 0x78
 8001ed4:	3245      	adds	r2, #69	; 0x45
 8001ed6:	7011      	strb	r1, [r2, #0]
 8001ed8:	4a6c      	ldr	r2, [pc, #432]	; (800208c <_printf_i+0x22c>)
 8001eda:	e030      	b.n	8001f3e <_printf_i+0xde>
 8001edc:	000e      	movs	r6, r1
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	3642      	adds	r6, #66	; 0x42
 8001ee2:	1d11      	adds	r1, r2, #4
 8001ee4:	6019      	str	r1, [r3, #0]
 8001ee6:	6813      	ldr	r3, [r2, #0]
 8001ee8:	7033      	strb	r3, [r6, #0]
 8001eea:	2301      	movs	r3, #1
 8001eec:	e079      	b.n	8001fe2 <_printf_i+0x182>
 8001eee:	0649      	lsls	r1, r1, #25
 8001ef0:	d5d9      	bpl.n	8001ea6 <_printf_i+0x46>
 8001ef2:	1d11      	adds	r1, r2, #4
 8001ef4:	6019      	str	r1, [r3, #0]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	5ed5      	ldrsh	r5, [r2, r3]
 8001efa:	2d00      	cmp	r5, #0
 8001efc:	da03      	bge.n	8001f06 <_printf_i+0xa6>
 8001efe:	232d      	movs	r3, #45	; 0x2d
 8001f00:	9a04      	ldr	r2, [sp, #16]
 8001f02:	426d      	negs	r5, r5
 8001f04:	7013      	strb	r3, [r2, #0]
 8001f06:	4b62      	ldr	r3, [pc, #392]	; (8002090 <_printf_i+0x230>)
 8001f08:	270a      	movs	r7, #10
 8001f0a:	9303      	str	r3, [sp, #12]
 8001f0c:	e02f      	b.n	8001f6e <_printf_i+0x10e>
 8001f0e:	6820      	ldr	r0, [r4, #0]
 8001f10:	6819      	ldr	r1, [r3, #0]
 8001f12:	0605      	lsls	r5, r0, #24
 8001f14:	d503      	bpl.n	8001f1e <_printf_i+0xbe>
 8001f16:	1d08      	adds	r0, r1, #4
 8001f18:	6018      	str	r0, [r3, #0]
 8001f1a:	680d      	ldr	r5, [r1, #0]
 8001f1c:	e005      	b.n	8001f2a <_printf_i+0xca>
 8001f1e:	0640      	lsls	r0, r0, #25
 8001f20:	d5f9      	bpl.n	8001f16 <_printf_i+0xb6>
 8001f22:	680d      	ldr	r5, [r1, #0]
 8001f24:	1d08      	adds	r0, r1, #4
 8001f26:	6018      	str	r0, [r3, #0]
 8001f28:	b2ad      	uxth	r5, r5
 8001f2a:	4b59      	ldr	r3, [pc, #356]	; (8002090 <_printf_i+0x230>)
 8001f2c:	2708      	movs	r7, #8
 8001f2e:	9303      	str	r3, [sp, #12]
 8001f30:	2a6f      	cmp	r2, #111	; 0x6f
 8001f32:	d018      	beq.n	8001f66 <_printf_i+0x106>
 8001f34:	270a      	movs	r7, #10
 8001f36:	e016      	b.n	8001f66 <_printf_i+0x106>
 8001f38:	3145      	adds	r1, #69	; 0x45
 8001f3a:	700a      	strb	r2, [r1, #0]
 8001f3c:	4a54      	ldr	r2, [pc, #336]	; (8002090 <_printf_i+0x230>)
 8001f3e:	9203      	str	r2, [sp, #12]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	6821      	ldr	r1, [r4, #0]
 8001f44:	1d10      	adds	r0, r2, #4
 8001f46:	6018      	str	r0, [r3, #0]
 8001f48:	6815      	ldr	r5, [r2, #0]
 8001f4a:	0608      	lsls	r0, r1, #24
 8001f4c:	d522      	bpl.n	8001f94 <_printf_i+0x134>
 8001f4e:	07cb      	lsls	r3, r1, #31
 8001f50:	d502      	bpl.n	8001f58 <_printf_i+0xf8>
 8001f52:	2320      	movs	r3, #32
 8001f54:	4319      	orrs	r1, r3
 8001f56:	6021      	str	r1, [r4, #0]
 8001f58:	2710      	movs	r7, #16
 8001f5a:	2d00      	cmp	r5, #0
 8001f5c:	d103      	bne.n	8001f66 <_printf_i+0x106>
 8001f5e:	2320      	movs	r3, #32
 8001f60:	6822      	ldr	r2, [r4, #0]
 8001f62:	439a      	bics	r2, r3
 8001f64:	6022      	str	r2, [r4, #0]
 8001f66:	0023      	movs	r3, r4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	3343      	adds	r3, #67	; 0x43
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	6863      	ldr	r3, [r4, #4]
 8001f70:	60a3      	str	r3, [r4, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db5c      	blt.n	8002030 <_printf_i+0x1d0>
 8001f76:	2204      	movs	r2, #4
 8001f78:	6821      	ldr	r1, [r4, #0]
 8001f7a:	4391      	bics	r1, r2
 8001f7c:	6021      	str	r1, [r4, #0]
 8001f7e:	2d00      	cmp	r5, #0
 8001f80:	d158      	bne.n	8002034 <_printf_i+0x1d4>
 8001f82:	9e04      	ldr	r6, [sp, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d064      	beq.n	8002052 <_printf_i+0x1f2>
 8001f88:	0026      	movs	r6, r4
 8001f8a:	9b03      	ldr	r3, [sp, #12]
 8001f8c:	3642      	adds	r6, #66	; 0x42
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	7033      	strb	r3, [r6, #0]
 8001f92:	e05e      	b.n	8002052 <_printf_i+0x1f2>
 8001f94:	0648      	lsls	r0, r1, #25
 8001f96:	d5da      	bpl.n	8001f4e <_printf_i+0xee>
 8001f98:	b2ad      	uxth	r5, r5
 8001f9a:	e7d8      	b.n	8001f4e <_printf_i+0xee>
 8001f9c:	6809      	ldr	r1, [r1, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	0608      	lsls	r0, r1, #24
 8001fa2:	d505      	bpl.n	8001fb0 <_printf_i+0x150>
 8001fa4:	1d11      	adds	r1, r2, #4
 8001fa6:	6019      	str	r1, [r3, #0]
 8001fa8:	6813      	ldr	r3, [r2, #0]
 8001faa:	6962      	ldr	r2, [r4, #20]
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e006      	b.n	8001fbe <_printf_i+0x15e>
 8001fb0:	0649      	lsls	r1, r1, #25
 8001fb2:	d5f7      	bpl.n	8001fa4 <_printf_i+0x144>
 8001fb4:	1d11      	adds	r1, r2, #4
 8001fb6:	6019      	str	r1, [r3, #0]
 8001fb8:	6813      	ldr	r3, [r2, #0]
 8001fba:	8aa2      	ldrh	r2, [r4, #20]
 8001fbc:	801a      	strh	r2, [r3, #0]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	9e04      	ldr	r6, [sp, #16]
 8001fc2:	6123      	str	r3, [r4, #16]
 8001fc4:	e054      	b.n	8002070 <_printf_i+0x210>
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	1d11      	adds	r1, r2, #4
 8001fca:	6019      	str	r1, [r3, #0]
 8001fcc:	6816      	ldr	r6, [r2, #0]
 8001fce:	2100      	movs	r1, #0
 8001fd0:	6862      	ldr	r2, [r4, #4]
 8001fd2:	0030      	movs	r0, r6
 8001fd4:	f000 f85e 	bl	8002094 <memchr>
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	d001      	beq.n	8001fe0 <_printf_i+0x180>
 8001fdc:	1b80      	subs	r0, r0, r6
 8001fde:	6060      	str	r0, [r4, #4]
 8001fe0:	6863      	ldr	r3, [r4, #4]
 8001fe2:	6123      	str	r3, [r4, #16]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9a04      	ldr	r2, [sp, #16]
 8001fe8:	7013      	strb	r3, [r2, #0]
 8001fea:	e041      	b.n	8002070 <_printf_i+0x210>
 8001fec:	6923      	ldr	r3, [r4, #16]
 8001fee:	0032      	movs	r2, r6
 8001ff0:	9906      	ldr	r1, [sp, #24]
 8001ff2:	9805      	ldr	r0, [sp, #20]
 8001ff4:	9d07      	ldr	r5, [sp, #28]
 8001ff6:	47a8      	blx	r5
 8001ff8:	1c43      	adds	r3, r0, #1
 8001ffa:	d043      	beq.n	8002084 <_printf_i+0x224>
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	2500      	movs	r5, #0
 8002000:	079b      	lsls	r3, r3, #30
 8002002:	d40f      	bmi.n	8002024 <_printf_i+0x1c4>
 8002004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002006:	68e0      	ldr	r0, [r4, #12]
 8002008:	4298      	cmp	r0, r3
 800200a:	da3d      	bge.n	8002088 <_printf_i+0x228>
 800200c:	0018      	movs	r0, r3
 800200e:	e03b      	b.n	8002088 <_printf_i+0x228>
 8002010:	0022      	movs	r2, r4
 8002012:	2301      	movs	r3, #1
 8002014:	3219      	adds	r2, #25
 8002016:	9906      	ldr	r1, [sp, #24]
 8002018:	9805      	ldr	r0, [sp, #20]
 800201a:	9e07      	ldr	r6, [sp, #28]
 800201c:	47b0      	blx	r6
 800201e:	1c43      	adds	r3, r0, #1
 8002020:	d030      	beq.n	8002084 <_printf_i+0x224>
 8002022:	3501      	adds	r5, #1
 8002024:	68e3      	ldr	r3, [r4, #12]
 8002026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	429d      	cmp	r5, r3
 800202c:	dbf0      	blt.n	8002010 <_printf_i+0x1b0>
 800202e:	e7e9      	b.n	8002004 <_printf_i+0x1a4>
 8002030:	2d00      	cmp	r5, #0
 8002032:	d0a9      	beq.n	8001f88 <_printf_i+0x128>
 8002034:	9e04      	ldr	r6, [sp, #16]
 8002036:	0028      	movs	r0, r5
 8002038:	0039      	movs	r1, r7
 800203a:	f7fe f8eb 	bl	8000214 <__aeabi_uidivmod>
 800203e:	9b03      	ldr	r3, [sp, #12]
 8002040:	3e01      	subs	r6, #1
 8002042:	5c5b      	ldrb	r3, [r3, r1]
 8002044:	0028      	movs	r0, r5
 8002046:	7033      	strb	r3, [r6, #0]
 8002048:	0039      	movs	r1, r7
 800204a:	f7fe f85d 	bl	8000108 <__udivsi3>
 800204e:	1e05      	subs	r5, r0, #0
 8002050:	d1f1      	bne.n	8002036 <_printf_i+0x1d6>
 8002052:	2f08      	cmp	r7, #8
 8002054:	d109      	bne.n	800206a <_printf_i+0x20a>
 8002056:	6823      	ldr	r3, [r4, #0]
 8002058:	07db      	lsls	r3, r3, #31
 800205a:	d506      	bpl.n	800206a <_printf_i+0x20a>
 800205c:	6863      	ldr	r3, [r4, #4]
 800205e:	6922      	ldr	r2, [r4, #16]
 8002060:	4293      	cmp	r3, r2
 8002062:	dc02      	bgt.n	800206a <_printf_i+0x20a>
 8002064:	2330      	movs	r3, #48	; 0x30
 8002066:	3e01      	subs	r6, #1
 8002068:	7033      	strb	r3, [r6, #0]
 800206a:	9b04      	ldr	r3, [sp, #16]
 800206c:	1b9b      	subs	r3, r3, r6
 800206e:	6123      	str	r3, [r4, #16]
 8002070:	9b07      	ldr	r3, [sp, #28]
 8002072:	aa09      	add	r2, sp, #36	; 0x24
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	0021      	movs	r1, r4
 8002078:	9b06      	ldr	r3, [sp, #24]
 800207a:	9805      	ldr	r0, [sp, #20]
 800207c:	f7ff fe82 	bl	8001d84 <_printf_common>
 8002080:	1c43      	adds	r3, r0, #1
 8002082:	d1b3      	bne.n	8001fec <_printf_i+0x18c>
 8002084:	2001      	movs	r0, #1
 8002086:	4240      	negs	r0, r0
 8002088:	b00b      	add	sp, #44	; 0x2c
 800208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208c:	08002388 	.word	0x08002388
 8002090:	08002377 	.word	0x08002377

08002094 <memchr>:
 8002094:	b2c9      	uxtb	r1, r1
 8002096:	1882      	adds	r2, r0, r2
 8002098:	4290      	cmp	r0, r2
 800209a:	d101      	bne.n	80020a0 <memchr+0xc>
 800209c:	2000      	movs	r0, #0
 800209e:	4770      	bx	lr
 80020a0:	7803      	ldrb	r3, [r0, #0]
 80020a2:	428b      	cmp	r3, r1
 80020a4:	d0fb      	beq.n	800209e <memchr+0xa>
 80020a6:	3001      	adds	r0, #1
 80020a8:	e7f6      	b.n	8002098 <memchr+0x4>

080020aa <memmove>:
 80020aa:	b510      	push	{r4, lr}
 80020ac:	4288      	cmp	r0, r1
 80020ae:	d902      	bls.n	80020b6 <memmove+0xc>
 80020b0:	188b      	adds	r3, r1, r2
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d308      	bcc.n	80020c8 <memmove+0x1e>
 80020b6:	2300      	movs	r3, #0
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d007      	beq.n	80020cc <memmove+0x22>
 80020bc:	5ccc      	ldrb	r4, [r1, r3]
 80020be:	54c4      	strb	r4, [r0, r3]
 80020c0:	3301      	adds	r3, #1
 80020c2:	e7f9      	b.n	80020b8 <memmove+0xe>
 80020c4:	5c8b      	ldrb	r3, [r1, r2]
 80020c6:	5483      	strb	r3, [r0, r2]
 80020c8:	3a01      	subs	r2, #1
 80020ca:	d2fb      	bcs.n	80020c4 <memmove+0x1a>
 80020cc:	bd10      	pop	{r4, pc}
	...

080020d0 <_free_r>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	0005      	movs	r5, r0
 80020d4:	2900      	cmp	r1, #0
 80020d6:	d010      	beq.n	80020fa <_free_r+0x2a>
 80020d8:	1f0c      	subs	r4, r1, #4
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	da00      	bge.n	80020e2 <_free_r+0x12>
 80020e0:	18e4      	adds	r4, r4, r3
 80020e2:	0028      	movs	r0, r5
 80020e4:	f000 f8d4 	bl	8002290 <__malloc_lock>
 80020e8:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <_free_r+0x90>)
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <_free_r+0x2c>
 80020f0:	6063      	str	r3, [r4, #4]
 80020f2:	6014      	str	r4, [r2, #0]
 80020f4:	0028      	movs	r0, r5
 80020f6:	f000 f8cc 	bl	8002292 <__malloc_unlock>
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	42a3      	cmp	r3, r4
 80020fe:	d909      	bls.n	8002114 <_free_r+0x44>
 8002100:	6821      	ldr	r1, [r4, #0]
 8002102:	1860      	adds	r0, r4, r1
 8002104:	4283      	cmp	r3, r0
 8002106:	d1f3      	bne.n	80020f0 <_free_r+0x20>
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	1841      	adds	r1, r0, r1
 800210e:	6021      	str	r1, [r4, #0]
 8002110:	e7ee      	b.n	80020f0 <_free_r+0x20>
 8002112:	0013      	movs	r3, r2
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	2a00      	cmp	r2, #0
 8002118:	d001      	beq.n	800211e <_free_r+0x4e>
 800211a:	42a2      	cmp	r2, r4
 800211c:	d9f9      	bls.n	8002112 <_free_r+0x42>
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	1858      	adds	r0, r3, r1
 8002122:	42a0      	cmp	r0, r4
 8002124:	d10b      	bne.n	800213e <_free_r+0x6e>
 8002126:	6820      	ldr	r0, [r4, #0]
 8002128:	1809      	adds	r1, r1, r0
 800212a:	1858      	adds	r0, r3, r1
 800212c:	6019      	str	r1, [r3, #0]
 800212e:	4282      	cmp	r2, r0
 8002130:	d1e0      	bne.n	80020f4 <_free_r+0x24>
 8002132:	6810      	ldr	r0, [r2, #0]
 8002134:	6852      	ldr	r2, [r2, #4]
 8002136:	1841      	adds	r1, r0, r1
 8002138:	6019      	str	r1, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	e7da      	b.n	80020f4 <_free_r+0x24>
 800213e:	42a0      	cmp	r0, r4
 8002140:	d902      	bls.n	8002148 <_free_r+0x78>
 8002142:	230c      	movs	r3, #12
 8002144:	602b      	str	r3, [r5, #0]
 8002146:	e7d5      	b.n	80020f4 <_free_r+0x24>
 8002148:	6821      	ldr	r1, [r4, #0]
 800214a:	1860      	adds	r0, r4, r1
 800214c:	4282      	cmp	r2, r0
 800214e:	d103      	bne.n	8002158 <_free_r+0x88>
 8002150:	6810      	ldr	r0, [r2, #0]
 8002152:	6852      	ldr	r2, [r2, #4]
 8002154:	1841      	adds	r1, r0, r1
 8002156:	6021      	str	r1, [r4, #0]
 8002158:	6062      	str	r2, [r4, #4]
 800215a:	605c      	str	r4, [r3, #4]
 800215c:	e7ca      	b.n	80020f4 <_free_r+0x24>
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	20000088 	.word	0x20000088

08002164 <_malloc_r>:
 8002164:	2303      	movs	r3, #3
 8002166:	b570      	push	{r4, r5, r6, lr}
 8002168:	1ccd      	adds	r5, r1, #3
 800216a:	439d      	bics	r5, r3
 800216c:	3508      	adds	r5, #8
 800216e:	0006      	movs	r6, r0
 8002170:	2d0c      	cmp	r5, #12
 8002172:	d21e      	bcs.n	80021b2 <_malloc_r+0x4e>
 8002174:	250c      	movs	r5, #12
 8002176:	42a9      	cmp	r1, r5
 8002178:	d81d      	bhi.n	80021b6 <_malloc_r+0x52>
 800217a:	0030      	movs	r0, r6
 800217c:	f000 f888 	bl	8002290 <__malloc_lock>
 8002180:	4a25      	ldr	r2, [pc, #148]	; (8002218 <_malloc_r+0xb4>)
 8002182:	6814      	ldr	r4, [r2, #0]
 8002184:	0021      	movs	r1, r4
 8002186:	2900      	cmp	r1, #0
 8002188:	d119      	bne.n	80021be <_malloc_r+0x5a>
 800218a:	4c24      	ldr	r4, [pc, #144]	; (800221c <_malloc_r+0xb8>)
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d103      	bne.n	800219a <_malloc_r+0x36>
 8002192:	0030      	movs	r0, r6
 8002194:	f000 f86a 	bl	800226c <_sbrk_r>
 8002198:	6020      	str	r0, [r4, #0]
 800219a:	0029      	movs	r1, r5
 800219c:	0030      	movs	r0, r6
 800219e:	f000 f865 	bl	800226c <_sbrk_r>
 80021a2:	1c43      	adds	r3, r0, #1
 80021a4:	d12c      	bne.n	8002200 <_malloc_r+0x9c>
 80021a6:	230c      	movs	r3, #12
 80021a8:	0030      	movs	r0, r6
 80021aa:	6033      	str	r3, [r6, #0]
 80021ac:	f000 f871 	bl	8002292 <__malloc_unlock>
 80021b0:	e003      	b.n	80021ba <_malloc_r+0x56>
 80021b2:	2d00      	cmp	r5, #0
 80021b4:	dadf      	bge.n	8002176 <_malloc_r+0x12>
 80021b6:	230c      	movs	r3, #12
 80021b8:	6033      	str	r3, [r6, #0]
 80021ba:	2000      	movs	r0, #0
 80021bc:	bd70      	pop	{r4, r5, r6, pc}
 80021be:	680b      	ldr	r3, [r1, #0]
 80021c0:	1b5b      	subs	r3, r3, r5
 80021c2:	d41a      	bmi.n	80021fa <_malloc_r+0x96>
 80021c4:	2b0b      	cmp	r3, #11
 80021c6:	d903      	bls.n	80021d0 <_malloc_r+0x6c>
 80021c8:	600b      	str	r3, [r1, #0]
 80021ca:	18cc      	adds	r4, r1, r3
 80021cc:	6025      	str	r5, [r4, #0]
 80021ce:	e003      	b.n	80021d8 <_malloc_r+0x74>
 80021d0:	428c      	cmp	r4, r1
 80021d2:	d10e      	bne.n	80021f2 <_malloc_r+0x8e>
 80021d4:	6863      	ldr	r3, [r4, #4]
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	0030      	movs	r0, r6
 80021da:	f000 f85a 	bl	8002292 <__malloc_unlock>
 80021de:	0020      	movs	r0, r4
 80021e0:	2207      	movs	r2, #7
 80021e2:	300b      	adds	r0, #11
 80021e4:	1d23      	adds	r3, r4, #4
 80021e6:	4390      	bics	r0, r2
 80021e8:	1ac3      	subs	r3, r0, r3
 80021ea:	d0e7      	beq.n	80021bc <_malloc_r+0x58>
 80021ec:	425a      	negs	r2, r3
 80021ee:	50e2      	str	r2, [r4, r3]
 80021f0:	e7e4      	b.n	80021bc <_malloc_r+0x58>
 80021f2:	684b      	ldr	r3, [r1, #4]
 80021f4:	6063      	str	r3, [r4, #4]
 80021f6:	000c      	movs	r4, r1
 80021f8:	e7ee      	b.n	80021d8 <_malloc_r+0x74>
 80021fa:	000c      	movs	r4, r1
 80021fc:	6849      	ldr	r1, [r1, #4]
 80021fe:	e7c2      	b.n	8002186 <_malloc_r+0x22>
 8002200:	2303      	movs	r3, #3
 8002202:	1cc4      	adds	r4, r0, #3
 8002204:	439c      	bics	r4, r3
 8002206:	42a0      	cmp	r0, r4
 8002208:	d0e0      	beq.n	80021cc <_malloc_r+0x68>
 800220a:	1a21      	subs	r1, r4, r0
 800220c:	0030      	movs	r0, r6
 800220e:	f000 f82d 	bl	800226c <_sbrk_r>
 8002212:	1c43      	adds	r3, r0, #1
 8002214:	d1da      	bne.n	80021cc <_malloc_r+0x68>
 8002216:	e7c6      	b.n	80021a6 <_malloc_r+0x42>
 8002218:	20000088 	.word	0x20000088
 800221c:	2000008c 	.word	0x2000008c

08002220 <_realloc_r>:
 8002220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002222:	0007      	movs	r7, r0
 8002224:	000d      	movs	r5, r1
 8002226:	0016      	movs	r6, r2
 8002228:	2900      	cmp	r1, #0
 800222a:	d105      	bne.n	8002238 <_realloc_r+0x18>
 800222c:	0011      	movs	r1, r2
 800222e:	f7ff ff99 	bl	8002164 <_malloc_r>
 8002232:	0004      	movs	r4, r0
 8002234:	0020      	movs	r0, r4
 8002236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002238:	2a00      	cmp	r2, #0
 800223a:	d103      	bne.n	8002244 <_realloc_r+0x24>
 800223c:	f7ff ff48 	bl	80020d0 <_free_r>
 8002240:	0034      	movs	r4, r6
 8002242:	e7f7      	b.n	8002234 <_realloc_r+0x14>
 8002244:	f000 f826 	bl	8002294 <_malloc_usable_size_r>
 8002248:	002c      	movs	r4, r5
 800224a:	4286      	cmp	r6, r0
 800224c:	d9f2      	bls.n	8002234 <_realloc_r+0x14>
 800224e:	0031      	movs	r1, r6
 8002250:	0038      	movs	r0, r7
 8002252:	f7ff ff87 	bl	8002164 <_malloc_r>
 8002256:	1e04      	subs	r4, r0, #0
 8002258:	d0ec      	beq.n	8002234 <_realloc_r+0x14>
 800225a:	0029      	movs	r1, r5
 800225c:	0032      	movs	r2, r6
 800225e:	f7ff fbff 	bl	8001a60 <memcpy>
 8002262:	0029      	movs	r1, r5
 8002264:	0038      	movs	r0, r7
 8002266:	f7ff ff33 	bl	80020d0 <_free_r>
 800226a:	e7e3      	b.n	8002234 <_realloc_r+0x14>

0800226c <_sbrk_r>:
 800226c:	2300      	movs	r3, #0
 800226e:	b570      	push	{r4, r5, r6, lr}
 8002270:	4c06      	ldr	r4, [pc, #24]	; (800228c <_sbrk_r+0x20>)
 8002272:	0005      	movs	r5, r0
 8002274:	0008      	movs	r0, r1
 8002276:	6023      	str	r3, [r4, #0]
 8002278:	f000 f814 	bl	80022a4 <_sbrk>
 800227c:	1c43      	adds	r3, r0, #1
 800227e:	d103      	bne.n	8002288 <_sbrk_r+0x1c>
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d000      	beq.n	8002288 <_sbrk_r+0x1c>
 8002286:	602b      	str	r3, [r5, #0]
 8002288:	bd70      	pop	{r4, r5, r6, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	20000118 	.word	0x20000118

08002290 <__malloc_lock>:
 8002290:	4770      	bx	lr

08002292 <__malloc_unlock>:
 8002292:	4770      	bx	lr

08002294 <_malloc_usable_size_r>:
 8002294:	1f0b      	subs	r3, r1, #4
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	1f18      	subs	r0, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	da01      	bge.n	80022a2 <_malloc_usable_size_r+0xe>
 800229e:	580b      	ldr	r3, [r1, r0]
 80022a0:	18c0      	adds	r0, r0, r3
 80022a2:	4770      	bx	lr

080022a4 <_sbrk>:
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <_sbrk+0x18>)
 80022a6:	0002      	movs	r2, r0
 80022a8:	6819      	ldr	r1, [r3, #0]
 80022aa:	2900      	cmp	r1, #0
 80022ac:	d101      	bne.n	80022b2 <_sbrk+0xe>
 80022ae:	4904      	ldr	r1, [pc, #16]	; (80022c0 <_sbrk+0x1c>)
 80022b0:	6019      	str	r1, [r3, #0]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	1882      	adds	r2, r0, r2
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	4770      	bx	lr
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	20000090 	.word	0x20000090
 80022c0:	2000011c 	.word	0x2000011c

080022c4 <_init>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr

080022d0 <_fini>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr
