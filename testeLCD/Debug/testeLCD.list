
testeLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001f18  08001f18  00011f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f70  08001f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  20000004  08001f7c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000070  08001f7c  00020070  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bfa4  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ac8  00000000  00000000  0002bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000650  00000000  00000000  0002da98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  0002e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000392f  00000000  00000000  0002e670  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001f71  00000000  00000000  00031f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00033f10  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000149c  00000000  00000000  00033f8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001f00 	.word	0x08001f00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001f00 	.word	0x08001f00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 fd41 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 fa84 	bl	800175c <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8e8 	bl	8000438 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8cb 	bl	800040c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d3f7      	bcc.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b5b0      	push	{r4, r5, r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b7f      	cmp	r3, #127	; 0x7f
 80002fc:	d932      	bls.n	8000364 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	4c2f      	ldr	r4, [pc, #188]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	001a      	movs	r2, r3
 8000306:	230f      	movs	r3, #15
 8000308:	4013      	ands	r3, r2
 800030a:	3b08      	subs	r3, #8
 800030c:	0899      	lsrs	r1, r3, #2
 800030e:	4a2b      	ldr	r2, [pc, #172]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	0018      	movs	r0, r3
 8000316:	230f      	movs	r3, #15
 8000318:	4003      	ands	r3, r0
 800031a:	3b08      	subs	r3, #8
 800031c:	089b      	lsrs	r3, r3, #2
 800031e:	3306      	adds	r3, #6
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	18d3      	adds	r3, r2, r3
 8000324:	3304      	adds	r3, #4
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	1dfa      	adds	r2, r7, #7
 800032a:	7812      	ldrb	r2, [r2, #0]
 800032c:	0010      	movs	r0, r2
 800032e:	2203      	movs	r2, #3
 8000330:	4002      	ands	r2, r0
 8000332:	00d2      	lsls	r2, r2, #3
 8000334:	20ff      	movs	r0, #255	; 0xff
 8000336:	4090      	lsls	r0, r2
 8000338:	0002      	movs	r2, r0
 800033a:	43d2      	mvns	r2, r2
 800033c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	019b      	lsls	r3, r3, #6
 8000342:	20ff      	movs	r0, #255	; 0xff
 8000344:	4018      	ands	r0, r3
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	001d      	movs	r5, r3
 800034c:	2303      	movs	r3, #3
 800034e:	402b      	ands	r3, r5
 8000350:	00db      	lsls	r3, r3, #3
 8000352:	4098      	lsls	r0, r3
 8000354:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000356:	431a      	orrs	r2, r3
 8000358:	1d8b      	adds	r3, r1, #6
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	18e3      	adds	r3, r4, r3
 800035e:	3304      	adds	r3, #4
 8000360:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000362:	e027      	b.n	80003b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	4c16      	ldr	r4, [pc, #88]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	4914      	ldr	r1, [pc, #80]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000370:	1dfa      	adds	r2, r7, #7
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	b252      	sxtb	r2, r2
 8000376:	0892      	lsrs	r2, r2, #2
 8000378:	32c0      	adds	r2, #192	; 0xc0
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	5852      	ldr	r2, [r2, r1]
 800037e:	1df9      	adds	r1, r7, #7
 8000380:	7809      	ldrb	r1, [r1, #0]
 8000382:	0008      	movs	r0, r1
 8000384:	2103      	movs	r1, #3
 8000386:	4001      	ands	r1, r0
 8000388:	00c9      	lsls	r1, r1, #3
 800038a:	20ff      	movs	r0, #255	; 0xff
 800038c:	4088      	lsls	r0, r1
 800038e:	0001      	movs	r1, r0
 8000390:	43c9      	mvns	r1, r1
 8000392:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000394:	683a      	ldr	r2, [r7, #0]
 8000396:	0192      	lsls	r2, r2, #6
 8000398:	20ff      	movs	r0, #255	; 0xff
 800039a:	4010      	ands	r0, r2
 800039c:	1dfa      	adds	r2, r7, #7
 800039e:	7812      	ldrb	r2, [r2, #0]
 80003a0:	0015      	movs	r5, r2
 80003a2:	2203      	movs	r2, #3
 80003a4:	402a      	ands	r2, r5
 80003a6:	00d2      	lsls	r2, r2, #3
 80003a8:	4090      	lsls	r0, r2
 80003aa:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ac:	430a      	orrs	r2, r1
 80003ae:	33c0      	adds	r3, #192	; 0xc0
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	511a      	str	r2, [r3, r4]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b002      	add	sp, #8
 80003ba:	bdb0      	pop	{r4, r5, r7, pc}
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <SysTick_Config+0x40>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d901      	bls.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e010      	b.n	80003fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SysTick_Config+0x44>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	3a01      	subs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	2103      	movs	r1, #3
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff7d 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SysTick_Config+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x44>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00ffffff 	.word	0x00ffffff
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	230f      	movs	r3, #15
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	230f      	movs	r3, #15
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b25b      	sxtb	r3, r3
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff ff5c 	bl	80002e8 <NVIC_SetPriority>
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b004      	add	sp, #16
 8000436:	bd80      	pop	{r7, pc}

08000438 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	0018      	movs	r0, r3
 8000444:	f7ff ffbe 	bl	80003c4 <SysTick_Config>
 8000448:	0003      	movs	r3, r0
}
 800044a:	0018      	movs	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b04      	cmp	r3, #4
 8000460:	d106      	bne.n	8000470 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000466:	6812      	ldr	r2, [r2, #0]
 8000468:	2104      	movs	r1, #4
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800046e:	e005      	b.n	800047c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000472:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000474:	6812      	ldr	r2, [r2, #0]
 8000476:	2104      	movs	r1, #4
 8000478:	438a      	bics	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}
 8000484:	e000e010 	.word	0xe000e010

08000488 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800048c:	f000 f803 	bl	8000496 <HAL_SYSTICK_Callback>
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004b6:	e14f      	b.n	8000758 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	4091      	lsls	r1, r2
 80004c2:	000a      	movs	r2, r1
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d100      	bne.n	80004d0 <HAL_GPIO_Init+0x30>
 80004ce:	e140      	b.n	8000752 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	d003      	beq.n	80004e0 <HAL_GPIO_Init+0x40>
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b12      	cmp	r3, #18
 80004de:	d123      	bne.n	8000528 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	08da      	lsrs	r2, r3, #3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3208      	adds	r2, #8
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	58d3      	ldr	r3, [r2, r3]
 80004ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	2207      	movs	r2, #7
 80004f2:	4013      	ands	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	220f      	movs	r2, #15
 80004f8:	409a      	lsls	r2, r3
 80004fa:	0013      	movs	r3, r2
 80004fc:	43da      	mvns	r2, r3
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	4013      	ands	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	691a      	ldr	r2, [r3, #16]
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	2107      	movs	r1, #7
 800050c:	400b      	ands	r3, r1
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	409a      	lsls	r2, r3
 8000512:	0013      	movs	r3, r2
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	4313      	orrs	r3, r2
 8000518:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	08da      	lsrs	r2, r3, #3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3208      	adds	r2, #8
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	6939      	ldr	r1, [r7, #16]
 8000526:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2203      	movs	r2, #3
 8000534:	409a      	lsls	r2, r3
 8000536:	0013      	movs	r3, r2
 8000538:	43da      	mvns	r2, r3
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2203      	movs	r2, #3
 8000546:	401a      	ands	r2, r3
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d00b      	beq.n	800057c <HAL_GPIO_Init+0xdc>
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d007      	beq.n	800057c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000570:	2b11      	cmp	r3, #17
 8000572:	d003      	beq.n	800057c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b12      	cmp	r3, #18
 800057a:	d130      	bne.n	80005de <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	2203      	movs	r2, #3
 8000588:	409a      	lsls	r2, r3
 800058a:	0013      	movs	r3, r2
 800058c:	43da      	mvns	r2, r3
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	68da      	ldr	r2, [r3, #12]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	409a      	lsls	r2, r3
 800059e:	0013      	movs	r3, r2
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005b2:	2201      	movs	r2, #1
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	409a      	lsls	r2, r3
 80005b8:	0013      	movs	r3, r2
 80005ba:	43da      	mvns	r2, r3
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4013      	ands	r3, r2
 80005c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	091b      	lsrs	r3, r3, #4
 80005c8:	2201      	movs	r2, #1
 80005ca:	401a      	ands	r2, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	409a      	lsls	r2, r3
 80005d0:	0013      	movs	r3, r2
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	2203      	movs	r2, #3
 80005ea:	409a      	lsls	r2, r3
 80005ec:	0013      	movs	r3, r2
 80005ee:	43da      	mvns	r2, r3
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	4013      	ands	r3, r2
 80005f4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	409a      	lsls	r2, r3
 8000600:	0013      	movs	r3, r2
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	4313      	orrs	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	055b      	lsls	r3, r3, #21
 8000616:	4013      	ands	r3, r2
 8000618:	d100      	bne.n	800061c <HAL_GPIO_Init+0x17c>
 800061a:	e09a      	b.n	8000752 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061c:	4b54      	ldr	r3, [pc, #336]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 800061e:	4a54      	ldr	r2, [pc, #336]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 8000620:	6992      	ldr	r2, [r2, #24]
 8000622:	2101      	movs	r1, #1
 8000624:	430a      	orrs	r2, r1
 8000626:	619a      	str	r2, [r3, #24]
 8000628:	4b51      	ldr	r3, [pc, #324]	; (8000770 <HAL_GPIO_Init+0x2d0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	2201      	movs	r2, #1
 800062e:	4013      	ands	r3, r2
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000634:	4a4f      	ldr	r2, [pc, #316]	; (8000774 <HAL_GPIO_Init+0x2d4>)
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	089b      	lsrs	r3, r3, #2
 800063a:	3302      	adds	r3, #2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	589b      	ldr	r3, [r3, r2]
 8000640:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	2203      	movs	r2, #3
 8000646:	4013      	ands	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	220f      	movs	r2, #15
 800064c:	409a      	lsls	r2, r3
 800064e:	0013      	movs	r3, r2
 8000650:	43da      	mvns	r2, r3
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	4013      	ands	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	2390      	movs	r3, #144	; 0x90
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	429a      	cmp	r2, r3
 8000660:	d013      	beq.n	800068a <HAL_GPIO_Init+0x1ea>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a44      	ldr	r2, [pc, #272]	; (8000778 <HAL_GPIO_Init+0x2d8>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d00d      	beq.n	8000686 <HAL_GPIO_Init+0x1e6>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a43      	ldr	r2, [pc, #268]	; (800077c <HAL_GPIO_Init+0x2dc>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d007      	beq.n	8000682 <HAL_GPIO_Init+0x1e2>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a42      	ldr	r2, [pc, #264]	; (8000780 <HAL_GPIO_Init+0x2e0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d101      	bne.n	800067e <HAL_GPIO_Init+0x1de>
 800067a:	2303      	movs	r3, #3
 800067c:	e006      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 800067e:	2305      	movs	r3, #5
 8000680:	e004      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 8000682:	2302      	movs	r3, #2
 8000684:	e002      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <HAL_GPIO_Init+0x1ec>
 800068a:	2300      	movs	r3, #0
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	2103      	movs	r1, #3
 8000690:	400a      	ands	r2, r1
 8000692:	0092      	lsls	r2, r2, #2
 8000694:	4093      	lsls	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4313      	orrs	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800069c:	4935      	ldr	r1, [pc, #212]	; (8000774 <HAL_GPIO_Init+0x2d4>)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	089b      	lsrs	r3, r3, #2
 80006a2:	3302      	adds	r3, #2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	43da      	mvns	r2, r3
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4013      	ands	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	025b      	lsls	r3, r3, #9
 80006c2:	4013      	ands	r3, r2
 80006c4:	d003      	beq.n	80006ce <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	43da      	mvns	r2, r3
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	029b      	lsls	r3, r3, #10
 80006ec:	4013      	ands	r3, r2
 80006ee:	d003      	beq.n	80006f8 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	43da      	mvns	r2, r3
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	4013      	ands	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	035b      	lsls	r3, r3, #13
 8000716:	4013      	ands	r3, r2
 8000718:	d003      	beq.n	8000722 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4313      	orrs	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	43da      	mvns	r2, r3
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	039b      	lsls	r3, r3, #14
 8000740:	4013      	ands	r3, r2
 8000742:	d003      	beq.n	800074c <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4313      	orrs	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_GPIO_Init+0x2e4>)
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	40da      	lsrs	r2, r3
 8000760:	1e13      	subs	r3, r2, #0
 8000762:	d000      	beq.n	8000766 <HAL_GPIO_Init+0x2c6>
 8000764:	e6a8      	b.n	80004b8 <HAL_GPIO_Init+0x18>
  } 
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b006      	add	sp, #24
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40021000 	.word	0x40021000
 8000774:	40010000 	.word	0x40010000
 8000778:	48000400 	.word	0x48000400
 800077c:	48000800 	.word	0x48000800
 8000780:	48000c00 	.word	0x48000c00
 8000784:	40010400 	.word	0x40010400

08000788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e081      	b.n	800089e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2241      	movs	r2, #65	; 0x41
 800079e:	5c9b      	ldrb	r3, [r3, r2]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d107      	bne.n	80007b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2240      	movs	r2, #64	; 0x40
 80007aa:	2100      	movs	r1, #0
 80007ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fabb 	bl	8001d2c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2241      	movs	r2, #65	; 0x41
 80007ba:	2124      	movs	r1, #36	; 0x24
 80007bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	2101      	movs	r1, #1
 80007ca:	438a      	bics	r2, r1
 80007cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	6852      	ldr	r2, [r2, #4]
 80007d6:	4934      	ldr	r1, [pc, #208]	; (80008a8 <HAL_I2C_Init+0x120>)
 80007d8:	400a      	ands	r2, r1
 80007da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	6812      	ldr	r2, [r2, #0]
 80007e4:	6892      	ldr	r2, [r2, #8]
 80007e6:	4931      	ldr	r1, [pc, #196]	; (80008ac <HAL_I2C_Init+0x124>)
 80007e8:	400a      	ands	r2, r1
 80007ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d108      	bne.n	8000806 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	6892      	ldr	r2, [r2, #8]
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0209      	lsls	r1, r1, #8
 8000800:	430a      	orrs	r2, r1
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	e007      	b.n	8000816 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	6892      	ldr	r2, [r2, #8]
 800080e:	2184      	movs	r1, #132	; 0x84
 8000810:	0209      	lsls	r1, r1, #8
 8000812:	430a      	orrs	r2, r1
 8000814:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	2b02      	cmp	r3, #2
 800081c:	d104      	bne.n	8000828 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	0112      	lsls	r2, r2, #4
 8000826:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	6852      	ldr	r2, [r2, #4]
 8000832:	491f      	ldr	r1, [pc, #124]	; (80008b0 <HAL_I2C_Init+0x128>)
 8000834:	430a      	orrs	r2, r1
 8000836:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	6812      	ldr	r2, [r2, #0]
 8000840:	68d2      	ldr	r2, [r2, #12]
 8000842:	491a      	ldr	r1, [pc, #104]	; (80008ac <HAL_I2C_Init+0x124>)
 8000844:	400a      	ands	r2, r1
 8000846:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	6911      	ldr	r1, [r2, #16]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	6952      	ldr	r2, [r2, #20]
 8000854:	4311      	orrs	r1, r2
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	6992      	ldr	r2, [r2, #24]
 800085a:	0212      	lsls	r2, r2, #8
 800085c:	430a      	orrs	r2, r1
 800085e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	69d1      	ldr	r1, [r2, #28]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	6a12      	ldr	r2, [r2, #32]
 800086c:	430a      	orrs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	6812      	ldr	r2, [r2, #0]
 800087a:	2101      	movs	r1, #1
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2241      	movs	r2, #65	; 0x41
 800088a:	2120      	movs	r1, #32
 800088c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2242      	movs	r2, #66	; 0x42
 8000898:	2100      	movs	r1, #0
 800089a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	f0ffffff 	.word	0xf0ffffff
 80008ac:	ffff7fff 	.word	0xffff7fff
 80008b0:	02008000 	.word	0x02008000

080008b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	0008      	movs	r0, r1
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	0019      	movs	r1, r3
 80008c2:	230a      	movs	r3, #10
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	1c02      	adds	r2, r0, #0
 80008c8:	801a      	strh	r2, [r3, #0]
 80008ca:	2308      	movs	r3, #8
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	1c0a      	adds	r2, r1, #0
 80008d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2241      	movs	r2, #65	; 0x41
 80008da:	5c9b      	ldrb	r3, [r3, r2]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b20      	cmp	r3, #32
 80008e0:	d000      	beq.n	80008e4 <HAL_I2C_Master_Transmit+0x30>
 80008e2:	e0f3      	b.n	8000acc <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2240      	movs	r2, #64	; 0x40
 80008e8:	5c9b      	ldrb	r3, [r3, r2]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d101      	bne.n	80008f2 <HAL_I2C_Master_Transmit+0x3e>
 80008ee:	2302      	movs	r3, #2
 80008f0:	e0ed      	b.n	8000ace <HAL_I2C_Master_Transmit+0x21a>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2240      	movs	r2, #64	; 0x40
 80008f6:	2101      	movs	r1, #1
 80008f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80008fa:	f7ff fccd 	bl	8000298 <HAL_GetTick>
 80008fe:	0003      	movs	r3, r0
 8000900:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	0219      	lsls	r1, r3, #8
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2319      	movs	r3, #25
 800090e:	2201      	movs	r2, #1
 8000910:	f000 f906 	bl	8000b20 <I2C_WaitOnFlagUntilTimeout>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 8000918:	2303      	movs	r3, #3
 800091a:	e0d8      	b.n	8000ace <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2241      	movs	r2, #65	; 0x41
 8000920:	2121      	movs	r1, #33	; 0x21
 8000922:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2242      	movs	r2, #66	; 0x42
 8000928:	2110      	movs	r1, #16
 800092a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2200      	movs	r2, #0
 8000930:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2208      	movs	r2, #8
 800093c:	18ba      	adds	r2, r7, r2
 800093e:	8812      	ldrh	r2, [r2, #0]
 8000940:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800094c:	b29b      	uxth	r3, r3
 800094e:	2bff      	cmp	r3, #255	; 0xff
 8000950:	d912      	bls.n	8000978 <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	22ff      	movs	r2, #255	; 0xff
 8000956:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800095c:	b2da      	uxtb	r2, r3
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	045c      	lsls	r4, r3, #17
 8000962:	230a      	movs	r3, #10
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	8819      	ldrh	r1, [r3, #0]
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	019b      	lsls	r3, r3, #6
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	0023      	movs	r3, r4
 8000972:	f000 f9e7 	bl	8000d44 <I2C_TransferConfig>
 8000976:	e07a      	b.n	8000a6e <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800097c:	b29a      	uxth	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000986:	b2da      	uxtb	r2, r3
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	049c      	lsls	r4, r3, #18
 800098c:	230a      	movs	r3, #10
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	8819      	ldrh	r1, [r3, #0]
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	019b      	lsls	r3, r3, #6
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	0023      	movs	r3, r4
 800099c:	f000 f9d2 	bl	8000d44 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80009a0:	e065      	b.n	8000a6e <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 f8f2 	bl	8000b92 <I2C_WaitOnTXISFlagUntilTimeout>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d007      	beq.n	80009c2 <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d101      	bne.n	80009be <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e087      	b.n	8000ace <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 80009be:	2303      	movs	r3, #3
 80009c0:	e085      	b.n	8000ace <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009ca:	1c50      	adds	r0, r2, #1
 80009cc:	68f9      	ldr	r1, [r7, #12]
 80009ce:	6248      	str	r0, [r1, #36]	; 0x24
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009d8:	b29b      	uxth	r3, r3
 80009da:	3b01      	subs	r3, #1
 80009dc:	b29a      	uxth	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009e6:	3b01      	subs	r3, #1
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d13b      	bne.n	8000a6e <HAL_I2C_Master_Transmit+0x1ba>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d036      	beq.n	8000a6e <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	0013      	movs	r3, r2
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	f000 f887 	bl	8000b20 <I2C_WaitOnFlagUntilTimeout>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e059      	b.n	8000ace <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	2bff      	cmp	r3, #255	; 0xff
 8000a22:	d911      	bls.n	8000a48 <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	22ff      	movs	r2, #255	; 0xff
 8000a28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	045c      	lsls	r4, r3, #17
 8000a34:	230a      	movs	r3, #10
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	8819      	ldrh	r1, [r3, #0]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	0023      	movs	r3, r4
 8000a42:	f000 f97f 	bl	8000d44 <I2C_TransferConfig>
 8000a46:	e012      	b.n	8000a6e <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	049c      	lsls	r4, r3, #18
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	8819      	ldrh	r1, [r3, #0]
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	2300      	movs	r3, #0
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	0023      	movs	r3, r4
 8000a6a:	f000 f96b 	bl	8000d44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d194      	bne.n	80009a2 <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 f8c6 	bl	8000c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d007      	beq.n	8000a98 <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d101      	bne.n	8000a94 <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e01c      	b.n	8000ace <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 8000a94:	2303      	movs	r3, #3
 8000a96:	e01a      	b.n	8000ace <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2220      	movs	r2, #32
 8000a9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	6812      	ldr	r2, [r2, #0]
 8000aa8:	6852      	ldr	r2, [r2, #4]
 8000aaa:	490b      	ldr	r1, [pc, #44]	; (8000ad8 <HAL_I2C_Master_Transmit+0x224>)
 8000aac:	400a      	ands	r2, r1
 8000aae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2241      	movs	r2, #65	; 0x41
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2242      	movs	r2, #66	; 0x42
 8000abc:	2100      	movs	r1, #0
 8000abe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2240      	movs	r2, #64	; 0x40
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e000      	b.n	8000ace <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8000acc:	2302      	movs	r3, #2
  }
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b007      	add	sp, #28
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	fe00e800 	.word	0xfe00e800

08000adc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	2202      	movs	r2, #2
 8000aec:	4013      	ands	r3, r2
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d103      	bne.n	8000afa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	2201      	movs	r2, #1
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d007      	beq.n	8000b18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	6812      	ldr	r2, [r2, #0]
 8000b10:	6992      	ldr	r2, [r2, #24]
 8000b12:	2101      	movs	r1, #1
 8000b14:	430a      	orrs	r2, r1
 8000b16:	619a      	str	r2, [r3, #24]
  }
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000b30:	e01b      	b.n	8000b6a <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	d018      	beq.n	8000b6a <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d007      	beq.n	8000b4e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000b3e:	f7ff fbab 	bl	8000298 <HAL_GetTick>
 8000b42:	0002      	movs	r2, r0
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	1ad2      	subs	r2, r2, r3
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d90d      	bls.n	8000b6a <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2241      	movs	r2, #65	; 0x41
 8000b52:	2120      	movs	r1, #32
 8000b54:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2242      	movs	r2, #66	; 0x42
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2240      	movs	r2, #64	; 0x40
 8000b62:	2100      	movs	r1, #0
 8000b64:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000b66:	2303      	movs	r3, #3
 8000b68:	e00f      	b.n	8000b8a <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	425a      	negs	r2, r3
 8000b7a:	4153      	adcs	r3, r2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	001a      	movs	r2, r3
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d0d4      	beq.n	8000b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000b9e:	e02b      	b.n	8000bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f86e 	bl	8000c88 <I2C_IsAcknowledgeFailed>
 8000bac:	1e03      	subs	r3, r0, #0
 8000bae:	d001      	beq.n	8000bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e029      	b.n	8000c08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	d01e      	beq.n	8000bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d007      	beq.n	8000bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8000bc0:	f7ff fb6a 	bl	8000298 <HAL_GetTick>
 8000bc4:	0002      	movs	r2, r0
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	1ad2      	subs	r2, r2, r3
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d913      	bls.n	8000bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd4:	2220      	movs	r2, #32
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2241      	movs	r2, #65	; 0x41
 8000be0:	2120      	movs	r1, #32
 8000be2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2242      	movs	r2, #66	; 0x42
 8000be8:	2100      	movs	r1, #0
 8000bea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2240      	movs	r2, #64	; 0x40
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e007      	b.n	8000c08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	2202      	movs	r2, #2
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d1cc      	bne.n	8000ba0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b004      	add	sp, #16
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c1c:	e028      	b.n	8000c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	0018      	movs	r0, r3
 8000c26:	f000 f82f 	bl	8000c88 <I2C_IsAcknowledgeFailed>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d001      	beq.n	8000c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e026      	b.n	8000c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d007      	beq.n	8000c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000c38:	f7ff fb2e 	bl	8000298 <HAL_GetTick>
 8000c3c:	0002      	movs	r2, r0
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	1ad2      	subs	r2, r2, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d913      	bls.n	8000c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4c:	2220      	movs	r2, #32
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2241      	movs	r2, #65	; 0x41
 8000c58:	2120      	movs	r1, #32
 8000c5a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2242      	movs	r2, #66	; 0x42
 8000c60:	2100      	movs	r1, #0
 8000c62:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2240      	movs	r2, #64	; 0x40
 8000c68:	2100      	movs	r1, #0
 8000c6a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	e007      	b.n	8000c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	2220      	movs	r2, #32
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b20      	cmp	r3, #32
 8000c7c:	d1cf      	bne.n	8000c1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b004      	add	sp, #16
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b10      	cmp	r3, #16
 8000ca0:	d148      	bne.n	8000d34 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ca2:	e01b      	b.n	8000cdc <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	d018      	beq.n	8000cdc <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d007      	beq.n	8000cc0 <I2C_IsAcknowledgeFailed+0x38>
 8000cb0:	f7ff faf2 	bl	8000298 <HAL_GetTick>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	1ad2      	subs	r2, r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d90d      	bls.n	8000cdc <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2241      	movs	r2, #65	; 0x41
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2242      	movs	r2, #66	; 0x42
 8000ccc:	2100      	movs	r1, #0
 8000cce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2240      	movs	r2, #64	; 0x40
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e02c      	b.n	8000d36 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	2220      	movs	r2, #32
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	2b20      	cmp	r3, #32
 8000ce8:	d1dc      	bne.n	8000ca4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2210      	movs	r2, #16
 8000cf0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff feed 	bl	8000adc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	6812      	ldr	r2, [r2, #0]
 8000d0a:	6852      	ldr	r2, [r2, #4]
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <I2C_IsAcknowledgeFailed+0xb8>)
 8000d0e:	400a      	ands	r2, r1
 8000d10:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2204      	movs	r2, #4
 8000d16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2241      	movs	r2, #65	; 0x41
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2242      	movs	r2, #66	; 0x42
 8000d24:	2100      	movs	r1, #0
 8000d26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2240      	movs	r2, #64	; 0x40
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b004      	add	sp, #16
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	fe00e800 	.word	0xfe00e800

08000d44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	0008      	movs	r0, r1
 8000d4e:	0011      	movs	r1, r2
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	230a      	movs	r3, #10
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	1c02      	adds	r2, r0, #0
 8000d58:	801a      	strh	r2, [r3, #0]
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	1c0a      	adds	r2, r1, #0
 8000d60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <I2C_TransferConfig+0x6c>)
 8000d72:	4013      	ands	r3, r2
 8000d74:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000d76:	230a      	movs	r3, #10
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	059b      	lsls	r3, r3, #22
 8000d7e:	0d9a      	lsrs	r2, r3, #22
 8000d80:	2309      	movs	r3, #9
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	0419      	lsls	r1, r3, #16
 8000d88:	23ff      	movs	r3, #255	; 0xff
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	400b      	ands	r3, r1
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	605a      	str	r2, [r3, #4]
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b006      	add	sp, #24
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	fc009800 	.word	0xfc009800

08000db4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2241      	movs	r2, #65	; 0x41
 8000dc2:	5c9b      	ldrb	r3, [r3, r2]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b20      	cmp	r3, #32
 8000dc8:	d138      	bne.n	8000e3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2240      	movs	r2, #64	; 0x40
 8000dce:	5c9b      	ldrb	r3, [r3, r2]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e032      	b.n	8000e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2240      	movs	r2, #64	; 0x40
 8000ddc:	2101      	movs	r1, #1
 8000dde:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2241      	movs	r2, #65	; 0x41
 8000de4:	2124      	movs	r1, #36	; 0x24
 8000de6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	2101      	movs	r1, #1
 8000df4:	438a      	bics	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	4911      	ldr	r1, [pc, #68]	; (8000e48 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000e04:	400a      	ands	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	6811      	ldr	r1, [r2, #0]
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	2101      	movs	r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2241      	movs	r2, #65	; 0x41
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2240      	movs	r2, #64	; 0x40
 8000e34:	2100      	movs	r1, #0
 8000e36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e000      	b.n	8000e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000e3c:	2302      	movs	r3, #2
  }
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	ffffefff 	.word	0xffffefff

08000e4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2241      	movs	r2, #65	; 0x41
 8000e5e:	5c9b      	ldrb	r3, [r3, r2]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b20      	cmp	r3, #32
 8000e64:	d139      	bne.n	8000eda <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2240      	movs	r2, #64	; 0x40
 8000e6a:	5c9b      	ldrb	r3, [r3, r2]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d101      	bne.n	8000e74 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e033      	b.n	8000edc <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2240      	movs	r2, #64	; 0x40
 8000e78:	2101      	movs	r1, #1
 8000e7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2241      	movs	r2, #65	; 0x41
 8000e80:	2124      	movs	r1, #36	; 0x24
 8000e82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	438a      	bics	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2241      	movs	r2, #65	; 0x41
 8000eca:	2120      	movs	r1, #32
 8000ecc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2240      	movs	r2, #64	; 0x40
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8000eda:	2302      	movs	r3, #2
  }
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b004      	add	sp, #16
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	fffff0ff 	.word	0xfffff0ff

08000ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4013      	ands	r3, r2
 8000efc:	d100      	bne.n	8000f00 <HAL_RCC_OscConfig+0x18>
 8000efe:	e08d      	b.n	800101c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f00:	4bc3      	ldr	r3, [pc, #780]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	220c      	movs	r2, #12
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d00e      	beq.n	8000f2a <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f0c:	4bc0      	ldr	r3, [pc, #768]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	220c      	movs	r2, #12
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d116      	bne.n	8000f46 <HAL_RCC_OscConfig+0x5e>
 8000f18:	4bbd      	ldr	r3, [pc, #756]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	025b      	lsls	r3, r3, #9
 8000f20:	401a      	ands	r2, r3
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	025b      	lsls	r3, r3, #9
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d10d      	bne.n	8000f46 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2a:	4bb9      	ldr	r3, [pc, #740]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	029b      	lsls	r3, r3, #10
 8000f32:	4013      	ands	r3, r2
 8000f34:	d100      	bne.n	8000f38 <HAL_RCC_OscConfig+0x50>
 8000f36:	e070      	b.n	800101a <HAL_RCC_OscConfig+0x132>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d000      	beq.n	8000f42 <HAL_RCC_OscConfig+0x5a>
 8000f40:	e06b      	b.n	800101a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e2b5      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d107      	bne.n	8000f5e <HAL_RCC_OscConfig+0x76>
 8000f4e:	4bb0      	ldr	r3, [pc, #704]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f50:	4aaf      	ldr	r2, [pc, #700]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f52:	6812      	ldr	r2, [r2, #0]
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	0249      	lsls	r1, r1, #9
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e02f      	b.n	8000fbe <HAL_RCC_OscConfig+0xd6>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0x98>
 8000f66:	4baa      	ldr	r3, [pc, #680]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f68:	4aa9      	ldr	r2, [pc, #676]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	49a9      	ldr	r1, [pc, #676]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	400a      	ands	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	4ba7      	ldr	r3, [pc, #668]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f74:	4aa6      	ldr	r2, [pc, #664]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f76:	6812      	ldr	r2, [r2, #0]
 8000f78:	49a7      	ldr	r1, [pc, #668]	; (8001218 <HAL_RCC_OscConfig+0x330>)
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e01e      	b.n	8000fbe <HAL_RCC_OscConfig+0xd6>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d10e      	bne.n	8000fa6 <HAL_RCC_OscConfig+0xbe>
 8000f88:	4ba1      	ldr	r3, [pc, #644]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f8a:	4aa1      	ldr	r2, [pc, #644]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	02c9      	lsls	r1, r1, #11
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	4b9e      	ldr	r3, [pc, #632]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f98:	4a9d      	ldr	r2, [pc, #628]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	0249      	lsls	r1, r1, #9
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e00b      	b.n	8000fbe <HAL_RCC_OscConfig+0xd6>
 8000fa6:	4b9a      	ldr	r3, [pc, #616]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000fa8:	4a99      	ldr	r2, [pc, #612]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	4999      	ldr	r1, [pc, #612]	; (8001214 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	400a      	ands	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	4b97      	ldr	r3, [pc, #604]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000fb4:	4a96      	ldr	r2, [pc, #600]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	4997      	ldr	r1, [pc, #604]	; (8001218 <HAL_RCC_OscConfig+0x330>)
 8000fba:	400a      	ands	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d014      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff f967 	bl	8000298 <HAL_GetTick>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff f962 	bl	8000298 <HAL_GetTick>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e267      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	4b8b      	ldr	r3, [pc, #556]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	029b      	lsls	r3, r3, #10
 8000fea:	4013      	ands	r3, r2
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xe8>
 8000fee:	e015      	b.n	800101c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff f952 	bl	8000298 <HAL_GetTick>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffa:	f7ff f94d 	bl	8000298 <HAL_GetTick>
 8000ffe:	0002      	movs	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b64      	cmp	r3, #100	; 0x64
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e252      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100c:	4b80      	ldr	r3, [pc, #512]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	029b      	lsls	r3, r3, #10
 8001014:	4013      	ands	r3, r2
 8001016:	d1f0      	bne.n	8000ffa <HAL_RCC_OscConfig+0x112>
 8001018:	e000      	b.n	800101c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2202      	movs	r2, #2
 8001022:	4013      	ands	r3, r2
 8001024:	d100      	bne.n	8001028 <HAL_RCC_OscConfig+0x140>
 8001026:	e069      	b.n	80010fc <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001028:	4b79      	ldr	r3, [pc, #484]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	220c      	movs	r2, #12
 800102e:	4013      	ands	r3, r2
 8001030:	d00b      	beq.n	800104a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001032:	4b77      	ldr	r3, [pc, #476]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	220c      	movs	r2, #12
 8001038:	4013      	ands	r3, r2
 800103a:	2b08      	cmp	r3, #8
 800103c:	d11c      	bne.n	8001078 <HAL_RCC_OscConfig+0x190>
 800103e:	4b74      	ldr	r3, [pc, #464]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	025b      	lsls	r3, r3, #9
 8001046:	4013      	ands	r3, r2
 8001048:	d116      	bne.n	8001078 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	4b71      	ldr	r3, [pc, #452]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2202      	movs	r2, #2
 8001050:	4013      	ands	r3, r2
 8001052:	d005      	beq.n	8001060 <HAL_RCC_OscConfig+0x178>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d001      	beq.n	8001060 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e228      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4a6b      	ldr	r2, [pc, #428]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001062:	4b6b      	ldr	r3, [pc, #428]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	21f8      	movs	r1, #248	; 0xf8
 8001068:	438b      	bics	r3, r1
 800106a:	0019      	movs	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	430b      	orrs	r3, r1
 8001074:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	e041      	b.n	80010fc <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d024      	beq.n	80010ca <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001080:	4b63      	ldr	r3, [pc, #396]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001082:	4a63      	ldr	r2, [pc, #396]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	2101      	movs	r1, #1
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff f904 	bl	8000298 <HAL_GetTick>
 8001090:	0003      	movs	r3, r0
 8001092:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff f8ff 	bl	8000298 <HAL_GetTick>
 800109a:	0002      	movs	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e204      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	4b59      	ldr	r3, [pc, #356]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2202      	movs	r2, #2
 80010ae:	4013      	ands	r3, r2
 80010b0:	d0f1      	beq.n	8001096 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4a57      	ldr	r2, [pc, #348]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 80010b4:	4b56      	ldr	r3, [pc, #344]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	21f8      	movs	r1, #248	; 0xf8
 80010ba:	438b      	bics	r3, r1
 80010bc:	0019      	movs	r1, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	e018      	b.n	80010fc <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ca:	4b51      	ldr	r3, [pc, #324]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 80010cc:	4a50      	ldr	r2, [pc, #320]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	2101      	movs	r1, #1
 80010d2:	438a      	bics	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff f8df 	bl	8000298 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff f8da 	bl	8000298 <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1df      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	4b47      	ldr	r3, [pc, #284]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2202      	movs	r2, #2
 80010f8:	4013      	ands	r3, r2
 80010fa:	d1f1      	bne.n	80010e0 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2208      	movs	r2, #8
 8001102:	4013      	ands	r3, r2
 8001104:	d036      	beq.n	8001174 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d019      	beq.n	8001142 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110e:	4b40      	ldr	r3, [pc, #256]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001110:	4a3f      	ldr	r2, [pc, #252]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001112:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001114:	2101      	movs	r1, #1
 8001116:	430a      	orrs	r2, r1
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111a:	f7ff f8bd 	bl	8000298 <HAL_GetTick>
 800111e:	0003      	movs	r3, r0
 8001120:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff f8b8 	bl	8000298 <HAL_GetTick>
 8001128:	0002      	movs	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1bd      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	4b36      	ldr	r3, [pc, #216]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	2202      	movs	r2, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d0f1      	beq.n	8001124 <HAL_RCC_OscConfig+0x23c>
 8001140:	e018      	b.n	8001174 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001144:	4a32      	ldr	r2, [pc, #200]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001146:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001148:	2101      	movs	r1, #1
 800114a:	438a      	bics	r2, r1
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff f8a3 	bl	8000298 <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff f89e 	bl	8000298 <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1a3      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	2202      	movs	r2, #2
 8001170:	4013      	ands	r3, r2
 8001172:	d1f1      	bne.n	8001158 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2204      	movs	r2, #4
 800117a:	4013      	ands	r3, r2
 800117c:	d100      	bne.n	8001180 <HAL_RCC_OscConfig+0x298>
 800117e:	e0b5      	b.n	80012ec <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001180:	2317      	movs	r3, #23
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 800118a:	69da      	ldr	r2, [r3, #28]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	055b      	lsls	r3, r3, #21
 8001190:	4013      	ands	r3, r2
 8001192:	d111      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001196:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001198:	69d2      	ldr	r2, [r2, #28]
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0549      	lsls	r1, r1, #21
 800119e:	430a      	orrs	r2, r1
 80011a0:	61da      	str	r2, [r3, #28]
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 80011a4:	69da      	ldr	r2, [r3, #28]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	055b      	lsls	r3, r3, #21
 80011aa:	4013      	ands	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011b0:	2317      	movs	r3, #23
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_RCC_OscConfig+0x334>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4013      	ands	r3, r2
 80011c2:	d11a      	bne.n	80011fa <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_RCC_OscConfig+0x334>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <HAL_RCC_OscConfig+0x334>)
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	0049      	lsls	r1, r1, #1
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d2:	f7ff f861 	bl	8000298 <HAL_GetTick>
 80011d6:	0003      	movs	r3, r0
 80011d8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011dc:	f7ff f85c 	bl	8000298 <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e161      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_OscConfig+0x334>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4013      	ands	r3, r2
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10e      	bne.n	8001220 <HAL_RCC_OscConfig+0x338>
 8001202:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001204:	4a02      	ldr	r2, [pc, #8]	; (8001210 <HAL_RCC_OscConfig+0x328>)
 8001206:	6a12      	ldr	r2, [r2, #32]
 8001208:	2101      	movs	r1, #1
 800120a:	430a      	orrs	r2, r1
 800120c:	621a      	str	r2, [r3, #32]
 800120e:	e035      	b.n	800127c <HAL_RCC_OscConfig+0x394>
 8001210:	40021000 	.word	0x40021000
 8001214:	fffeffff 	.word	0xfffeffff
 8001218:	fffbffff 	.word	0xfffbffff
 800121c:	40007000 	.word	0x40007000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10c      	bne.n	8001242 <HAL_RCC_OscConfig+0x35a>
 8001228:	4ba4      	ldr	r3, [pc, #656]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800122a:	4aa4      	ldr	r2, [pc, #656]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800122c:	6a12      	ldr	r2, [r2, #32]
 800122e:	2101      	movs	r1, #1
 8001230:	438a      	bics	r2, r1
 8001232:	621a      	str	r2, [r3, #32]
 8001234:	4ba1      	ldr	r3, [pc, #644]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001236:	4aa1      	ldr	r2, [pc, #644]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001238:	6a12      	ldr	r2, [r2, #32]
 800123a:	2104      	movs	r1, #4
 800123c:	438a      	bics	r2, r1
 800123e:	621a      	str	r2, [r3, #32]
 8001240:	e01c      	b.n	800127c <HAL_RCC_OscConfig+0x394>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b05      	cmp	r3, #5
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x37c>
 800124a:	4b9c      	ldr	r3, [pc, #624]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800124c:	4a9b      	ldr	r2, [pc, #620]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800124e:	6a12      	ldr	r2, [r2, #32]
 8001250:	2104      	movs	r1, #4
 8001252:	430a      	orrs	r2, r1
 8001254:	621a      	str	r2, [r3, #32]
 8001256:	4b99      	ldr	r3, [pc, #612]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001258:	4a98      	ldr	r2, [pc, #608]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800125a:	6a12      	ldr	r2, [r2, #32]
 800125c:	2101      	movs	r1, #1
 800125e:	430a      	orrs	r2, r1
 8001260:	621a      	str	r2, [r3, #32]
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0x394>
 8001264:	4b95      	ldr	r3, [pc, #596]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001266:	4a95      	ldr	r2, [pc, #596]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001268:	6a12      	ldr	r2, [r2, #32]
 800126a:	2101      	movs	r1, #1
 800126c:	438a      	bics	r2, r1
 800126e:	621a      	str	r2, [r3, #32]
 8001270:	4b92      	ldr	r3, [pc, #584]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001272:	4a92      	ldr	r2, [pc, #584]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001274:	6a12      	ldr	r2, [r2, #32]
 8001276:	2104      	movs	r1, #4
 8001278:	438a      	bics	r2, r1
 800127a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d014      	beq.n	80012ae <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001284:	f7ff f808 	bl	8000298 <HAL_GetTick>
 8001288:	0003      	movs	r3, r0
 800128a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	e009      	b.n	80012a2 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f7ff f803 	bl	8000298 <HAL_GetTick>
 8001292:	0002      	movs	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	4a89      	ldr	r2, [pc, #548]	; (80014c0 <HAL_RCC_OscConfig+0x5d8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e107      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a2:	4b86      	ldr	r3, [pc, #536]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x3a6>
 80012ac:	e013      	b.n	80012d6 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ae:	f7fe fff3 	bl	8000298 <HAL_GetTick>
 80012b2:	0003      	movs	r3, r0
 80012b4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b6:	e009      	b.n	80012cc <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b8:	f7fe ffee 	bl	8000298 <HAL_GetTick>
 80012bc:	0002      	movs	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	4a7f      	ldr	r2, [pc, #508]	; (80014c0 <HAL_RCC_OscConfig+0x5d8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e0f2      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012cc:	4b7b      	ldr	r3, [pc, #492]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	2202      	movs	r2, #2
 80012d2:	4013      	ands	r3, r2
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012d6:	2317      	movs	r3, #23
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d105      	bne.n	80012ec <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e0:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 80012e2:	4a76      	ldr	r2, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 80012e4:	69d2      	ldr	r2, [r2, #28]
 80012e6:	4977      	ldr	r1, [pc, #476]	; (80014c4 <HAL_RCC_OscConfig+0x5dc>)
 80012e8:	400a      	ands	r2, r1
 80012ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2210      	movs	r2, #16
 80012f2:	4013      	ands	r3, r2
 80012f4:	d063      	beq.n	80013be <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d12a      	bne.n	8001354 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012fe:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001300:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001304:	2104      	movs	r1, #4
 8001306:	430a      	orrs	r2, r1
 8001308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800130a:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800130c:	4a6b      	ldr	r2, [pc, #428]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800130e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001310:	2101      	movs	r1, #1
 8001312:	430a      	orrs	r2, r1
 8001314:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7fe ffbf 	bl	8000298 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001320:	f7fe ffba 	bl	8000298 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e0bf      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001332:	4b62      	ldr	r3, [pc, #392]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d0f1      	beq.n	8001320 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800133c:	4a5f      	ldr	r2, [pc, #380]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800133e:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	21f8      	movs	r1, #248	; 0xf8
 8001344:	438b      	bics	r3, r1
 8001346:	0019      	movs	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	430b      	orrs	r3, r1
 8001350:	6353      	str	r3, [r2, #52]	; 0x34
 8001352:	e034      	b.n	80013be <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	3305      	adds	r3, #5
 800135a:	d111      	bne.n	8001380 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800135c:	4b57      	ldr	r3, [pc, #348]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800135e:	4a57      	ldr	r2, [pc, #348]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001360:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001362:	2104      	movs	r1, #4
 8001364:	438a      	bics	r2, r1
 8001366:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001368:	4a54      	ldr	r2, [pc, #336]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800136a:	4b54      	ldr	r3, [pc, #336]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800136c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136e:	21f8      	movs	r1, #248	; 0xf8
 8001370:	438b      	bics	r3, r1
 8001372:	0019      	movs	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	430b      	orrs	r3, r1
 800137c:	6353      	str	r3, [r2, #52]	; 0x34
 800137e:	e01e      	b.n	80013be <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001380:	4b4e      	ldr	r3, [pc, #312]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001382:	4a4e      	ldr	r2, [pc, #312]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001384:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001386:	2104      	movs	r1, #4
 8001388:	430a      	orrs	r2, r1
 800138a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800138c:	4b4b      	ldr	r3, [pc, #300]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800138e:	4a4b      	ldr	r2, [pc, #300]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001392:	2101      	movs	r1, #1
 8001394:	438a      	bics	r2, r1
 8001396:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001398:	f7fe ff7e 	bl	8000298 <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013a2:	f7fe ff79 	bl	8000298 <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e07e      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013b4:	4b41      	ldr	r3, [pc, #260]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 80013b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b8:	2202      	movs	r2, #2
 80013ba:	4013      	ands	r3, r2
 80013bc:	d1f1      	bne.n	80013a2 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d100      	bne.n	80013c8 <HAL_RCC_OscConfig+0x4e0>
 80013c6:	e073      	b.n	80014b0 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	220c      	movs	r2, #12
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d100      	bne.n	80013d6 <HAL_RCC_OscConfig+0x4ee>
 80013d4:	e06a      	b.n	80014ac <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d14b      	bne.n	8001476 <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013de:	4b37      	ldr	r3, [pc, #220]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 80013e0:	4a36      	ldr	r2, [pc, #216]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	4938      	ldr	r1, [pc, #224]	; (80014c8 <HAL_RCC_OscConfig+0x5e0>)
 80013e6:	400a      	ands	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7fe ff55 	bl	8000298 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f4:	f7fe ff50 	bl	8000298 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e055      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	049b      	lsls	r3, r3, #18
 800140e:	4013      	ands	r3, r2
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001412:	4a2a      	ldr	r2, [pc, #168]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	210f      	movs	r1, #15
 800141a:	438b      	bics	r3, r1
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	430b      	orrs	r3, r1
 8001424:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001426:	4a25      	ldr	r2, [pc, #148]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4927      	ldr	r1, [pc, #156]	; (80014cc <HAL_RCC_OscConfig+0x5e4>)
 800142e:	4019      	ands	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	4303      	orrs	r3, r0
 800143a:	430b      	orrs	r3, r1
 800143c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001440:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	0449      	lsls	r1, r1, #17
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7fe ff24 	bl	8000298 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001456:	f7fe ff1f 	bl	8000298 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e024      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	049b      	lsls	r3, r3, #18
 8001470:	4013      	ands	r3, r2
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x56e>
 8001474:	e01c      	b.n	80014b0 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 8001478:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	4912      	ldr	r1, [pc, #72]	; (80014c8 <HAL_RCC_OscConfig+0x5e0>)
 800147e:	400a      	ands	r2, r1
 8001480:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7fe ff09 	bl	8000298 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148c:	f7fe ff04 	bl	8000298 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e009      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <HAL_RCC_OscConfig+0x5d4>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	049b      	lsls	r3, r3, #18
 80014a6:	4013      	ands	r3, r2
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x5a4>
 80014aa:	e001      	b.n	80014b0 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b006      	add	sp, #24
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	40021000 	.word	0x40021000
 80014c0:	00001388 	.word	0x00001388
 80014c4:	efffffff 	.word	0xefffffff
 80014c8:	feffffff 	.word	0xfeffffff
 80014cc:	ffc2ffff 	.word	0xffc2ffff

080014d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014de:	4b69      	ldr	r3, [pc, #420]	; (8001684 <HAL_RCC_ClockConfig+0x1b4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2201      	movs	r2, #1
 80014e4:	401a      	ands	r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d211      	bcs.n	8001510 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ec:	4b65      	ldr	r3, [pc, #404]	; (8001684 <HAL_RCC_ClockConfig+0x1b4>)
 80014ee:	4a65      	ldr	r2, [pc, #404]	; (8001684 <HAL_RCC_ClockConfig+0x1b4>)
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	2101      	movs	r1, #1
 80014f4:	438a      	bics	r2, r1
 80014f6:	0011      	movs	r1, r2
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014fe:	4b61      	ldr	r3, [pc, #388]	; (8001684 <HAL_RCC_ClockConfig+0x1b4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2201      	movs	r2, #1
 8001504:	401a      	ands	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0b5      	b.n	800167c <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2202      	movs	r2, #2
 8001516:	4013      	ands	r3, r2
 8001518:	d009      	beq.n	800152e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151a:	4a5b      	ldr	r2, [pc, #364]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	4b5a      	ldr	r3, [pc, #360]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	21f0      	movs	r1, #240	; 0xf0
 8001522:	438b      	bics	r3, r1
 8001524:	0019      	movs	r1, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	430b      	orrs	r3, r1
 800152c:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	4013      	ands	r3, r2
 8001536:	d100      	bne.n	800153a <HAL_RCC_ClockConfig+0x6a>
 8001538:	e067      	b.n	800160a <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b51      	ldr	r3, [pc, #324]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	029b      	lsls	r3, r3, #10
 800154a:	4013      	ands	r3, r2
 800154c:	d114      	bne.n	8001578 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e094      	b.n	800167c <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	049b      	lsls	r3, r3, #18
 8001562:	4013      	ands	r3, r2
 8001564:	d108      	bne.n	8001578 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e088      	b.n	800167c <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156a:	4b47      	ldr	r3, [pc, #284]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e081      	b.n	800167c <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001578:	4a43      	ldr	r2, [pc, #268]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2103      	movs	r1, #3
 8001580:	438b      	bics	r3, r1
 8001582:	0019      	movs	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	430b      	orrs	r3, r1
 800158a:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800158c:	f7fe fe84 	bl	8000298 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d111      	bne.n	80015c0 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800159c:	e009      	b.n	80015b2 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159e:	f7fe fe7b 	bl	8000298 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	4a38      	ldr	r2, [pc, #224]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e064      	b.n	800167c <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b2:	4b35      	ldr	r3, [pc, #212]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	220c      	movs	r2, #12
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d1ef      	bne.n	800159e <HAL_RCC_ClockConfig+0xce>
 80015be:	e024      	b.n	800160a <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d11b      	bne.n	8001600 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c8:	e009      	b.n	80015de <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ca:	f7fe fe65 	bl	8000298 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	4a2d      	ldr	r2, [pc, #180]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e04e      	b.n	800167c <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015de:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	220c      	movs	r2, #12
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d1ef      	bne.n	80015ca <HAL_RCC_ClockConfig+0xfa>
 80015ea:	e00e      	b.n	800160a <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ec:	f7fe fe54 	bl	8000298 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	4a25      	ldr	r2, [pc, #148]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e03d      	b.n	800167c <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	220c      	movs	r2, #12
 8001606:	4013      	ands	r3, r2
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_RCC_ClockConfig+0x1b4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2201      	movs	r2, #1
 8001610:	401a      	ands	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d911      	bls.n	800163c <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_RCC_ClockConfig+0x1b4>)
 800161a:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <HAL_RCC_ClockConfig+0x1b4>)
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	2101      	movs	r1, #1
 8001620:	438a      	bics	r2, r1
 8001622:	0011      	movs	r1, r2
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_RCC_ClockConfig+0x1b4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2201      	movs	r2, #1
 8001630:	401a      	ands	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e01f      	b.n	800167c <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2204      	movs	r2, #4
 8001642:	4013      	ands	r3, r2
 8001644:	d008      	beq.n	8001658 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4910      	ldr	r1, [pc, #64]	; (8001690 <HAL_RCC_ClockConfig+0x1c0>)
 800164e:	4019      	ands	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	430b      	orrs	r3, r1
 8001656:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001658:	f000 f820 	bl	800169c <HAL_RCC_GetSysClockFreq>
 800165c:	0001      	movs	r1, r0
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	220f      	movs	r2, #15
 8001666:	4013      	ands	r3, r2
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	5cd3      	ldrb	r3, [r2, r3]
 800166c:	000a      	movs	r2, r1
 800166e:	40da      	lsrs	r2, r3
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_RCC_ClockConfig+0x1c8>)
 8001672:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001674:	2000      	movs	r0, #0
 8001676:	f7fe fde7 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b004      	add	sp, #16
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40022000 	.word	0x40022000
 8001688:	40021000 	.word	0x40021000
 800168c:	00001388 	.word	0x00001388
 8001690:	fffff8ff 	.word	0xfffff8ff
 8001694:	08001f60 	.word	0x08001f60
 8001698:	20000000 	.word	0x20000000

0800169c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b08f      	sub	sp, #60	; 0x3c
 80016a0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016a2:	2314      	movs	r3, #20
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	4a28      	ldr	r2, [pc, #160]	; (8001748 <HAL_RCC_GetSysClockFreq+0xac>)
 80016a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016aa:	c313      	stmia	r3!, {r0, r1, r4}
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4a26      	ldr	r2, [pc, #152]	; (800174c <HAL_RCC_GetSysClockFreq+0xb0>)
 80016b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016b6:	c313      	stmia	r3!, {r0, r1, r4}
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	220c      	movs	r2, #12
 80016da:	4013      	ands	r3, r2
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d002      	beq.n	80016e6 <HAL_RCC_GetSysClockFreq+0x4a>
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d003      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x50>
 80016e4:	e027      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016ea:	e027      	b.n	800173c <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	0c9b      	lsrs	r3, r3, #18
 80016f0:	220f      	movs	r2, #15
 80016f2:	4013      	ands	r3, r2
 80016f4:	2214      	movs	r2, #20
 80016f6:	18ba      	adds	r2, r7, r2
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	220f      	movs	r2, #15
 8001702:	4013      	ands	r3, r2
 8001704:	1d3a      	adds	r2, r7, #4
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800170a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	025b      	lsls	r3, r3, #9
 8001710:	4013      	ands	r3, r2
 8001712:	d009      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001716:	480f      	ldr	r0, [pc, #60]	; (8001754 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001718:	f7fe fcf6 	bl	8000108 <__udivsi3>
 800171c:	0003      	movs	r3, r0
 800171e:	001a      	movs	r2, r3
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	4353      	muls	r3, r2
 8001724:	637b      	str	r3, [r7, #52]	; 0x34
 8001726:	e003      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <HAL_RCC_GetSysClockFreq+0xbc>)
 800172c:	4353      	muls	r3, r2
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001734:	e002      	b.n	800173c <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800173a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b00f      	add	sp, #60	; 0x3c
 8001744:	bd90      	pop	{r4, r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	08001f18 	.word	0x08001f18
 800174c:	08001f28 	.word	0x08001f28
 8001750:	40021000 	.word	0x40021000
 8001754:	007a1200 	.word	0x007a1200
 8001758:	003d0900 	.word	0x003d0900

0800175c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_RCC_GetHCLKFreq+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	20000000 	.word	0x20000000

08001770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	4013      	ands	r3, r2
 800178a:	d100      	bne.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800178c:	e08e      	b.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800178e:	2317      	movs	r3, #23
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001796:	4b57      	ldr	r3, [pc, #348]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	055b      	lsls	r3, r3, #21
 800179e:	4013      	ands	r3, r2
 80017a0:	d111      	bne.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b54      	ldr	r3, [pc, #336]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017a4:	4a53      	ldr	r2, [pc, #332]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017a6:	69d2      	ldr	r2, [r2, #28]
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	0549      	lsls	r1, r1, #21
 80017ac:	430a      	orrs	r2, r1
 80017ae:	61da      	str	r2, [r3, #28]
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017b2:	69da      	ldr	r2, [r3, #28]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	055b      	lsls	r3, r3, #21
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017be:	2317      	movs	r3, #23
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4013      	ands	r3, r2
 80017d0:	d11a      	bne.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017d4:	4a48      	ldr	r2, [pc, #288]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	0049      	lsls	r1, r1, #1
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e0:	f7fe fd5a 	bl	8000298 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	e008      	b.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ea:	f7fe fd55 	bl	8000298 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b64      	cmp	r3, #100	; 0x64
 80017f6:	d901      	bls.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e076      	b.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4013      	ands	r3, r2
 8001806:	d0f0      	beq.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001808:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800180a:	6a1a      	ldr	r2, [r3, #32]
 800180c:	23c0      	movs	r3, #192	; 0xc0
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d034      	beq.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	401a      	ands	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	429a      	cmp	r2, r3
 8001828:	d02c      	beq.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800182a:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a33      	ldr	r2, [pc, #204]	; (80018fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001836:	4a2f      	ldr	r2, [pc, #188]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001838:	6a12      	ldr	r2, [r2, #32]
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	0249      	lsls	r1, r1, #9
 800183e:	430a      	orrs	r2, r1
 8001840:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001842:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001844:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001846:	6a12      	ldr	r2, [r2, #32]
 8001848:	492d      	ldr	r1, [pc, #180]	; (8001900 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800184a:	400a      	ands	r2, r1
 800184c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	4013      	ands	r3, r2
 800185a:	d013      	beq.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7fe fd1c 	bl	8000298 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001864:	e009      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7fe fd17 	bl	8000298 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	4a24      	ldr	r2, [pc, #144]	; (8001904 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e037      	b.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d0f0      	beq.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	491c      	ldr	r1, [pc, #112]	; (80018fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800188c:	4019      	ands	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	430b      	orrs	r3, r1
 8001894:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001896:	2317      	movs	r3, #23
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018a2:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018a4:	69d2      	ldr	r2, [r2, #28]
 80018a6:	4918      	ldr	r1, [pc, #96]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2201      	movs	r2, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	d009      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018b6:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	2103      	movs	r1, #3
 80018be:	438b      	bics	r3, r1
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	430b      	orrs	r3, r1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2220      	movs	r2, #32
 80018d0:	4013      	ands	r3, r2
 80018d2:	d009      	beq.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	2110      	movs	r1, #16
 80018dc:	438b      	bics	r3, r1
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b006      	add	sp, #24
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40007000 	.word	0x40007000
 80018fc:	fffffcff 	.word	0xfffffcff
 8001900:	fffeffff 	.word	0xfffeffff
 8001904:	00001388 	.word	0x00001388
 8001908:	efffffff 	.word	0xefffffff

0800190c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af02      	add	r7, sp, #8
 8001912:	0002      	movs	r2, r0
 8001914:	1dfb      	adds	r3, r7, #7
 8001916:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001918:	230f      	movs	r3, #15
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	1dfa      	adds	r2, r7, #7
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	210f      	movs	r1, #15
 8001922:	438a      	bics	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	011a      	lsls	r2, r3, #4
 800192c:	230e      	movs	r3, #14
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001932:	230f      	movs	r3, #15
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	220c      	movs	r2, #12
 800193a:	4313      	orrs	r3, r2
 800193c:	b2da      	uxtb	r2, r3
 800193e:	2308      	movs	r3, #8
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001944:	230f      	movs	r3, #15
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2208      	movs	r2, #8
 800194c:	4313      	orrs	r3, r2
 800194e:	b2da      	uxtb	r2, r3
 8001950:	2308      	movs	r3, #8
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001956:	230e      	movs	r3, #14
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	220c      	movs	r2, #12
 800195e:	4313      	orrs	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	2308      	movs	r3, #8
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001968:	230e      	movs	r3, #14
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2208      	movs	r2, #8
 8001970:	4313      	orrs	r3, r2
 8001972:	b2da      	uxtb	r2, r3
 8001974:	2308      	movs	r3, #8
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800197a:	2308      	movs	r3, #8
 800197c:	18fa      	adds	r2, r7, r3
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <lcd_send_cmd+0x88>)
 8001980:	2364      	movs	r3, #100	; 0x64
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2304      	movs	r3, #4
 8001986:	214e      	movs	r1, #78	; 0x4e
 8001988:	f7fe ff94 	bl	80008b4 <HAL_I2C_Master_Transmit>
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b004      	add	sp, #16
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000024 	.word	0x20000024

08001998 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af02      	add	r7, sp, #8
 800199e:	0002      	movs	r2, r0
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80019a4:	230f      	movs	r3, #15
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	1dfa      	adds	r2, r7, #7
 80019aa:	7812      	ldrb	r2, [r2, #0]
 80019ac:	210f      	movs	r1, #15
 80019ae:	438a      	bics	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	011a      	lsls	r2, r3, #4
 80019b8:	230e      	movs	r3, #14
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019be:	230f      	movs	r3, #15
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	220d      	movs	r2, #13
 80019c6:	4313      	orrs	r3, r2
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	2308      	movs	r3, #8
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80019d0:	230f      	movs	r3, #15
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2209      	movs	r2, #9
 80019d8:	4313      	orrs	r3, r2
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	2308      	movs	r3, #8
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80019e2:	230e      	movs	r3, #14
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	220d      	movs	r2, #13
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	2308      	movs	r3, #8
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019f4:	230e      	movs	r3, #14
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2209      	movs	r2, #9
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	2308      	movs	r3, #8
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a06:	2308      	movs	r3, #8
 8001a08:	18fa      	adds	r2, r7, r3
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <lcd_send_data+0x88>)
 8001a0c:	2364      	movs	r3, #100	; 0x64
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2304      	movs	r3, #4
 8001a12:	214e      	movs	r1, #78	; 0x4e
 8001a14:	f7fe ff4e 	bl	80008b4 <HAL_I2C_Master_Transmit>
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b004      	add	sp, #16
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000024 	.word	0x20000024

08001a24 <lcd_init>:

void lcd_init (void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f7ff ff6f 	bl	800190c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8001a2e:	2028      	movs	r0, #40	; 0x28
 8001a30:	f7ff ff6c 	bl	800190c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8001a34:	200c      	movs	r0, #12
 8001a36:	f7ff ff69 	bl	800190c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8001a3a:	2080      	movs	r0, #128	; 0x80
 8001a3c:	f7ff ff66 	bl	800190c <lcd_send_cmd>
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001a4e:	e006      	b.n	8001a5e <lcd_send_string+0x18>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7ff ff9d 	bl	8001998 <lcd_send_data>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f4      	bne.n	8001a50 <lcd_send_string+0xa>
}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a76:	f7fe fbd3 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a7a:	f000 f84b 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7e:	f000 f8ff 	bl	8001c80 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a82:	f000 f8b1 	bl	8001be8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001a86:	f7ff ffcd 	bl	8001a24 <lcd_init>
  lcd_send_cmd(0x01);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff ff3e 	bl	800190c <lcd_send_cmd>
  lcd_send_string("Oi povo");
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <main+0x98>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f7ff ffd7 	bl	8001a46 <lcd_send_string>
  {

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
 	  lcd_send_cmd(0x80);
 8001a98:	2080      	movs	r0, #128	; 0x80
 8001a9a:	f7ff ff37 	bl	800190c <lcd_send_cmd>
	  lcd_send_string("tua mae");
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <main+0x9c>)
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7ff ffd0 	bl	8001a46 <lcd_send_string>
	  lcd_send_cmd(0xc0);
 8001aa6:	20c0      	movs	r0, #192	; 0xc0
 8001aa8:	f7ff ff30 	bl	800190c <lcd_send_cmd>
	  lcd_send_string("e gorda");
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <main+0xa0>)
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff ffc9 	bl	8001a46 <lcd_send_string>
	  HAL_Delay(2000);
 8001ab4:	23fa      	movs	r3, #250	; 0xfa
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7fe fbf7 	bl	80002ac <HAL_Delay>
	  lcd_send_cmd(0x01);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7ff ff24 	bl	800190c <lcd_send_cmd>
	  for(char i ='a';i<='z';i++){
 8001ac4:	1dfb      	adds	r3, r7, #7
 8001ac6:	2261      	movs	r2, #97	; 0x61
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	e010      	b.n	8001aee <main+0x7e>
		  if(i=='q'){
 8001acc:	1dfb      	adds	r3, r7, #7
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b71      	cmp	r3, #113	; 0x71
 8001ad2:	d102      	bne.n	8001ada <main+0x6a>
			 lcd_send_cmd(0xc0);
 8001ad4:	20c0      	movs	r0, #192	; 0xc0
 8001ad6:	f7ff ff19 	bl	800190c <lcd_send_cmd>
		  }
		  lcd_send_data(i);
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7ff ff5a 	bl	8001998 <lcd_send_data>
	  for(char i ='a';i<='z';i++){
 8001ae4:	1dfb      	adds	r3, r7, #7
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	1dfb      	adds	r3, r7, #7
 8001aea:	3201      	adds	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b7a      	cmp	r3, #122	; 0x7a
 8001af4:	d9ea      	bls.n	8001acc <main+0x5c>
	  }
	  lcd_send_cmd(0x01);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7ff ff08 	bl	800190c <lcd_send_cmd>
	  HAL_Delay(2000);
 8001afc:	23fa      	movs	r3, #250	; 0xfa
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7fe fbd3 	bl	80002ac <HAL_Delay>
 	  lcd_send_cmd(0x80);
 8001b06:	e7c7      	b.n	8001a98 <main+0x28>
 8001b08:	08001f38 	.word	0x08001f38
 8001b0c:	08001f40 	.word	0x08001f40
 8001b10:	08001f48 	.word	0x08001f48

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b094      	sub	sp, #80	; 0x50
 8001b18:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	2202      	movs	r2, #2
 8001b20:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b22:	2320      	movs	r3, #32
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	2201      	movs	r2, #1
 8001b28:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	2210      	movs	r2, #16
 8001b30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b32:	2320      	movs	r3, #32
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7ff f9d2 	bl	8000ee8 <HAL_RCC_OscConfig>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d004      	beq.n	8001b52 <SystemClock_Config+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b48:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <SystemClock_Config+0xd0>)
 8001b4a:	2199      	movs	r1, #153	; 0x99
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 f8af 	bl	8001cb0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b52:	2310      	movs	r3, #16
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2207      	movs	r2, #7
 8001b58:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b62:	2310      	movs	r3, #16
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b72:	2310      	movs	r3, #16
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	2100      	movs	r1, #0
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff fca9 	bl	80014d0 <HAL_RCC_ClockConfig>
 8001b7e:	1e03      	subs	r3, r0, #0
 8001b80:	d004      	beq.n	8001b8c <SystemClock_Config+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <SystemClock_Config+0xd0>)
 8001b84:	21a6      	movs	r1, #166	; 0xa6
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 f892 	bl	8001cb0 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b8c:	003b      	movs	r3, r7
 8001b8e:	2220      	movs	r2, #32
 8001b90:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001b92:	003b      	movs	r3, r7
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b98:	003b      	movs	r3, r7
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f7ff fde8 	bl	8001770 <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	1e03      	subs	r3, r0, #0
 8001ba2:	d004      	beq.n	8001bae <SystemClock_Config+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <SystemClock_Config+0xd0>)
 8001ba6:	21ad      	movs	r1, #173	; 0xad
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 f881 	bl	8001cb0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001bae:	f7ff fdd5 	bl	800175c <HAL_RCC_GetHCLKFreq>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	23fa      	movs	r3, #250	; 0xfa
 8001bb6:	0099      	lsls	r1, r3, #2
 8001bb8:	0010      	movs	r0, r2
 8001bba:	f7fe faa5 	bl	8000108 <__udivsi3>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7fe fc39 	bl	8000438 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001bc6:	2004      	movs	r0, #4
 8001bc8:	f7fe fc44 	bl	8000454 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001bcc:	2301      	movs	r3, #1
 8001bce:	425b      	negs	r3, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7fe fc19 	bl	800040c <HAL_NVIC_SetPriority>
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b014      	add	sp, #80	; 0x50
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	08001f50 	.word	0x08001f50

08001be8 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001bec:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001bee:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <MX_I2C1_Init+0x8c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <MX_I2C1_Init+0x90>)
 8001bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7fe fdaf 	bl	8000788 <HAL_I2C_Init>
 8001c2a:	1e03      	subs	r3, r0, #0
 8001c2c:	d004      	beq.n	8001c38 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_I2C1_Init+0x94>)
 8001c30:	21cb      	movs	r1, #203	; 0xcb
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 f83c 	bl	8001cb0 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff f8b9 	bl	8000db4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d004      	beq.n	8001c50 <MX_I2C1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <MX_I2C1_Init+0x94>)
 8001c48:	21d2      	movs	r1, #210	; 0xd2
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 f830 	bl	8001cb0 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <MX_I2C1_Init+0x88>)
 8001c52:	2100      	movs	r1, #0
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff f8f9 	bl	8000e4c <HAL_I2CEx_ConfigDigitalFilter>
 8001c5a:	1e03      	subs	r3, r0, #0
 8001c5c:	d004      	beq.n	8001c68 <MX_I2C1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <MX_I2C1_Init+0x94>)
 8001c60:	21d9      	movs	r1, #217	; 0xd9
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 f824 	bl	8001cb0 <_Error_Handler>
  }

}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	20000024 	.word	0x20000024
 8001c74:	40005400 	.word	0x40005400
 8001c78:	2000090e 	.word	0x2000090e
 8001c7c:	08001f50 	.word	0x08001f50

08001c80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_GPIO_Init+0x2c>)
 8001c88:	4a08      	ldr	r2, [pc, #32]	; (8001cac <MX_GPIO_Init+0x2c>)
 8001c8a:	6952      	ldr	r2, [r2, #20]
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	0289      	lsls	r1, r1, #10
 8001c90:	430a      	orrs	r2, r1
 8001c92:	615a      	str	r2, [r3, #20]
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <MX_GPIO_Init+0x2c>)
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	029b      	lsls	r3, r3, #10
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]

}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000

08001cb0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001cba:	e7fe      	b.n	8001cba <_Error_Handler+0xa>

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_MspInit+0x6c>)
 8001cc4:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <HAL_MspInit+0x6c>)
 8001cc6:	6992      	ldr	r2, [r2, #24]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	619a      	str	r2, [r3, #24]
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_MspInit+0x6c>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_MspInit+0x6c>)
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <HAL_MspInit+0x6c>)
 8001cde:	69d2      	ldr	r2, [r2, #28]
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	0549      	lsls	r1, r1, #21
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	61da      	str	r2, [r3, #28]
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_MspInit+0x6c>)
 8001cea:	69da      	ldr	r2, [r3, #28]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	055b      	lsls	r3, r3, #21
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	425b      	negs	r3, r3
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7fe fb84 	bl	800040c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001d04:	2302      	movs	r3, #2
 8001d06:	425b      	negs	r3, r3
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7fe fb7d 	bl	800040c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d12:	2301      	movs	r3, #1
 8001d14:	425b      	negs	r3, r3
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7fe fb76 	bl	800040c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_I2C_MspInit+0x70>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d12a      	bne.n	8001d94 <HAL_I2C_MspInit+0x68>
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d3e:	230c      	movs	r3, #12
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	22c0      	movs	r2, #192	; 0xc0
 8001d44:	00d2      	lsls	r2, r2, #3
 8001d46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d48:	230c      	movs	r3, #12
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2212      	movs	r2, #18
 8001d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d50:	230c      	movs	r3, #12
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2201      	movs	r2, #1
 8001d56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d58:	230c      	movs	r3, #12
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d60:	230c      	movs	r3, #12
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2204      	movs	r2, #4
 8001d66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	230c      	movs	r3, #12
 8001d6a:	18fa      	adds	r2, r7, r3
 8001d6c:	2390      	movs	r3, #144	; 0x90
 8001d6e:	05db      	lsls	r3, r3, #23
 8001d70:	0011      	movs	r1, r2
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7fe fb94 	bl	80004a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_I2C_MspInit+0x74>)
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <HAL_I2C_MspInit+0x74>)
 8001d7c:	69d2      	ldr	r2, [r2, #28]
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	0389      	lsls	r1, r1, #14
 8001d82:	430a      	orrs	r2, r1
 8001d84:	61da      	str	r2, [r3, #28]
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_I2C_MspInit+0x74>)
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	039b      	lsls	r3, r3, #14
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b008      	add	sp, #32
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40005400 	.word	0x40005400
 8001da0:	40021000 	.word	0x40021000

08001da4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <HardFault_Handler+0x4>

08001db4 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dcc:	f7fe fa58 	bl	8000280 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001dd0:	f7fe fb5a 	bl	8000488 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <SystemInit+0x70>)
 8001de2:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <SystemInit+0x70>)
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	2101      	movs	r1, #1
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <SystemInit+0x70>)
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <SystemInit+0x70>)
 8001df0:	6852      	ldr	r2, [r2, #4]
 8001df2:	4917      	ldr	r1, [pc, #92]	; (8001e50 <SystemInit+0x74>)
 8001df4:	400a      	ands	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <SystemInit+0x70>)
 8001dfa:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <SystemInit+0x70>)
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	4915      	ldr	r1, [pc, #84]	; (8001e54 <SystemInit+0x78>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <SystemInit+0x70>)
 8001e06:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <SystemInit+0x70>)
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	4913      	ldr	r1, [pc, #76]	; (8001e58 <SystemInit+0x7c>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <SystemInit+0x70>)
 8001e12:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <SystemInit+0x70>)
 8001e14:	6852      	ldr	r2, [r2, #4]
 8001e16:	4911      	ldr	r1, [pc, #68]	; (8001e5c <SystemInit+0x80>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <SystemInit+0x70>)
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <SystemInit+0x70>)
 8001e20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e22:	210f      	movs	r1, #15
 8001e24:	438a      	bics	r2, r1
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <SystemInit+0x70>)
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <SystemInit+0x70>)
 8001e2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e2e:	490c      	ldr	r1, [pc, #48]	; (8001e60 <SystemInit+0x84>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SystemInit+0x70>)
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <SystemInit+0x70>)
 8001e38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <SystemInit+0x70>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]

}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08ffb80c 	.word	0x08ffb80c
 8001e54:	fef6ffff 	.word	0xfef6ffff
 8001e58:	fffbffff 	.word	0xfffbffff
 8001e5c:	ffc0ffff 	.word	0xffc0ffff
 8001e60:	fffffeec 	.word	0xfffffeec

08001e64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e6a:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <LoopForever+0xe>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e80:	4c0b      	ldr	r4, [pc, #44]	; (8001eb0 <LoopForever+0x16>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e8e:	f7ff ffa5 	bl	8001ddc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001e92:	f000 f811 	bl	8001eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e96:	f7ff fdeb 	bl	8001a70 <main>

08001e9a <LoopForever>:

LoopForever:
    b LoopForever
 8001e9a:	e7fe      	b.n	8001e9a <LoopForever>
  ldr   r0, =_estack
 8001e9c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001ea8:	08001f78 	.word	0x08001f78
  ldr r2, =_sbss
 8001eac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001eb0:	20000070 	.word	0x20000070

08001eb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC1_IRQHandler>
	...

08001eb8 <__libc_init_array>:
 8001eb8:	b570      	push	{r4, r5, r6, lr}
 8001eba:	2600      	movs	r6, #0
 8001ebc:	4d0c      	ldr	r5, [pc, #48]	; (8001ef0 <__libc_init_array+0x38>)
 8001ebe:	4c0d      	ldr	r4, [pc, #52]	; (8001ef4 <__libc_init_array+0x3c>)
 8001ec0:	1b64      	subs	r4, r4, r5
 8001ec2:	10a4      	asrs	r4, r4, #2
 8001ec4:	42a6      	cmp	r6, r4
 8001ec6:	d109      	bne.n	8001edc <__libc_init_array+0x24>
 8001ec8:	2600      	movs	r6, #0
 8001eca:	f000 f819 	bl	8001f00 <_init>
 8001ece:	4d0a      	ldr	r5, [pc, #40]	; (8001ef8 <__libc_init_array+0x40>)
 8001ed0:	4c0a      	ldr	r4, [pc, #40]	; (8001efc <__libc_init_array+0x44>)
 8001ed2:	1b64      	subs	r4, r4, r5
 8001ed4:	10a4      	asrs	r4, r4, #2
 8001ed6:	42a6      	cmp	r6, r4
 8001ed8:	d105      	bne.n	8001ee6 <__libc_init_array+0x2e>
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
 8001edc:	00b3      	lsls	r3, r6, #2
 8001ede:	58eb      	ldr	r3, [r5, r3]
 8001ee0:	4798      	blx	r3
 8001ee2:	3601      	adds	r6, #1
 8001ee4:	e7ee      	b.n	8001ec4 <__libc_init_array+0xc>
 8001ee6:	00b3      	lsls	r3, r6, #2
 8001ee8:	58eb      	ldr	r3, [r5, r3]
 8001eea:	4798      	blx	r3
 8001eec:	3601      	adds	r6, #1
 8001eee:	e7f2      	b.n	8001ed6 <__libc_init_array+0x1e>
 8001ef0:	08001f70 	.word	0x08001f70
 8001ef4:	08001f70 	.word	0x08001f70
 8001ef8:	08001f70 	.word	0x08001f70
 8001efc:	08001f74 	.word	0x08001f74

08001f00 <_init>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f06:	bc08      	pop	{r3}
 8001f08:	469e      	mov	lr, r3
 8001f0a:	4770      	bx	lr

08001f0c <_fini>:
 8001f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f12:	bc08      	pop	{r3}
 8001f14:	469e      	mov	lr, r3
 8001f16:	4770      	bx	lr
